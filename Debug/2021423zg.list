
2021423zg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08009260  08009260  00019260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b0  080094b0  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b8  080094b8  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b8  080094b8  000194b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080094c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  20000204  080096c4  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  080096c4  0002085c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001569b  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032a9  00000000  00000000  000358cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001058  00000000  00000000  00038b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e90  00000000  00000000  00039bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000045a1  00000000  00000000  0003aa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001182a  00000000  00000000  0003f001  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc770  00000000  00000000  0005082b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011cf9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004960  00000000  00000000  0011d018  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000204 	.word	0x20000204
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009244 	.word	0x08009244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000208 	.word	0x20000208
 80001c4:	08009244 	.word	0x08009244

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b972 	b.w	8000e9c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4688      	mov	r8, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14b      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4615      	mov	r5, r2
 8000be2:	d967      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0720 	rsb	r7, r2, #32
 8000bee:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	ea47 0803 	orr.w	r8, r7, r3
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c08:	fa1f fc85 	uxth.w	ip, r5
 8000c0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	fb07 f10c 	mul.w	r1, r7, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c22:	f080 811b 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8118 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c2c:	3f02      	subs	r7, #2
 8000c2e:	442b      	add	r3, r5
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	442c      	add	r4, r5
 8000c5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	2700      	movs	r7, #0
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xbe>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80eb 	beq.w	8000e56 <__udivmoddi4+0x286>
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9c6 0100 	strd	r0, r1, [r6]
 8000c86:	4638      	mov	r0, r7
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f783 	clz	r7, r3
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d147      	bne.n	8000d26 <__udivmoddi4+0x156>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd0>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000cae:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xe8>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc2:	1b49      	subs	r1, r1, r5
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	fa1f f885 	uxth.w	r8, r5
 8000ccc:	2701      	movs	r7, #1
 8000cce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4299      	cmp	r1, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1a59      	subs	r1, r3, r1
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x14c>
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x14a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80b6 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e79f      	b.n	8000c66 <__udivmoddi4+0x96>
 8000d26:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2a:	40bb      	lsls	r3, r7
 8000d2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d34:	fa01 f407 	lsl.w	r4, r1, r7
 8000d38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d44:	4325      	orrs	r5, r4
 8000d46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d50:	fa1f fa8e 	uxth.w	sl, lr
 8000d54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d58:	fb09 f40a 	mul.w	r4, r9, sl
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d62:	fa00 f107 	lsl.w	r1, r0, r7
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1e 0303 	adds.w	r3, lr, r3
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	f080 8087 	bcs.w	8000e82 <__udivmoddi4+0x2b2>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f240 8084 	bls.w	8000e82 <__udivmoddi4+0x2b2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4473      	add	r3, lr
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	b2ad      	uxth	r5, r5
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d94:	45a2      	cmp	sl, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1e 0404 	adds.w	r4, lr, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	d26b      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d969      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4474      	add	r4, lr
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c2      	mov	sl, r8
 8000dba:	464b      	mov	r3, r9
 8000dbc:	d354      	bcc.n	8000e68 <__udivmoddi4+0x298>
 8000dbe:	d051      	beq.n	8000e64 <__udivmoddi4+0x294>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2c8>
 8000dc4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dcc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd0:	40fd      	lsrs	r5, r7
 8000dd2:	40fc      	lsrs	r4, r7
 8000dd4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f703 	lsr.w	r7, r0, r3
 8000de8:	4095      	lsls	r5, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dfe:	fa1f f885 	uxth.w	r8, r5
 8000e02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb07 f308 	mul.w	r3, r7, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x256>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e1c:	d22f      	bcs.n	8000e7e <__udivmoddi4+0x2ae>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d92d      	bls.n	8000e7e <__udivmoddi4+0x2ae>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	b281      	uxth	r1, r0
 8000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb00 f308 	mul.w	r3, r0, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x27e>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e44:	d217      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d915      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1ac9      	subs	r1, r1, r3
 8000e50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e54:	e73b      	b.n	8000cce <__udivmoddi4+0xfe>
 8000e56:	4637      	mov	r7, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e709      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	e6e7      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e64:	4541      	cmp	r1, r8
 8000e66:	d2ab      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e70:	3801      	subs	r0, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	e7a4      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e76:	4660      	mov	r0, ip
 8000e78:	e7e9      	b.n	8000e4e <__udivmoddi4+0x27e>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	e795      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e7e:	4667      	mov	r7, ip
 8000e80:	e7d1      	b.n	8000e26 <__udivmoddi4+0x256>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e77c      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	442c      	add	r4, r5
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0x14c>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	442b      	add	r3, r5
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e94:	4638      	mov	r0, r7
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xda>
 8000e98:	4637      	mov	r7, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa0>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_DMA_Init+0x78>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1a      	ldr	r2, [pc, #104]	; (8000f18 <MX_DMA_Init+0x78>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_DMA_Init+0x78>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_DMA_Init+0x78>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <MX_DMA_Init+0x78>)
 8000ecc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_DMA_Init+0x78>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2010      	movs	r0, #16
 8000ee4:	f003 facf 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ee8:	2010      	movs	r0, #16
 8000eea:	f003 fae8 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2039      	movs	r0, #57	; 0x39
 8000ef4:	f003 fac7 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ef8:	2039      	movs	r0, #57	; 0x39
 8000efa:	f003 fae0 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	203b      	movs	r0, #59	; 0x3b
 8000f04:	f003 fabf 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f08:	203b      	movs	r0, #59	; 0x3b
 8000f0a:	f003 fad8 	bl	80044be <HAL_NVIC_EnableIRQ>

}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <FLAME_A_PUT>:
#include "main.h"
#include "flame.h"

void FLAME_A_PUT (unsigned char *date)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	int i[5]={0};
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
 if  (HAL_GPIO_ReadPin(flame1_GPIO_Port,flame1_Pin )==1)
 8000f34:	2101      	movs	r1, #1
 8000f36:	4831      	ldr	r0, [pc, #196]	; (8000ffc <FLAME_A_PUT+0xe0>)
 8000f38:	f004 f806 	bl	8004f48 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d102      	bne.n	8000f48 <FLAME_A_PUT+0x2c>
	   {
	 	 	 i[0]=0x01;
 8000f42:	2301      	movs	r3, #1
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	e001      	b.n	8000f4c <FLAME_A_PUT+0x30>
	   }
 	 else
 	 	 {
 		 	 i[0]=0x00;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 	 	 }
 if  (HAL_GPIO_ReadPin(flame2_GPIO_Port,flame2_Pin)==1)
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	482b      	ldr	r0, [pc, #172]	; (8000ffc <FLAME_A_PUT+0xe0>)
 8000f50:	f003 fffa 	bl	8004f48 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d102      	bne.n	8000f60 <FLAME_A_PUT+0x44>
	    {
	 	 	 i[1]=0x01;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e001      	b.n	8000f64 <FLAME_A_PUT+0x48>
	    }
 	 else
  	 	 {
 		 	 i[1]=0x00;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  	 	 }
if  (HAL_GPIO_ReadPin(flame3_GPIO_Port,flame3_Pin)==1)
 8000f64:	2108      	movs	r1, #8
 8000f66:	4825      	ldr	r0, [pc, #148]	; (8000ffc <FLAME_A_PUT+0xe0>)
 8000f68:	f003 ffee 	bl	8004f48 <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <FLAME_A_PUT+0x5c>
	    {
			 i[2]=0x01;
 8000f72:	2301      	movs	r3, #1
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	e001      	b.n	8000f7c <FLAME_A_PUT+0x60>
	    }
else
 	 	 {
			i[2]=0x00;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
 	 	 }
if  (HAL_GPIO_ReadPin(flame4_GPIO_Port,flame4_Pin)==1)
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	481f      	ldr	r0, [pc, #124]	; (8000ffc <FLAME_A_PUT+0xe0>)
 8000f80:	f003 ffe2 	bl	8004f48 <HAL_GPIO_ReadPin>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d102      	bne.n	8000f90 <FLAME_A_PUT+0x74>
	    {
			 i[3]=0x01;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e001      	b.n	8000f94 <FLAME_A_PUT+0x78>

	    }
else
 	 	 {
			i[3]=0x00;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 	 	 }
if  (HAL_GPIO_ReadPin(flame5_GPIO_Port,flame5_Pin)==1)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	4819      	ldr	r0, [pc, #100]	; (8000ffc <FLAME_A_PUT+0xe0>)
 8000f98:	f003 ffd6 	bl	8004f48 <HAL_GPIO_ReadPin>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d102      	bne.n	8000fa8 <FLAME_A_PUT+0x8c>
	    {
	 	 	 i[4]=0x01;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	e001      	b.n	8000fac <FLAME_A_PUT+0x90>

	    }
else
 	 	 {
			i[4]=0x00;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61bb      	str	r3, [r7, #24]
 	 	 }
for(int j=0;j<5;j++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	e01d      	b.n	8000fee <FLAME_A_PUT+0xd2>
{
	if (i[j]==1)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	f107 0220 	add.w	r2, r7, #32
 8000fba:	4413      	add	r3, r2
 8000fbc:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d104      	bne.n	8000fce <FLAME_A_PUT+0xb2>
		{
			date[1]=1;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
			break;
 8000fcc:	e012      	b.n	8000ff4 <FLAME_A_PUT+0xd8>
		}
		else if (i[j]==0)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	f107 0220 	add.w	r2, r7, #32
 8000fd6:	4413      	add	r3, r2
 8000fd8:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d103      	bne.n	8000fe8 <FLAME_A_PUT+0xcc>
		{
			date[1]=0;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
for(int j=0;j<5;j++)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	3301      	adds	r3, #1
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	2b04      	cmp	r3, #4
 8000ff2:	ddde      	ble.n	8000fb2 <FLAME_A_PUT+0x96>
		}
}
}
 8000ff4:	bf00      	nop
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020c00 	.word	0x40020c00

08001000 <FLAME_B_PUT>:


void FLAME_B_PUT (unsigned char *date)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	int i[5]={0};
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
	    }
 	 else
  	 	 {
 		i[1]=0x00;
  	 	 }*/
if  (HAL_GPIO_ReadPin(flame8_GPIO_Port,flame8_Pin)==1)
 8001018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800101c:	481f      	ldr	r0, [pc, #124]	; (800109c <FLAME_B_PUT+0x9c>)
 800101e:	f003 ff93 	bl	8004f48 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d102      	bne.n	800102e <FLAME_B_PUT+0x2e>
	    {
	 i[2]=0x01;
 8001028:	2301      	movs	r3, #1
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	e001      	b.n	8001032 <FLAME_B_PUT+0x32>
	    }
else
 	 	 {
	i[2]=0x00;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 	 	 }
if  (HAL_GPIO_ReadPin(flame9_GPIO_Port,flame9_Pin)==1)
 8001032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001036:	4819      	ldr	r0, [pc, #100]	; (800109c <FLAME_B_PUT+0x9c>)
 8001038:	f003 ff86 	bl	8004f48 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <FLAME_B_PUT+0x48>
	    {
	 i[3]=0x01;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e001      	b.n	800104c <FLAME_B_PUT+0x4c>
	    }
else
 	 	 {
	i[3]=0x00;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
	    }
else
 	 	 {
	i[4]=0x00;
 	 	 }*/
for(int j=0;j<5;j++)
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	e01d      	b.n	800108e <FLAME_B_PUT+0x8e>
{
	if (i[j]==1)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	f107 0220 	add.w	r2, r7, #32
 800105a:	4413      	add	r3, r2
 800105c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d104      	bne.n	800106e <FLAME_B_PUT+0x6e>
	{
		date[2]=1;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3302      	adds	r3, #2
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
		break;
 800106c:	e012      	b.n	8001094 <FLAME_B_PUT+0x94>
	}
	else if (i[j]==0)
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	f107 0220 	add.w	r2, r7, #32
 8001076:	4413      	add	r3, r2
 8001078:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d103      	bne.n	8001088 <FLAME_B_PUT+0x88>
	{
		date[2]=0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3302      	adds	r3, #2
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
for(int j=0;j<5;j++)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	3301      	adds	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	2b04      	cmp	r3, #4
 8001092:	ddde      	ble.n	8001052 <FLAME_B_PUT+0x52>

	}
}
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021800 	.word	0x40021800

080010a0 <FLAME_C_PUT>:

void FLAME_C_PUT (unsigned char *date)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	int i[5]={0};
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
 if  (HAL_GPIO_ReadPin(flame11_GPIO_Port,flame11_Pin )==1)
 80010b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010bc:	4832      	ldr	r0, [pc, #200]	; (8001188 <FLAME_C_PUT+0xe8>)
 80010be:	f003 ff43 	bl	8004f48 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d102      	bne.n	80010ce <FLAME_C_PUT+0x2e>
	   {
	 	  i[0]=0x01;
 80010c8:	2301      	movs	r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	e001      	b.n	80010d2 <FLAME_C_PUT+0x32>
	   }
 	 else
 	 	 {
 		i[0]=0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 	 	 }
 if  (HAL_GPIO_ReadPin(flame12_GPIO_Port,flame12_Pin)==1)
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	482d      	ldr	r0, [pc, #180]	; (800118c <FLAME_C_PUT+0xec>)
 80010d6:	f003 ff37 	bl	8004f48 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d102      	bne.n	80010e6 <FLAME_C_PUT+0x46>
	    {
	 i[1]=0x01;
 80010e0:	2301      	movs	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	e001      	b.n	80010ea <FLAME_C_PUT+0x4a>
	    }
 	 else
  	 	 {
 		i[1]=0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  	 	 }
if  (HAL_GPIO_ReadPin(flame13_GPIO_Port,flame13_Pin)==1)
 80010ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ee:	4827      	ldr	r0, [pc, #156]	; (800118c <FLAME_C_PUT+0xec>)
 80010f0:	f003 ff2a 	bl	8004f48 <HAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d102      	bne.n	8001100 <FLAME_C_PUT+0x60>
	    {
	 i[2]=0x01;
 80010fa:	2301      	movs	r3, #1
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	e001      	b.n	8001104 <FLAME_C_PUT+0x64>
	    }
else
 	 	 {
	i[2]=0x00;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
 	 	 }
if  (HAL_GPIO_ReadPin(flame14_GPIO_Port,flame14_Pin)==1)
 8001104:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001108:	4820      	ldr	r0, [pc, #128]	; (800118c <FLAME_C_PUT+0xec>)
 800110a:	f003 ff1d 	bl	8004f48 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d102      	bne.n	800111a <FLAME_C_PUT+0x7a>
	    {
	 i[3]=0x01;
 8001114:	2301      	movs	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e001      	b.n	800111e <FLAME_C_PUT+0x7e>
	    }
else
 	 	 {
	i[3]=0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 	 	 }
if  (HAL_GPIO_ReadPin(flame15_GPIO_Port,flame15_Pin)==1)
 800111e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001122:	481a      	ldr	r0, [pc, #104]	; (800118c <FLAME_C_PUT+0xec>)
 8001124:	f003 ff10 	bl	8004f48 <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b01      	cmp	r3, #1
 800112c:	d102      	bne.n	8001134 <FLAME_C_PUT+0x94>
	    {
	 i[4]=0x01;
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	e001      	b.n	8001138 <FLAME_C_PUT+0x98>
	    }
else
 	 	 {
	i[4]=0x00;
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
 	 	 }
for(int j=0;j<5;j++)
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	e01d      	b.n	800117a <FLAME_C_PUT+0xda>
{
	if (i[j]==1)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	f107 0220 	add.w	r2, r7, #32
 8001146:	4413      	add	r3, r2
 8001148:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d104      	bne.n	800115a <FLAME_C_PUT+0xba>
		{
			date[3]=1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3303      	adds	r3, #3
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
			break;
 8001158:	e012      	b.n	8001180 <FLAME_C_PUT+0xe0>
		}
		else if (i[j]==0)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	f107 0220 	add.w	r2, r7, #32
 8001162:	4413      	add	r3, r2
 8001164:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d103      	bne.n	8001174 <FLAME_C_PUT+0xd4>
		{
			date[3]=0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3303      	adds	r3, #3
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
for(int j=0;j<5;j++)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	3301      	adds	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	2b04      	cmp	r3, #4
 800117e:	ddde      	ble.n	800113e <FLAME_C_PUT+0x9e>
		}
}
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021800 	.word	0x40021800
 800118c:	40021000 	.word	0x40021000

08001190 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	4bb5      	ldr	r3, [pc, #724]	; (8001480 <MX_GPIO_Init+0x2f0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4ab4      	ldr	r2, [pc, #720]	; (8001480 <MX_GPIO_Init+0x2f0>)
 80011b0:	f043 0310 	orr.w	r3, r3, #16
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4bb2      	ldr	r3, [pc, #712]	; (8001480 <MX_GPIO_Init+0x2f0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0310 	and.w	r3, r3, #16
 80011be:	623b      	str	r3, [r7, #32]
 80011c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	4bae      	ldr	r3, [pc, #696]	; (8001480 <MX_GPIO_Init+0x2f0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4aad      	ldr	r2, [pc, #692]	; (8001480 <MX_GPIO_Init+0x2f0>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4bab      	ldr	r3, [pc, #684]	; (8001480 <MX_GPIO_Init+0x2f0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
 80011e2:	4ba7      	ldr	r3, [pc, #668]	; (8001480 <MX_GPIO_Init+0x2f0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4aa6      	ldr	r2, [pc, #664]	; (8001480 <MX_GPIO_Init+0x2f0>)
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4ba4      	ldr	r3, [pc, #656]	; (8001480 <MX_GPIO_Init+0x2f0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0320 	and.w	r3, r3, #32
 80011f6:	61bb      	str	r3, [r7, #24]
 80011f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	4ba0      	ldr	r3, [pc, #640]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a9f      	ldr	r2, [pc, #636]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b9d      	ldr	r3, [pc, #628]	; (8001480 <MX_GPIO_Init+0x2f0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b99      	ldr	r3, [pc, #612]	; (8001480 <MX_GPIO_Init+0x2f0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a98      	ldr	r2, [pc, #608]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b96      	ldr	r3, [pc, #600]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b92      	ldr	r3, [pc, #584]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a91      	ldr	r2, [pc, #580]	; (8001480 <MX_GPIO_Init+0x2f0>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b8f      	ldr	r3, [pc, #572]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b8b      	ldr	r3, [pc, #556]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a8a      	ldr	r2, [pc, #552]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b88      	ldr	r3, [pc, #544]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b84      	ldr	r3, [pc, #528]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a83      	ldr	r2, [pc, #524]	; (8001480 <MX_GPIO_Init+0x2f0>)
 8001274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b81      	ldr	r3, [pc, #516]	; (8001480 <MX_GPIO_Init+0x2f0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_SCK_Pin|SPI2_NSS_Pin|I2C1_SDA_Pin|Tring4_Pin
 8001286:	2200      	movs	r2, #0
 8001288:	f24a 2118 	movw	r1, #41496	; 0xa218
 800128c:	487d      	ldr	r0, [pc, #500]	; (8001484 <MX_GPIO_Init+0x2f4>)
 800128e:	f003 fe73 	bl	8004f78 <HAL_GPIO_WritePin>
                          |buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CE_GPIO_Port, SPI1_CE_Pin, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	487c      	ldr	r0, [pc, #496]	; (8001488 <MX_GPIO_Init+0x2f8>)
 8001298:	f003 fe6e 	bl	8004f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, I2C3_SDA_Pin|I2C3_SCL_Pin|Tring3_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80012a2:	4879      	ldr	r0, [pc, #484]	; (8001488 <MX_GPIO_Init+0x2f8>)
 80012a4:	f003 fe68 	bl	8004f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|SPI2_MISO_Pin|Tring1_Pin|motor5_Pin
 80012a8:	2200      	movs	r2, #0
 80012aa:	f240 3126 	movw	r1, #806	; 0x326
 80012ae:	4877      	ldr	r0, [pc, #476]	; (800148c <MX_GPIO_Init+0x2fc>)
 80012b0:	f003 fe62 	bl	8004f78 <HAL_GPIO_WritePin>
                          |motor6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|motor7_Pin|motor8_Pin|STBY1_Pin
 80012b4:	2200      	movs	r2, #0
 80012b6:	f641 3110 	movw	r1, #6928	; 0x1b10
 80012ba:	4875      	ldr	r0, [pc, #468]	; (8001490 <MX_GPIO_Init+0x300>)
 80012bc:	f003 fe5c 	bl	8004f78 <HAL_GPIO_WritePin>
                          |STBY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Tring2_Pin|SPI2_MOSI_Pin|I2C1_SCL_Pin|I2C2_SCL_Pin
 80012c0:	2200      	movs	r2, #0
 80012c2:	f24e 4102 	movw	r1, #58370	; 0xe402
 80012c6:	4873      	ldr	r0, [pc, #460]	; (8001494 <MX_GPIO_Init+0x304>)
 80012c8:	f003 fe56 	bl	8004f78 <HAL_GPIO_WritePin>
                          |I2C2_SDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, motor1_Pin|motor2_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80012d2:	4871      	ldr	r0, [pc, #452]	; (8001498 <MX_GPIO_Init+0x308>)
 80012d4:	f003 fe50 	bl	8004f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, motor3_Pin|motor4_Pin|LED_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80012de:	486f      	ldr	r0, [pc, #444]	; (800149c <MX_GPIO_Init+0x30c>)
 80012e0:	f003 fe4a 	bl	8004f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin|I2C1_SDA_Pin|Tring4_Pin;
 80012e4:	f242 2318 	movw	r3, #8728	; 0x2218
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	4861      	ldr	r0, [pc, #388]	; (8001484 <MX_GPIO_Init+0x2f4>)
 80012fe:	f003 fc89 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo3_Pin;
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Echo3_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	4619      	mov	r1, r3
 8001314:	485c      	ldr	r0, [pc, #368]	; (8001488 <MX_GPIO_Init+0x2f8>)
 8001316:	f003 fc7d 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CE_Pin;
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001322:	2301      	movs	r3, #1
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CE_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	4855      	ldr	r0, [pc, #340]	; (8001488 <MX_GPIO_Init+0x2f8>)
 8001332:	f003 fc6f 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_IRQ_Pin;
 8001336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001340:	2301      	movs	r3, #1
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	484f      	ldr	r0, [pc, #316]	; (8001488 <MX_GPIO_Init+0x2f8>)
 800134c:	f003 fc62 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin|Tring3_Pin;
 8001350:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4847      	ldr	r0, [pc, #284]	; (8001488 <MX_GPIO_Init+0x2f8>)
 800136a:	f003 fc53 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|SPI2_MISO_Pin|Tring1_Pin|motor5_Pin
 800136e:	f240 3326 	movw	r3, #806	; 0x326
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
                          |motor6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4841      	ldr	r0, [pc, #260]	; (800148c <MX_GPIO_Init+0x2fc>)
 8001388:	f003 fc44 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800138c:	2301      	movs	r3, #1
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	483c      	ldr	r0, [pc, #240]	; (8001490 <MX_GPIO_Init+0x300>)
 80013a0:	f003 fc38 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80013a4:	2310      	movs	r3, #16
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b0:	2302      	movs	r3, #2
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4835      	ldr	r0, [pc, #212]	; (8001490 <MX_GPIO_Init+0x300>)
 80013bc:	f003 fc2a 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo1_Pin;
 80013c0:	2310      	movs	r3, #16
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Echo1_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	4619      	mov	r1, r3
 80013d2:	482e      	ldr	r0, [pc, #184]	; (800148c <MX_GPIO_Init+0x2fc>)
 80013d4:	f003 fc1e 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo2_Pin;
 80013d8:	2301      	movs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Echo2_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	482a      	ldr	r0, [pc, #168]	; (8001494 <MX_GPIO_Init+0x304>)
 80013ec:	f003 fc12 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Tring2_Pin|SPI2_MOSI_Pin|I2C1_SCL_Pin|I2C2_SCL_Pin
 80013f0:	f24e 4302 	movw	r3, #58370	; 0xe402
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |I2C2_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	4822      	ldr	r0, [pc, #136]	; (8001494 <MX_GPIO_Init+0x304>)
 800140a:	f003 fc03 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = flame12_Pin|flame13_Pin|flame14_Pin|flame15_Pin;
 800140e:	f44f 6358 	mov.w	r3, #3456	; 0xd80
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001418:	2302      	movs	r3, #2
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <MX_GPIO_Init+0x2f4>)
 8001424:	f003 fbf6 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Echo4_Pin|people_Pin;
 8001428:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	4811      	ldr	r0, [pc, #68]	; (8001484 <MX_GPIO_Init+0x2f4>)
 800143e:	f003 fbe9 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8001442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800144c:	2302      	movs	r3, #2
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	480a      	ldr	r0, [pc, #40]	; (8001484 <MX_GPIO_Init+0x2f4>)
 800145c:	f003 fbda 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = smok_Pin;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146a:	2301      	movs	r3, #1
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(smok_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <MX_GPIO_Init+0x304>)
 8001476:	f003 fbcd 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = motor1_Pin|motor2_Pin;
 800147a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800147e:	e00f      	b.n	80014a0 <MX_GPIO_Init+0x310>
 8001480:	40023800 	.word	0x40023800
 8001484:	40021000 	.word	0x40021000
 8001488:	40021400 	.word	0x40021400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40020c00 	.word	0x40020c00
 800149c:	40021800 	.word	0x40021800
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	4826      	ldr	r0, [pc, #152]	; (8001550 <MX_GPIO_Init+0x3c0>)
 80014b6:	f003 fbad 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = motor3_Pin|motor4_Pin;
 80014ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	4820      	ldr	r0, [pc, #128]	; (8001554 <MX_GPIO_Init+0x3c4>)
 80014d4:	f003 fb9e 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = motor7_Pin|motor8_Pin|STBY1_Pin|STBY2_Pin;
 80014d8:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014de:	2301      	movs	r3, #1
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	4819      	ldr	r0, [pc, #100]	; (8001558 <MX_GPIO_Init+0x3c8>)
 80014f2:	f003 fb8f 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = flame1_Pin|flame2_Pin|flame3_Pin|flame4_Pin
 80014f6:	239b      	movs	r3, #155	; 0x9b
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |flame5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014fe:	2302      	movs	r3, #2
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	4619      	mov	r1, r3
 8001508:	4811      	ldr	r0, [pc, #68]	; (8001550 <MX_GPIO_Init+0x3c0>)
 800150a:	f003 fb83 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800150e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001518:	2302      	movs	r3, #2
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	4619      	mov	r1, r3
 8001526:	480b      	ldr	r0, [pc, #44]	; (8001554 <MX_GPIO_Init+0x3c4>)
 8001528:	f003 fb74 	bl	8004c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = flame8_Pin|flame9_Pin|flame11_Pin;
 800152c:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001536:	2302      	movs	r3, #2
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	4804      	ldr	r0, [pc, #16]	; (8001554 <MX_GPIO_Init+0x3c4>)
 8001542:	f003 fb67 	bl	8004c14 <HAL_GPIO_Init>

}
 8001546:	bf00      	nop
 8001548:	3738      	adds	r7, #56	; 0x38
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021800 	.word	0x40021800
 8001558:	40020000 	.word	0x40020000

0800155c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001560:	f002 fe58 	bl	8004214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001564:	f000 f83c 	bl	80015e0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f7ff fe12 	bl	8001190 <MX_GPIO_Init>
  MX_DMA_Init();
 800156c:	f7ff fc98 	bl	8000ea0 <MX_DMA_Init>
  MX_TIM3_Init();
 8001570:	f001 ff9a 	bl	80034a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001574:	f001 ffec 	bl	8003550 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001578:	f001 ff42 	bl	8003400 <MX_TIM2_Init>
  MX_TIM9_Init();
 800157c:	f002 f98c 	bl	8003898 <MX_TIM9_Init>
  MX_TIM5_Init();
 8001580:	f002 f83a 	bl	80035f8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001584:	f002 f930 	bl	80037e8 <MX_TIM8_Init>
  MX_TIM6_Init();
 8001588:	f002 f8c2 	bl	8003710 <MX_TIM6_Init>
  MX_SPI1_Init();
 800158c:	f001 fce6 	bl	8002f5c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001590:	f002 fc76 	bl	8003e80 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001594:	f002 fc9e 	bl	8003ed4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001598:	f001 fee2 	bl	8003360 <MX_TIM1_Init>
  MX_TIM7_Init();
 800159c:	f002 f8ee 	bl	800377c <MX_TIM7_Init>
  MX_TIM10_Init();
 80015a0:	f002 f9e6 	bl	8003970 <MX_TIM10_Init>
  MX_TIM11_Init();
 80015a4:	f002 fa08 	bl	80039b8 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 80015a8:	f002 fcbe 	bl	8003f28 <MX_USART6_UART_Init>
*/
//int rx_buffer[]={0};
//HAL_UART_Receive_DMA(&huart2,rx_buffer,11);
 //  电机控制程序
 //PWM，编码器，芯片使�????????????????????????????????????????????
  motor_start();
 80015ac:	f001 fda6 	bl	80030fc <motor_start>

   //读取给定速度并转�????????????????????????????????????????????
  //readsetpoint(0.1,0,setpoint);
   __HAL_SPI_ENABLE(&hspi1);
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <main+0x78>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <main+0x78>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015be:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI1_CE_GPIO_Port,SPI1_CE_Pin,1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	4804      	ldr	r0, [pc, #16]	; (80015d8 <main+0x7c>)
 80015c6:	f003 fcd7 	bl	8004f78 <HAL_GPIO_WritePin>
//打开定时器中
  HAL_TIM_Base_Start_IT(&htim1);
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <main+0x80>)
 80015cc:	f004 f9b9 	bl	8005942 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <main+0x74>
 80015d2:	bf00      	nop
 80015d4:	2000035c 	.word	0x2000035c
 80015d8:	40021400 	.word	0x40021400
 80015dc:	200005d4 	.word	0x200005d4

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	; 0x50
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	2230      	movs	r2, #48	; 0x30
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f006 f8fc 	bl	80077ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <SystemClock_Config+0xcc>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <SystemClock_Config+0xcc>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <SystemClock_Config+0xcc>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <SystemClock_Config+0xd0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <SystemClock_Config+0xd0>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <SystemClock_Config+0xd0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001650:	2319      	movs	r3, #25
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001654:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165a:	2302      	movs	r3, #2
 800165c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800165e:	2304      	movs	r3, #4
 8001660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	4618      	mov	r0, r3
 8001668:	f003 fca0 	bl	8004fac <HAL_RCC_OscConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001672:	f000 fa89 	bl	8001b88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001676:	230f      	movs	r3, #15
 8001678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167a:	2302      	movs	r3, #2
 800167c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2105      	movs	r1, #5
 8001694:	4618      	mov	r0, r3
 8001696:	f003 fef9 	bl	800548c <HAL_RCC_ClockConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016a0:	f000 fa72 	bl	8001b88 <Error_Handler>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3750      	adds	r7, #80	; 0x50
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000

080016b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	if (htim==&htim1)//判断是否威定时器7中断
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4ac2      	ldr	r2, [pc, #776]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	f040 823e 	bne.w	8001b42 <HAL_TIM_PeriodElapsedCallback+0x48e>
	{
		motor++;
 80016c6:	4bc1      	ldr	r3, [pc, #772]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x318>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x318>)
 80016ce:	6013      	str	r3, [r2, #0]
		ultrasonic++;
 80016d0:	4bbf      	ldr	r3, [pc, #764]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4abe      	ldr	r2, [pc, #760]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80016d8:	6013      	str	r3, [r2, #0]
		sensor++;
 80016da:	4bbe      	ldr	r3, [pc, #760]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	4abc      	ldr	r2, [pc, #752]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80016e2:	6013      	str	r3, [r2, #0]
		send++;
 80016e4:	4bbc      	ldr	r3, [pc, #752]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	4abb      	ldr	r2, [pc, #748]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80016ec:	6013      	str	r3, [r2, #0]
		receive++;
 80016ee:	4bbb      	ldr	r3, [pc, #748]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4ab9      	ldr	r2, [pc, #740]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016f6:	6013      	str	r3, [r2, #0]
	if(motor==200)
 80016f8:	4bb4      	ldr	r3, [pc, #720]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x318>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2bc8      	cmp	r3, #200	; 0xc8
 80016fe:	f040 811d 	bne.w	800193c <HAL_TIM_PeriodElapsedCallback+0x288>
		{
	//	leftvollinearvelocity_set=200;
		//rightvollinearvelocity_set=200;
		float v[4]={0};//小车实际线�?�度清零
 8001702:	f107 0318 	add.w	r3, r7, #24
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
		float angular[4]={0};//计算小车转动角度清零
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
		//控制小车前进或后�???????????????????????????????????????????
		// readsetpoint(leftvollinearvelocity_,rightvollinearvelocity_set,setpoint);
	    go_or_back_L_1((float)leftvollinearvelocity_set);
 800171e:	4bb0      	ldr	r3, [pc, #704]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	f000 fb86 	bl	8001e3e <go_or_back_L_1>
		go_or_back_L_2((float)leftvollinearvelocity_set);
 8001732:	4bab      	ldr	r3, [pc, #684]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173e:	eeb0 0a67 	vmov.f32	s0, s15
 8001742:	f000 fd8f 	bl	8002264 <go_or_back_L_2>
		go_or_back_R_1((float)rightvollinearvelocity_set);
 8001746:	4ba7      	ldr	r3, [pc, #668]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	f000 ff99 	bl	800268c <go_or_back_R_1>
		go_or_back_R_2((float)rightvollinearvelocity_set);
 800175a:	4ba2      	ldr	r3, [pc, #648]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001766:	eeb0 0a67 	vmov.f32	s0, s15
 800176a:	f001 f9a7 	bl	8002abc <go_or_back_R_2>
		//测出小车行驶速度
		v[0]= contol_L_1((float)leftvollinearvelocity_set,(float)rightvollinearvelocity_set,angular);
 800176e:	4b9c      	ldr	r3, [pc, #624]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177a:	4b9a      	ldr	r3, [pc, #616]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	ee07 3a10 	vmov	s14, r3
 8001782:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	4618      	mov	r0, r3
 800178c:	eef0 0a47 	vmov.f32	s1, s14
 8001790:	eeb0 0a67 	vmov.f32	s0, s15
 8001794:	f000 fbb4 	bl	8001f00 <contol_L_1>
 8001798:	eef0 7a40 	vmov.f32	s15, s0
 800179c:	edc7 7a06 	vstr	s15, [r7, #24]
		v[1]= contol_L_2((float)leftvollinearvelocity_set,(float)rightvollinearvelocity_set,angular);
 80017a0:	4b8f      	ldr	r3, [pc, #572]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	4b8d      	ldr	r3, [pc, #564]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	ee07 3a10 	vmov	s14, r3
 80017b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4618      	mov	r0, r3
 80017be:	eef0 0a47 	vmov.f32	s1, s14
 80017c2:	eeb0 0a67 	vmov.f32	s0, s15
 80017c6:	f000 fdab 	bl	8002320 <contol_L_2>
 80017ca:	eef0 7a40 	vmov.f32	s15, s0
 80017ce:	edc7 7a07 	vstr	s15, [r7, #28]
		v[2]= contol_R_1((float)rightvollinearvelocity_set,(float)leftvollinearvelocity_set,angular);
 80017d2:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	ee07 3a10 	vmov	s14, r3
 80017e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4618      	mov	r0, r3
 80017f0:	eef0 0a47 	vmov.f32	s1, s14
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	f000 ffaa 	bl	8002750 <contol_R_1>
 80017fc:	eef0 7a40 	vmov.f32	s15, s0
 8001800:	edc7 7a08 	vstr	s15, [r7, #32]
		v[3]= contol_R_2((float)rightvollinearvelocity_set,(float)leftvollinearvelocity_set,angular);
 8001804:	4b77      	ldr	r3, [pc, #476]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001810:	4b73      	ldr	r3, [pc, #460]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	ee07 3a10 	vmov	s14, r3
 8001818:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4618      	mov	r0, r3
 8001822:	eef0 0a47 	vmov.f32	s1, s14
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	f001 f9a9 	bl	8002b80 <contol_R_2>
 800182e:	eef0 7a40 	vmov.f32	s15, s0
 8001832:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		date[12]=(v[0]+v[1]+v[2]+v[3])/4*1000;//计算小车4个轮子平均�?�度
 8001836:	ed97 7a06 	vldr	s14, [r7, #24]
 800183a:	edd7 7a07 	vldr	s15, [r7, #28]
 800183e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001842:	edd7 7a08 	vldr	s15, [r7, #32]
 8001846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800184a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800184e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001852:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80019e8 <HAL_TIM_PeriodElapsedCallback+0x334>
 800185e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001866:	edc7 7a00 	vstr	s15, [r7]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001870:	731a      	strb	r2, [r3, #12]
		date[13]=(angular[0]+angular[1]+angular[2]+angular[3])/4*1000;//计算小车4个轮子平均转角度
 8001872:	ed97 7a02 	vldr	s14, [r7, #8]
 8001876:	edd7 7a03 	vldr	s15, [r7, #12]
 800187a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800187e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001882:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001886:	edd7 7a05 	vldr	s15, [r7, #20]
 800188a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800188e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001896:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80019e8 <HAL_TIM_PeriodElapsedCallback+0x334>
 800189a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a2:	edc7 7a00 	vstr	s15, [r7]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 80018ac:	735a      	strb	r2, [r3, #13]
		leftvollinearvelocity_pre=(v[1]+v[1])/2*1000;
 80018ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80018b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018be:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80019e8 <HAL_TIM_PeriodElapsedCallback+0x334>
 80018c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c6:	4b4a      	ldr	r3, [pc, #296]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
		rightvollinearvelocity_pre=(v[2]+v[3])/2*1000;
 80018cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80018d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80019e8 <HAL_TIM_PeriodElapsedCallback+0x334>
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018ea:	edc3 7a00 	vstr	s15, [r3]
		motor=0;
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x318>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,30);//通过pwm控制电机速度
 80018f4:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	221e      	movs	r2, #30
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,30);//通过pwm控制电机速度
 80018fc:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	221e      	movs	r2, #30
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,30);//通过pwm控制电机速度
 8001904:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	221e      	movs	r2, #30
 800190a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_2,30);//通过pwm控制电机速度
 800190c:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x348>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	221e      	movs	r2, #30
 8001912:	639a      	str	r2, [r3, #56]	; 0x38
		date_t[7]=(leftvollinearvelocity_pre+rightvollinearvelocity_pre)/2;
 8001914:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001916:	ed93 7a00 	vldr	s14, [r3]
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001924:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001930:	edc7 7a00 	vstr	s15, [r7]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b31      	ldr	r3, [pc, #196]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800193a:	71da      	strb	r2, [r3, #7]
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
			HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
			HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
			 HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
			}*/
		if (sensor==1000)
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001944:	f040 8092 	bne.w	8001a6c <HAL_TIM_PeriodElapsedCallback+0x3b8>
		{
			HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 8001948:	213c      	movs	r1, #60	; 0x3c
 800194a:	482e      	ldr	r0, [pc, #184]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800194c:	f004 f959 	bl	8005c02 <HAL_TIM_Encoder_Stop>
			HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 8001950:	213c      	movs	r1, #60	; 0x3c
 8001952:	482d      	ldr	r0, [pc, #180]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001954:	f004 f955 	bl	8005c02 <HAL_TIM_Encoder_Stop>
			HAL_TIM_Encoder_Stop(&htim2,TIM_CHANNEL_ALL);
 8001958:	213c      	movs	r1, #60	; 0x3c
 800195a:	482c      	ldr	r0, [pc, #176]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x358>)
 800195c:	f004 f951 	bl	8005c02 <HAL_TIM_Encoder_Stop>
			HAL_TIM_Encoder_Stop(&htim8,TIM_CHANNEL_ALL);
 8001960:	213c      	movs	r1, #60	; 0x3c
 8001962:	482b      	ldr	r0, [pc, #172]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001964:	f004 f94d 	bl	8005c02 <HAL_TIM_Encoder_Stop>
			SMOK_PUT(date);
 8001968:	4820      	ldr	r0, [pc, #128]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 800196a:	f001 fadb 	bl	8002f24 <SMOK_PUT>
			FLAME_A_PUT(date);
 800196e:	481f      	ldr	r0, [pc, #124]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001970:	f7ff fad4 	bl	8000f1c <FLAME_A_PUT>
			FLAME_B_PUT(date);
 8001974:	481d      	ldr	r0, [pc, #116]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001976:	f7ff fb43 	bl	8001000 <FLAME_B_PUT>
			FLAME_C_PUT(date);
 800197a:	481c      	ldr	r0, [pc, #112]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 800197c:	f7ff fb90 	bl	80010a0 <FLAME_C_PUT>
			PEOPLE_PUT(date);
 8001980:	481a      	ldr	r0, [pc, #104]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001982:	f001 fab3 	bl	8002eec <PEOPLE_PUT>
			date_t[2]=date[1];
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001988:	785a      	ldrb	r2, [r3, #1]
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800198c:	709a      	strb	r2, [r3, #2]
			date_t[3]=date[2];
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001990:	789a      	ldrb	r2, [r3, #2]
 8001992:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001994:	70da      	strb	r2, [r3, #3]
			date_t[4]=date[3];
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001998:	78da      	ldrb	r2, [r3, #3]
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800199c:	711a      	strb	r2, [r3, #4]
			date_t[5]=date[4];
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 80019a0:	791a      	ldrb	r2, [r3, #4]
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80019a4:	715a      	strb	r2, [r3, #5]
			 if(date[1]||date[2]||date[3]||date[4]==1)
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d132      	bne.n	8001a14 <HAL_TIM_PeriodElapsedCallback+0x360>
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 80019b0:	789b      	ldrb	r3, [r3, #2]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d12e      	bne.n	8001a14 <HAL_TIM_PeriodElapsedCallback+0x360>
 80019b6:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 80019b8:	78db      	ldrb	r3, [r3, #3]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d12a      	bne.n	8001a14 <HAL_TIM_PeriodElapsedCallback+0x360>
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x338>)
 80019c0:	791b      	ldrb	r3, [r3, #4]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d133      	bne.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x37a>
 80019c6:	e025      	b.n	8001a14 <HAL_TIM_PeriodElapsedCallback+0x360>
 80019c8:	200005d4 	.word	0x200005d4
 80019cc:	20000234 	.word	0x20000234
 80019d0:	20000238 	.word	0x20000238
 80019d4:	2000023c 	.word	0x2000023c
 80019d8:	20000240 	.word	0x20000240
 80019dc:	20000244 	.word	0x20000244
 80019e0:	20000228 	.word	0x20000228
 80019e4:	2000022c 	.word	0x2000022c
 80019e8:	447a0000 	.word	0x447a0000
 80019ec:	20000328 	.word	0x20000328
 80019f0:	20000220 	.word	0x20000220
 80019f4:	20000224 	.word	0x20000224
 80019f8:	200004d4 	.word	0x200004d4
 80019fc:	20000614 	.word	0x20000614
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000514 	.word	0x20000514
 8001a08:	20000454 	.word	0x20000454
 8001a0c:	20000654 	.word	0x20000654
 8001a10:	20000414 	.word	0x20000414
				{
					HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1a:	484c      	ldr	r0, [pc, #304]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001a1c:	f003 faac 	bl	8004f78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a26:	484a      	ldr	r0, [pc, #296]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8001a28:	f003 faa6 	bl	8004f78 <HAL_GPIO_WritePin>
 8001a2c:	e00b      	b.n	8001a46 <HAL_TIM_PeriodElapsedCallback+0x392>
				}
			else
				{
					HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a34:	4845      	ldr	r0, [pc, #276]	; (8001b4c <HAL_TIM_PeriodElapsedCallback+0x498>)
 8001a36:	f003 fa9f 	bl	8004f78 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a40:	4843      	ldr	r0, [pc, #268]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8001a42:	f003 fa99 	bl	8004f78 <HAL_GPIO_WritePin>
				}
			sensor=0;
 8001a46:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
		HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001a4c:	213c      	movs	r1, #60	; 0x3c
 8001a4e:	4842      	ldr	r0, [pc, #264]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001a50:	f004 f8a0 	bl	8005b94 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8001a54:	213c      	movs	r1, #60	; 0x3c
 8001a56:	4841      	ldr	r0, [pc, #260]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001a58:	f004 f89c 	bl	8005b94 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001a5c:	213c      	movs	r1, #60	; 0x3c
 8001a5e:	4840      	ldr	r0, [pc, #256]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001a60:	f004 f898 	bl	8005b94 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001a64:	213c      	movs	r1, #60	; 0x3c
 8001a66:	483f      	ldr	r0, [pc, #252]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001a68:	f004 f894 	bl	8005b94 <HAL_TIM_Encoder_Start>
	}
		if (send==100)
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b64      	cmp	r3, #100	; 0x64
 8001a72:	d13a      	bne.n	8001aea <HAL_TIM_PeriodElapsedCallback+0x436>
	{
			HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 8001a74:	213c      	movs	r1, #60	; 0x3c
 8001a76:	4838      	ldr	r0, [pc, #224]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001a78:	f004 f8c3 	bl	8005c02 <HAL_TIM_Encoder_Stop>
			HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 8001a7c:	213c      	movs	r1, #60	; 0x3c
 8001a7e:	4837      	ldr	r0, [pc, #220]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001a80:	f004 f8bf 	bl	8005c02 <HAL_TIM_Encoder_Stop>
			HAL_TIM_Encoder_Stop(&htim2,TIM_CHANNEL_ALL);
 8001a84:	213c      	movs	r1, #60	; 0x3c
 8001a86:	4836      	ldr	r0, [pc, #216]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001a88:	f004 f8bb 	bl	8005c02 <HAL_TIM_Encoder_Stop>
			HAL_TIM_Encoder_Stop(&htim8,TIM_CHANNEL_ALL);
 8001a8c:	213c      	movs	r1, #60	; 0x3c
 8001a8e:	4835      	ldr	r0, [pc, #212]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001a90:	f004 f8b7 	bl	8005c02 <HAL_TIM_Encoder_Stop>
			usartSendData(leftvollinearvelocity_pre,rightvollinearvelocity_pre,0,0);
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9e:	ee17 3a90 	vmov	r3, s15
 8001aa2:	b218      	sxth	r0, r3
 8001aa4:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x4bc>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aae:	ee17 3a90 	vmov	r3, s15
 8001ab2:	b219      	sxth	r1, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f000 f8c0 	bl	8001c3c <usartSendData>
			USART_Send_String(date_t,8);
 8001abc:	2108      	movs	r1, #8
 8001abe:	482d      	ldr	r0, [pc, #180]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8001ac0:	f000 f95c 	bl	8001d7c <USART_Send_String>
			HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001ac4:	213c      	movs	r1, #60	; 0x3c
 8001ac6:	4824      	ldr	r0, [pc, #144]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001ac8:	f004 f864 	bl	8005b94 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8001acc:	213c      	movs	r1, #60	; 0x3c
 8001ace:	4823      	ldr	r0, [pc, #140]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001ad0:	f004 f860 	bl	8005b94 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001ad4:	213c      	movs	r1, #60	; 0x3c
 8001ad6:	4822      	ldr	r0, [pc, #136]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001ad8:	f004 f85c 	bl	8005b94 <HAL_TIM_Encoder_Start>
			HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001adc:	213c      	movs	r1, #60	; 0x3c
 8001ade:	4821      	ldr	r0, [pc, #132]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001ae0:	f004 f858 	bl	8005b94 <HAL_TIM_Encoder_Start>
			send=0;
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x4b4>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
	}

	if (receive==50)
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b32      	cmp	r3, #50	; 0x32
 8001af0:	d127      	bne.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x48e>
			{
					HAL_TIM_Encoder_Stop(&htim3,TIM_CHANNEL_ALL);
 8001af2:	213c      	movs	r1, #60	; 0x3c
 8001af4:	4818      	ldr	r0, [pc, #96]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001af6:	f004 f884 	bl	8005c02 <HAL_TIM_Encoder_Stop>
					HAL_TIM_Encoder_Stop(&htim4,TIM_CHANNEL_ALL);
 8001afa:	213c      	movs	r1, #60	; 0x3c
 8001afc:	4817      	ldr	r0, [pc, #92]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001afe:	f004 f880 	bl	8005c02 <HAL_TIM_Encoder_Stop>
					HAL_TIM_Encoder_Stop(&htim2,TIM_CHANNEL_ALL);
 8001b02:	213c      	movs	r1, #60	; 0x3c
 8001b04:	4816      	ldr	r0, [pc, #88]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001b06:	f004 f87c 	bl	8005c02 <HAL_TIM_Encoder_Stop>
					HAL_TIM_Encoder_Stop(&htim8,TIM_CHANNEL_ALL);
 8001b0a:	213c      	movs	r1, #60	; 0x3c
 8001b0c:	4815      	ldr	r0, [pc, #84]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001b0e:	f004 f878 	bl	8005c02 <HAL_TIM_Encoder_Stop>
					//HAL_UART_DMAResume(&huart2);
					usartReceiveOneData(&leftvollinearvelocity_set,&rightvollinearvelocity_set,&p_crtlFlag);
 8001b12:	4a1a      	ldr	r2, [pc, #104]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 8001b14:	491a      	ldr	r1, [pc, #104]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8001b16:	481b      	ldr	r0, [pc, #108]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8001b18:	f000 f83e 	bl	8001b98 <usartReceiveOneData>
					//HAL_UART_DMAPause(&huart2);
					HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001b1c:	213c      	movs	r1, #60	; 0x3c
 8001b1e:	480e      	ldr	r0, [pc, #56]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 8001b20:	f004 f838 	bl	8005b94 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8001b24:	213c      	movs	r1, #60	; 0x3c
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8001b28:	f004 f834 	bl	8005b94 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001b2c:	213c      	movs	r1, #60	; 0x3c
 8001b2e:	480c      	ldr	r0, [pc, #48]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x4ac>)
 8001b30:	f004 f830 	bl	8005b94 <HAL_TIM_Encoder_Start>
					HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001b34:	213c      	movs	r1, #60	; 0x3c
 8001b36:	480b      	ldr	r0, [pc, #44]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x4b0>)
 8001b38:	f004 f82c 	bl	8005b94 <HAL_TIM_Encoder_Start>
					receive=0;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x4c4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
			}
	}
}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40021800 	.word	0x40021800
 8001b54:	2000023c 	.word	0x2000023c
 8001b58:	20000514 	.word	0x20000514
 8001b5c:	20000454 	.word	0x20000454
 8001b60:	20000654 	.word	0x20000654
 8001b64:	20000414 	.word	0x20000414
 8001b68:	20000240 	.word	0x20000240
 8001b6c:	20000220 	.word	0x20000220
 8001b70:	20000224 	.word	0x20000224
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000244 	.word	0x20000244
 8001b7c:	20000230 	.word	0x20000230
 8001b80:	2000022c 	.word	0x2000022c
 8001b84:	20000228 	.word	0x20000228

08001b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <usartReceiveOneData>:
函数功能：通过串口中断服务函数，获取上位机发送的左右轮控制速度、预留控制标志位，分别存入参数中
入口参数：左轮轮速控制地址、右轮轮速控制地址、预留控制标志位
返回  值：无特殊意义
**************************************************************************/
int usartReceiveOneData(int *p_leftSpeedSet,int *p_rightSpeedSet,unsigned char *p_crtlFlag)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
	int ret=0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive_DMA(&huart6,receiveBuff,11);//DMA接收
 8001ba8:	220b      	movs	r2, #11
 8001baa:	4920      	ldr	r1, [pc, #128]	; (8001c2c <usartReceiveOneData+0x94>)
 8001bac:	4820      	ldr	r0, [pc, #128]	; (8001c30 <usartReceiveOneData+0x98>)
 8001bae:	f004 ff0b 	bl	80069c8 <HAL_UART_Receive_DMA>
	//判断消息头是否正确
		if(receiveBuff[0] == 0x55)                             //buf[1]
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <usartReceiveOneData+0x94>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b55      	cmp	r3, #85	; 0x55
 8001bb8:	d131      	bne.n	8001c1e <usartReceiveOneData+0x86>
		{
			if(receiveBuff[1] ==0xaa)        //数据头两位 //buf[0]
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <usartReceiveOneData+0x94>)
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	2baa      	cmp	r3, #170	; 0xaa
 8001bc0:	d12f      	bne.n	8001c22 <usartReceiveOneData+0x8a>
			{
				//速度赋值操作
				//*p_leftSpeedSet  = receiveBuff[4]*100+receiveBuff[3];
				//*p_rightSpeedSet = receiveBuff[6]*100+receiveBuff[5];
				 for(int k = 0; k < 2; k++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e014      	b.n	8001bf2 <usartReceiveOneData+0x5a>
									{
										leftVelSet.data[k]  = receiveBuff[k + 3]; //buf[3]  buf[4]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	3303      	adds	r3, #3
 8001bcc:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <usartReceiveOneData+0x94>)
 8001bce:	5cd1      	ldrb	r1, [r2, r3]
 8001bd0:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <usartReceiveOneData+0x9c>)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	460a      	mov	r2, r1
 8001bd8:	701a      	strb	r2, [r3, #0]
										rightVelSet.data[k] = receiveBuff[k + 5]; //buf[5]  buf[6]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	3305      	adds	r3, #5
 8001bde:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <usartReceiveOneData+0x94>)
 8001be0:	5cd1      	ldrb	r1, [r2, r3]
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <usartReceiveOneData+0xa0>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4413      	add	r3, r2
 8001be8:	460a      	mov	r2, r1
 8001bea:	701a      	strb	r2, [r3, #0]
				 for(int k = 0; k < 2; k++)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	dde7      	ble.n	8001bc8 <usartReceiveOneData+0x30>
									}

									//速度赋值操作
									*p_leftSpeedSet  = (int)leftVelSet.d;
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <usartReceiveOneData+0x9c>)
 8001bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	601a      	str	r2, [r3, #0]
									*p_rightSpeedSet = (int)rightVelSet.d;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <usartReceiveOneData+0xa0>)
 8001c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	601a      	str	r2, [r3, #0]
				//ctrlFlag
				*p_crtlFlag = receiveBuff[7];                //buf[7]
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <usartReceiveOneData+0x94>)
 8001c12:	79da      	ldrb	r2, [r3, #7]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	701a      	strb	r2, [r3, #0]
				ret= 1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e001      	b.n	8001c22 <usartReceiveOneData+0x8a>
			}
		}
		else ret=0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
		return ret;
 8001c22:	697b      	ldr	r3, [r7, #20]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000248 	.word	0x20000248
 8001c30:	200007d4 	.word	0x200007d4
 8001c34:	20000354 	.word	0x20000354
 8001c38:	20000350 	.word	0x20000350

08001c3c <usartSendData>:
函数功能：将左右轮速和角度数据、控制信号进行打包，通过串口发送给Linux
入口参数：实时左轮轮速、实时右轮轮速、实时角度、控制信号（如果没有角度也可以不发）
返回  值：无
**************************************************************************/
void usartSendData(short leftVel, short rightVel,short angle,unsigned char ctrlFlag)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4604      	mov	r4, r0
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	80fb      	strh	r3, [r7, #6]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80bb      	strh	r3, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	807b      	strh	r3, [r7, #2]
 8001c56:	4613      	mov	r3, r2
 8001c58:	707b      	strb	r3, [r7, #1]
	// 协议数据缓存数组
	unsigned char buf[13] = {0};
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	731a      	strb	r2, [r3, #12]
	int i, length = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]

	// 计算左右轮期望速度
	leftVelNow.d  = leftVel;
 8001c6c:	4a3f      	ldr	r2, [pc, #252]	; (8001d6c <usartSendData+0x130>)
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	8013      	strh	r3, [r2, #0]
	rightVelNow.d = rightVel;
 8001c72:	4a3f      	ldr	r2, [pc, #252]	; (8001d70 <usartSendData+0x134>)
 8001c74:	88bb      	ldrh	r3, [r7, #4]
 8001c76:	8013      	strh	r3, [r2, #0]
	angleNow.d    = angle;
 8001c78:	4a3e      	ldr	r2, [pc, #248]	; (8001d74 <usartSendData+0x138>)
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	8013      	strh	r3, [r2, #0]

	// 设置消息头
	for(i = 0; i < 2; i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e00c      	b.n	8001c9e <usartSendData+0x62>
		buf[i] = header[i];                      // buf[0] buf[1]
 8001c84:	4a3c      	ldr	r2, [pc, #240]	; (8001d78 <usartSendData+0x13c>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	4413      	add	r3, r2
 8001c8a:	7819      	ldrb	r1, [r3, #0]
 8001c8c:	f107 0208 	add.w	r2, r7, #8
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	4413      	add	r3, r2
 8001c94:	460a      	mov	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	ddef      	ble.n	8001c84 <usartSendData+0x48>

	// 设置机器人左右轮速度、角度
	length = 7;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	61bb      	str	r3, [r7, #24]
	buf[2] = length;                             // buf[2]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	72bb      	strb	r3, [r7, #10]
	for(i = 0; i < 2; i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e023      	b.n	8001cfc <usartSendData+0xc0>
	{
		buf[i + 3] = leftVelNow.data[i];         // buf[3] buf[4]
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	492c      	ldr	r1, [pc, #176]	; (8001d6c <usartSendData+0x130>)
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	440a      	add	r2, r1
 8001cbe:	7812      	ldrb	r2, [r2, #0]
 8001cc0:	f107 0120 	add.w	r1, r7, #32
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f803 2c18 	strb.w	r2, [r3, #-24]
		buf[i + 5] = rightVelNow.data[i];        // buf[5] buf[6]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3305      	adds	r3, #5
 8001cce:	4928      	ldr	r1, [pc, #160]	; (8001d70 <usartSendData+0x134>)
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	440a      	add	r2, r1
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	f107 0120 	add.w	r1, r7, #32
 8001cda:	440b      	add	r3, r1
 8001cdc:	f803 2c18 	strb.w	r2, [r3, #-24]
		buf[i + 7] = angleNow.data[i];           // buf[7] buf[8]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	3307      	adds	r3, #7
 8001ce4:	4923      	ldr	r1, [pc, #140]	; (8001d74 <usartSendData+0x138>)
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	440a      	add	r2, r1
 8001cea:	7812      	ldrb	r2, [r2, #0]
 8001cec:	f107 0120 	add.w	r1, r7, #32
 8001cf0:	440b      	add	r3, r1
 8001cf2:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(i = 0; i < 2; i++)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	ddd8      	ble.n	8001cb4 <usartSendData+0x78>
	}
	// 预留控制指令
	buf[3 + length - 1] = ctrlFlag;              // buf[9]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	3302      	adds	r3, #2
 8001d06:	f107 0220 	add.w	r2, r7, #32
 8001d0a:	4413      	add	r3, r2
 8001d0c:	787a      	ldrb	r2, [r7, #1]
 8001d0e:	f803 2c18 	strb.w	r2, [r3, #-24]

	// 设置校验值、消息尾
	buf[3 + length] = getCrc8(buf, 3 + length);  // buf[10]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3303      	adds	r3, #3
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	1cdc      	adds	r4, r3, #3
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 f855 	bl	8001dd4 <getCrc8>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f107 0320 	add.w	r3, r7, #32
 8001d32:	4423      	add	r3, r4
 8001d34:	f803 2c18 	strb.w	r2, [r3, #-24]
	buf[3 + length + 1] = ender[0];              // buf[11]
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	220d      	movs	r2, #13
 8001d3e:	f107 0120 	add.w	r1, r7, #32
 8001d42:	440b      	add	r3, r1
 8001d44:	f803 2c18 	strb.w	r2, [r3, #-24]
	buf[3 + length + 2] = ender[1];              // buf[12]
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	3305      	adds	r3, #5
 8001d4c:	220a      	movs	r2, #10
 8001d4e:	f107 0120 	add.w	r1, r7, #32
 8001d52:	440b      	add	r3, r1
 8001d54:	f803 2c18 	strb.w	r2, [r3, #-24]

	//发送字符串数据
	USART_Send_String(buf,sizeof(buf));
 8001d58:	f107 0308 	add.w	r3, r7, #8
 8001d5c:	210d      	movs	r1, #13
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f80c 	bl	8001d7c <USART_Send_String>
}
 8001d64:	bf00      	nop
 8001d66:	3724      	adds	r7, #36	; 0x24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd90      	pop	{r4, r7, pc}
 8001d6c:	20000358 	.word	0x20000358
 8001d70:	2000034c 	.word	0x2000034c
 8001d74:	20000348 	.word	0x20000348
 8001d78:	08009260 	.word	0x08009260

08001d7c <USART_Send_String>:
函数功能：发送指定大小的字符数组，被usartSendData函数调用
入口参数：数组地址、数组大小
返回  值：无
**************************************************************************/
void USART_Send_String(u8 *p,u16 sendSize)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
	static int length =0;
	while(length<sendSize)
 8001d88:	e012      	b.n	8001db0 <USART_Send_String+0x34>
	{
		//@@@@@#####如果你使用不是USART1更改成相应的，比如USART3，这里有两处修改
		while( !(USART6->SR&(0x01<<7)) );//发送缓冲区为空
 8001d8a:	bf00      	nop
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <USART_Send_String+0x50>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f9      	beq.n	8001d8c <USART_Send_String+0x10>
		USART6->DR=*p;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <USART_Send_String+0x50>)
 8001d9e:	605a      	str	r2, [r3, #4]
		p++;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3301      	adds	r3, #1
 8001da4:	607b      	str	r3, [r7, #4]
		length++;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <USART_Send_String+0x54>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	3301      	adds	r3, #1
 8001dac:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <USART_Send_String+0x54>)
 8001dae:	6013      	str	r3, [r2, #0]
	while(length<sendSize)
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <USART_Send_String+0x54>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	dce7      	bgt.n	8001d8a <USART_Send_String+0xe>
	}
	length =0;
 8001dba:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <USART_Send_String+0x54>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	20000254 	.word	0x20000254

08001dd4 <getCrc8>:
函数功能：计算八位循环冗余校验，被usartSendData和usartReceiveOneData函数调用
入口参数：数组地址、数组大小
返回  值：无
**************************************************************************/
unsigned char getCrc8(unsigned char *ptr, unsigned short len)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
	unsigned char crc;
	unsigned char i;
	crc = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	73fb      	strb	r3, [r7, #15]
	while(len--)
 8001de4:	e01f      	b.n	8001e26 <getCrc8+0x52>
	{
		crc ^= *ptr++;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	4053      	eors	r3, r2
 8001df2:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < 8; i++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	73bb      	strb	r3, [r7, #14]
 8001df8:	e012      	b.n	8001e20 <getCrc8+0x4c>
		{
			if(crc&0x01)
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d007      	beq.n	8001e14 <getCrc8+0x40>
                crc=(crc>>1)^0x8C;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	085b      	lsrs	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	73fb      	strb	r3, [r7, #15]
 8001e12:	e002      	b.n	8001e1a <getCrc8+0x46>
			else
                crc >>= 1;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	73fb      	strb	r3, [r7, #15]
		for(i = 0; i < 8; i++)
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	73bb      	strb	r3, [r7, #14]
 8001e20:	7bbb      	ldrb	r3, [r7, #14]
 8001e22:	2b07      	cmp	r3, #7
 8001e24:	d9e9      	bls.n	8001dfa <getCrc8+0x26>
	while(len--)
 8001e26:	887b      	ldrh	r3, [r7, #2]
 8001e28:	1e5a      	subs	r2, r3, #1
 8001e2a:	807a      	strh	r2, [r7, #2]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1da      	bne.n	8001de6 <getCrc8+0x12>
		}
	}
	return crc;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <go_or_back_L_1>:
float I_acc_L_1=0; //之前误差累加和（利用积分分离）
int stotage_L_1 =0;//计算角度时储存编码器的值

//判断电机转动方向
void go_or_back_L_1(float  setpoint_L_1)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	ed87 0a01 	vstr	s0, [r7, #4]
	if(setpoint_L_1>0)
 8001e48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	dd02      	ble.n	8001e5c <go_or_back_L_1+0x1e>
			{
				Motor_L_1(GO);//左2电机正转
 8001e56:	2000      	movs	r0, #0
 8001e58:	f000 f818 	bl	8001e8c <Motor_L_1>
			}
		if(setpoint_L_1<0)
 8001e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	d502      	bpl.n	8001e70 <go_or_back_L_1+0x32>
			{
				Motor_L_1(BACK);//左2电机反转
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f000 f80e 	bl	8001e8c <Motor_L_1>
			}
	  	if(setpoint_L_1==0)
 8001e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7c:	d102      	bne.n	8001e84 <go_or_back_L_1+0x46>
	  		{
	  				Motor_L_1(STOP);//左2电机停止
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f000 f804 	bl	8001e8c <Motor_L_1>
	  		}
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <Motor_L_1>:

//电机转动方向控制
void Motor_L_1(char state)
	  {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
	  	if(state == GO)//左1电机前进
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10b      	bne.n	8001eb4 <Motor_L_1+0x28>
	  	{
	  		HAL_GPIO_WritePin(motor1_GPIO_Port,  motor1_Pin, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea2:	4815      	ldr	r0, [pc, #84]	; (8001ef8 <Motor_L_1+0x6c>)
 8001ea4:	f003 f868 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor2_GPIO_Port,  motor2_Pin, 1);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eae:	4812      	ldr	r0, [pc, #72]	; (8001ef8 <Motor_L_1+0x6c>)
 8001eb0:	f003 f862 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  	if(state == BACK)//左1电机后退
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d10b      	bne.n	8001ed2 <Motor_L_1+0x46>
	  	{
	  		HAL_GPIO_WritePin(motor1_GPIO_Port,  motor1_Pin, 1);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ec0:	480d      	ldr	r0, [pc, #52]	; (8001ef8 <Motor_L_1+0x6c>)
 8001ec2:	f003 f859 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor2_GPIO_Port,  motor2_Pin, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ecc:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <Motor_L_1+0x6c>)
 8001ece:	f003 f853 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  	if(state == STOP)//左1电机停转
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d10b      	bne.n	8001ef0 <Motor_L_1+0x64>
	  	{
	  		HAL_GPIO_WritePin(motor1_GPIO_Port,  motor1_Pin, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <Motor_L_1+0x6c>)
 8001ee0:	f003 f84a 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor2_GPIO_Port,  motor2_Pin, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eea:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <Motor_L_1+0x6c>)
 8001eec:	f003 f844 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  }
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	00000000 	.word	0x00000000

08001f00 <contol_L_1>:

//编码器采集脉冲数，具体调节电机转速
float contol_L_1(float setpoint_L_1,float setpoint_R_2,float *angular)
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	ed2d 8b02 	vpush	{d8}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f0e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f12:	6078      	str	r0, [r7, #4]
		GetData_L_1 = __HAL_TIM_GET_COUNTER(&htim2);   //编码器读脉冲数
 8001f14:	4b8a      	ldr	r3, [pc, #552]	; (8002140 <contol_L_1+0x240>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f22:	4b88      	ldr	r3, [pc, #544]	; (8002144 <contol_L_1+0x244>)
 8001f24:	edc3 7a00 	vstr	s15, [r3]
		Direction_L_1 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);		// 判断正反转，前进时左为0，右为1；后退时左为1，右为0
 8001f28:	4b85      	ldr	r3, [pc, #532]	; (8002140 <contol_L_1+0x240>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b10      	cmp	r3, #16
 8001f34:	bf0c      	ite	eq
 8001f36:	2301      	moveq	r3, #1
 8001f38:	2300      	movne	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b82      	ldr	r3, [pc, #520]	; (8002148 <contol_L_1+0x248>)
 8001f40:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);//编码器读数后清零
 8001f42:	4b7f      	ldr	r3, [pc, #508]	; (8002140 <contol_L_1+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24

		// 判断正反转，前进时左为0，右为1；后退时左为1，右为0
		if (Direction_L_1==1)
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	; (8002148 <contol_L_1+0x248>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d116      	bne.n	8001f80 <contol_L_1+0x80>
		{
			if(GetData_L_1==0)
 8001f52:	4b7c      	ldr	r3, [pc, #496]	; (8002144 <contol_L_1+0x244>)
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f60:	d104      	bne.n	8001f6c <contol_L_1+0x6c>
			{
				GetData_L_1=0;
 8001f62:	4b78      	ldr	r3, [pc, #480]	; (8002144 <contol_L_1+0x244>)
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e009      	b.n	8001f80 <contol_L_1+0x80>
			}
			else
			{
				GetData_L_1=65535-GetData_L_1;
 8001f6c:	4b75      	ldr	r3, [pc, #468]	; (8002144 <contol_L_1+0x244>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800214c <contol_L_1+0x24c>
 8001f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7a:	4b72      	ldr	r3, [pc, #456]	; (8002144 <contol_L_1+0x244>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		//计算转角
		if (setpoint_L_1*setpoint_R_2<0)
 8001f80:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f94:	d52c      	bpl.n	8001ff0 <contol_L_1+0xf0>
		{
			stotage_L_1+=GetData_L_1;
 8001f96:	4b6e      	ldr	r3, [pc, #440]	; (8002150 <contol_L_1+0x250>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa2:	4b68      	ldr	r3, [pc, #416]	; (8002144 <contol_L_1+0x244>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb0:	ee17 2a90 	vmov	r2, s15
 8001fb4:	4b66      	ldr	r3, [pc, #408]	; (8002150 <contol_L_1+0x250>)
 8001fb6:	601a      	str	r2, [r3, #0]
			angular[0]=stotage_L_1/4680*2*3.14;
 8001fb8:	4b65      	ldr	r3, [pc, #404]	; (8002150 <contol_L_1+0x250>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a65      	ldr	r2, [pc, #404]	; (8002154 <contol_L_1+0x254>)
 8001fbe:	fb82 1203 	smull	r1, r2, r2, r3
 8001fc2:	441a      	add	r2, r3
 8001fc4:	1312      	asrs	r2, r2, #12
 8001fc6:	17db      	asrs	r3, r3, #31
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa55 	bl	800047c <__aeabi_i2d>
 8001fd2:	a357      	add	r3, pc, #348	; (adr r3, 8002130 <contol_L_1+0x230>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe faba 	bl	8000550 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f7fe fd8c 	bl	8000b00 <__aeabi_d2f>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e00d      	b.n	800200c <contol_L_1+0x10c>
		}
		else if(setpoint_L_1*setpoint_R_2>=0)
 8001ff0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ff4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002004:	db02      	blt.n	800200c <contol_L_1+0x10c>
		{
			stotage_L_1=0;
 8002006:	4b52      	ldr	r3, [pc, #328]	; (8002150 <contol_L_1+0x250>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
		}

		//计算转速和线速度
		n_L_1=GetData_L_1/4680*5;
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <contol_L_1+0x244>)
 800200e:	ed93 7a00 	vldr	s14, [r3]
 8002012:	eddf 6a51 	vldr	s13, [pc, #324]	; 8002158 <contol_L_1+0x258>
 8002016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800201e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002022:	4b4e      	ldr	r3, [pc, #312]	; (800215c <contol_L_1+0x25c>)
 8002024:	edc3 7a00 	vstr	s15, [r3]
		v_L_1=GetData_L_1/4680*0.2041*5;    			//v=n*2*Π*r*0.01=n*0.2041m/s  r=3.25
 8002028:	4b46      	ldr	r3, [pc, #280]	; (8002144 <contol_L_1+0x244>)
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002158 <contol_L_1+0x258>
 8002032:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002036:	ee16 0a90 	vmov	r0, s13
 800203a:	f7fe fa31 	bl	80004a0 <__aeabi_f2d>
 800203e:	a33e      	add	r3, pc, #248	; (adr r3, 8002138 <contol_L_1+0x238>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe fa84 	bl	8000550 <__aeabi_dmul>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b42      	ldr	r3, [pc, #264]	; (8002160 <contol_L_1+0x260>)
 8002056:	f7fe fa7b 	bl	8000550 <__aeabi_dmul>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7fe fd4d 	bl	8000b00 <__aeabi_d2f>
 8002066:	4602      	mov	r2, r0
 8002068:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <contol_L_1+0x264>)
 800206a:	601a      	str	r2, [r3, #0]

		//pid的系统为转速
		outpwm_L_1=PID_Calc_L_1(n_L_1,fabs(setpoint_L_1/1000.0)/0.2041);   //设定值从线速度变为转速
 800206c:	4b3b      	ldr	r3, [pc, #236]	; (800215c <contol_L_1+0x25c>)
 800206e:	ed93 8a00 	vldr	s16, [r3]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f7fe fa14 	bl	80004a0 <__aeabi_f2d>
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <contol_L_1+0x268>)
 800207e:	f7fe fb91 	bl	80007a4 <__aeabi_ddiv>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4614      	mov	r4, r2
 8002088:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800208c:	a32a      	add	r3, pc, #168	; (adr r3, 8002138 <contol_L_1+0x238>)
 800208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002092:	4620      	mov	r0, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f7fe fb85 	bl	80007a4 <__aeabi_ddiv>
 800209a:	4603      	mov	r3, r0
 800209c:	460c      	mov	r4, r1
 800209e:	4618      	mov	r0, r3
 80020a0:	4621      	mov	r1, r4
 80020a2:	f7fe fd2d 	bl	8000b00 <__aeabi_d2f>
 80020a6:	4603      	mov	r3, r0
 80020a8:	ee00 3a90 	vmov	s1, r3
 80020ac:	eeb0 0a48 	vmov.f32	s0, s16
 80020b0:	f000 f866 	bl	8002180 <PID_Calc_L_1>
 80020b4:	eef0 7a40 	vmov.f32	s15, s0
 80020b8:	4b2c      	ldr	r3, [pc, #176]	; (800216c <contol_L_1+0x26c>)
 80020ba:	edc3 7a00 	vstr	s15, [r3]
		prespwm_L_1+= outpwm_L_1;
 80020be:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <contol_L_1+0x270>)
 80020c0:	ed93 7a00 	vldr	s14, [r3]
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <contol_L_1+0x26c>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ce:	4b28      	ldr	r3, [pc, #160]	; (8002170 <contol_L_1+0x270>)
 80020d0:	edc3 7a00 	vstr	s15, [r3]

		if(prespwm_L_1>=80){prespwm_L_1=80;} if(prespwm_L_1<=0){prespwm_L_1=0;}   //限幅pwm
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <contol_L_1+0x270>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002174 <contol_L_1+0x274>
 80020de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	db02      	blt.n	80020ee <contol_L_1+0x1ee>
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <contol_L_1+0x270>)
 80020ea:	4a23      	ldr	r2, [pc, #140]	; (8002178 <contol_L_1+0x278>)
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <contol_L_1+0x270>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	d803      	bhi.n	8002106 <contol_L_1+0x206>
 80020fe:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <contol_L_1+0x270>)
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,prespwm_L_1);//通过pwm控制电机速度
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <contol_L_1+0x270>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <contol_L_1+0x27c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002114:	ee17 2a90 	vmov	r2, s15
 8002118:	63da      	str	r2, [r3, #60]	; 0x3c


		return v_L_1;//返回线速度
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <contol_L_1+0x264>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	ee07 3a90 	vmov	s15, r3
}
 8002122:	eeb0 0a67 	vmov.f32	s0, s15
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	ecbd 8b02 	vpop	{d8}
 800212e:	bdb0      	pop	{r4, r5, r7, pc}
 8002130:	51eb851f 	.word	0x51eb851f
 8002134:	40091eb8 	.word	0x40091eb8
 8002138:	e48e8a72 	.word	0xe48e8a72
 800213c:	3fca1ff2 	.word	0x3fca1ff2
 8002140:	20000654 	.word	0x20000654
 8002144:	2000025c 	.word	0x2000025c
 8002148:	20000260 	.word	0x20000260
 800214c:	477fff00 	.word	0x477fff00
 8002150:	20000284 	.word	0x20000284
 8002154:	e00e00e1 	.word	0xe00e00e1
 8002158:	45924000 	.word	0x45924000
 800215c:	20000264 	.word	0x20000264
 8002160:	40140000 	.word	0x40140000
 8002164:	20000268 	.word	0x20000268
 8002168:	408f4000 	.word	0x408f4000
 800216c:	20000270 	.word	0x20000270
 8002170:	2000026c 	.word	0x2000026c
 8002174:	42a00000 	.word	0x42a00000
 8002178:	42a00000 	.word	0x42a00000
 800217c:	200004d4 	.word	0x200004d4

08002180 <PID_Calc_L_1>:
	//位置式pid
	//PID计算公式Δu(k)=kp*e(k)+ki*[e(k)+...+e(0)]+kd[e(k)-e(k−1)]
	float PID_Calc_L_1(float PresPoint_L_1,float SetPoint_L_1)
	{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	ed87 0a01 	vstr	s0, [r7, #4]
 800218a:	edc7 0a00 	vstr	s1, [r7]
		PresError_L_1=SetPoint_L_1-PresPoint_L_1;                //误差计算
 800218e:	ed97 7a00 	vldr	s14, [r7]
 8002192:	edd7 7a01 	vldr	s15, [r7, #4]
 8002196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <PID_Calc_L_1+0xc8>)
 800219c:	edc3 7a00 	vstr	s15, [r3]
		if(PresError_L_1<0.3){I_acc_L_1+=PresError_L_1;}//误差小于0.3不进行积分控制（积分分离）
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <PID_Calc_L_1+0xc8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f97b 	bl	80004a0 <__aeabi_f2d>
 80021aa:	a325      	add	r3, pc, #148	; (adr r3, 8002240 <PID_Calc_L_1+0xc0>)
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	f7fe fc40 	bl	8000a34 <__aeabi_dcmplt>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <PID_Calc_L_1+0x52>
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <PID_Calc_L_1+0xcc>)
 80021bc:	ed93 7a00 	vldr	s14, [r3]
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <PID_Calc_L_1+0xc8>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <PID_Calc_L_1+0xcc>)
 80021cc:	edc3 7a00 	vstr	s15, [r3]
 80021d0:	e003      	b.n	80021da <PID_Calc_L_1+0x5a>
		else{I_acc_L_1=0;}
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <PID_Calc_L_1+0xcc>)
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]

		Outpid_L_1=Proportion_L_1 *PresError_L_1                //p项
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <PID_Calc_L_1+0xd0>)
 80021dc:	ed93 7a00 	vldr	s14, [r3]
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <PID_Calc_L_1+0xc8>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee27 7a27 	vmul.f32	s14, s14, s15
					+Integral_L_1 * I_acc_L_1     //i项
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <PID_Calc_L_1+0xd4>)
 80021ec:	edd3 6a00 	vldr	s13, [r3]
 80021f0:	4b16      	ldr	r3, [pc, #88]	; (800224c <PID_Calc_L_1+0xcc>)
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021fa:	ee37 7a27 	vadd.f32	s14, s14, s15
					+Derivative_L_1 *( PresError_L_1-LastError_L_1);   //d项
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <PID_Calc_L_1+0xc8>)
 8002200:	edd3 6a00 	vldr	s13, [r3]
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <PID_Calc_L_1+0xd8>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <PID_Calc_L_1+0xdc>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002218:	ee77 7a27 	vadd.f32	s15, s14, s15
		Outpid_L_1=Proportion_L_1 *PresError_L_1                //p项
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <PID_Calc_L_1+0xe0>)
 800221e:	edc3 7a00 	vstr	s15, [r3]

		LastError_L_1=PresError_L_1;                    //存储误差，用于下次计算
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <PID_Calc_L_1+0xc8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <PID_Calc_L_1+0xd8>)
 8002228:	6013      	str	r3, [r2, #0]
		return(Outpid_L_1);                                       //返回输出值（pwm）
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <PID_Calc_L_1+0xe0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	ee07 3a90 	vmov	s15, r3
}
 8002232:	eeb0 0a67 	vmov.f32	s0, s15
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	f3af 8000 	nop.w
 8002240:	33333333 	.word	0x33333333
 8002244:	3fd33333 	.word	0x3fd33333
 8002248:	20000278 	.word	0x20000278
 800224c:	20000280 	.word	0x20000280
 8002250:	20000008 	.word	0x20000008
 8002254:	2000000c 	.word	0x2000000c
 8002258:	20000274 	.word	0x20000274
 800225c:	20000258 	.word	0x20000258
 8002260:	2000027c 	.word	0x2000027c

08002264 <go_or_back_L_2>:
float I_acc_L_2=0; //之前误差累加和（利用积分分离）
int stotage_L_2 =0;//计算角度时储存编码器的值

//判断电机转动方向
void go_or_back_L_2(float  setpoint_L_2)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	ed87 0a01 	vstr	s0, [r7, #4]
	if(setpoint_L_2>0)
 800226e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	dd02      	ble.n	8002282 <go_or_back_L_2+0x1e>
			{
				Motor_L_2(GO);//左2电机正转
 800227c:	2000      	movs	r0, #0
 800227e:	f000 f819 	bl	80022b4 <Motor_L_2>
			}
		if(setpoint_L_2<0)
 8002282:	edd7 7a01 	vldr	s15, [r7, #4]
 8002286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	d502      	bpl.n	8002296 <go_or_back_L_2+0x32>
			{
				Motor_L_2(BACK);//左2电机反转
 8002290:	2001      	movs	r0, #1
 8002292:	f000 f80f 	bl	80022b4 <Motor_L_2>
			}
	  	if(setpoint_L_2==0)
 8002296:	edd7 7a01 	vldr	s15, [r7, #4]
 800229a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d102      	bne.n	80022aa <go_or_back_L_2+0x46>
	  		{
	  				Motor_L_2(STOP);//左2电机停止
 80022a4:	2002      	movs	r0, #2
 80022a6:	f000 f805 	bl	80022b4 <Motor_L_2>
	  		}
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <Motor_L_2>:

//电机转动方向控制
void Motor_L_2(char state)
	  {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
	  	if(state == GO)//左2电机前进
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <Motor_L_2+0x26>
	  	{
	  		HAL_GPIO_WritePin(motor3_GPIO_Port,  motor3_Pin, 0);
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	4814      	ldr	r0, [pc, #80]	; (800231c <Motor_L_2+0x68>)
 80022ca:	f002 fe55 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor4_GPIO_Port,  motor4_Pin, 1);
 80022ce:	2201      	movs	r2, #1
 80022d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d4:	4811      	ldr	r0, [pc, #68]	; (800231c <Motor_L_2+0x68>)
 80022d6:	f002 fe4f 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  	if(state == BACK)//左2电机后退
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10a      	bne.n	80022f6 <Motor_L_2+0x42>
	  	{
	  		HAL_GPIO_WritePin(motor3_GPIO_Port,  motor3_Pin, 1);
 80022e0:	2201      	movs	r2, #1
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	480d      	ldr	r0, [pc, #52]	; (800231c <Motor_L_2+0x68>)
 80022e6:	f002 fe47 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor4_GPIO_Port,  motor4_Pin, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f0:	480a      	ldr	r0, [pc, #40]	; (800231c <Motor_L_2+0x68>)
 80022f2:	f002 fe41 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  	if(state == STOP)//左2电机停转
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d10a      	bne.n	8002312 <Motor_L_2+0x5e>
	  	{
	  		HAL_GPIO_WritePin(motor3_GPIO_Port,  motor3_Pin, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	4806      	ldr	r0, [pc, #24]	; (800231c <Motor_L_2+0x68>)
 8002302:	f002 fe39 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor4_GPIO_Port,  motor4_Pin, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230c:	4803      	ldr	r0, [pc, #12]	; (800231c <Motor_L_2+0x68>)
 800230e:	f002 fe33 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  }
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40021800 	.word	0x40021800

08002320 <contol_L_2>:

//编码器采集脉冲数，具体调节电机转速
float contol_L_2(float setpoint_L_2,float setpoint_R_1,float *angular)
{
 8002320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002322:	ed2d 8b02 	vpush	{d8}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	ed87 0a03 	vstr	s0, [r7, #12]
 800232e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002332:	6078      	str	r0, [r7, #4]
		GetData_L_2 = __HAL_TIM_GET_COUNTER(&htim3);   //编码器读脉冲数
 8002334:	4b8c      	ldr	r3, [pc, #560]	; (8002568 <contol_L_2+0x248>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002342:	4b8a      	ldr	r3, [pc, #552]	; (800256c <contol_L_2+0x24c>)
 8002344:	edc3 7a00 	vstr	s15, [r3]
		Direction_L_2 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);		// 判断正反转，前进时左为0，右为1；后退时左为1，右为0
 8002348:	4b87      	ldr	r3, [pc, #540]	; (8002568 <contol_L_2+0x248>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b10      	cmp	r3, #16
 8002354:	bf0c      	ite	eq
 8002356:	2301      	moveq	r3, #1
 8002358:	2300      	movne	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	461a      	mov	r2, r3
 800235e:	4b84      	ldr	r3, [pc, #528]	; (8002570 <contol_L_2+0x250>)
 8002360:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim3,0);//编码器读数后清零
 8002362:	4b81      	ldr	r3, [pc, #516]	; (8002568 <contol_L_2+0x248>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2200      	movs	r2, #0
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

		// 判断正反转，前进时左为0，右为1；后退时左为1，右为0
		if (Direction_L_2==1)
 800236a:	4b81      	ldr	r3, [pc, #516]	; (8002570 <contol_L_2+0x250>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d116      	bne.n	80023a0 <contol_L_2+0x80>
		{
			if(GetData_L_2==0)
 8002372:	4b7e      	ldr	r3, [pc, #504]	; (800256c <contol_L_2+0x24c>)
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	eef5 7a40 	vcmp.f32	s15, #0.0
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	d104      	bne.n	800238c <contol_L_2+0x6c>
			{
				GetData_L_2=0;
 8002382:	4b7a      	ldr	r3, [pc, #488]	; (800256c <contol_L_2+0x24c>)
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e009      	b.n	80023a0 <contol_L_2+0x80>
			}
			else
			{
				GetData_L_2=65535-GetData_L_2;
 800238c:	4b77      	ldr	r3, [pc, #476]	; (800256c <contol_L_2+0x24c>)
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002574 <contol_L_2+0x254>
 8002396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239a:	4b74      	ldr	r3, [pc, #464]	; (800256c <contol_L_2+0x24c>)
 800239c:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		//计算转角
				if (setpoint_L_2*setpoint_R_1<0)
 80023a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80023a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	d52f      	bpl.n	8002416 <contol_L_2+0xf6>
				{
					stotage_L_2+=GetData_L_2;
 80023b6:	4b70      	ldr	r3, [pc, #448]	; (8002578 <contol_L_2+0x258>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	ee07 3a90 	vmov	s15, r3
 80023be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023c2:	4b6a      	ldr	r3, [pc, #424]	; (800256c <contol_L_2+0x24c>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d0:	ee17 2a90 	vmov	r2, s15
 80023d4:	4b68      	ldr	r3, [pc, #416]	; (8002578 <contol_L_2+0x258>)
 80023d6:	601a      	str	r2, [r3, #0]
					angular[1]=stotage_L_2/4680*2*3.14;
 80023d8:	4b67      	ldr	r3, [pc, #412]	; (8002578 <contol_L_2+0x258>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a67      	ldr	r2, [pc, #412]	; (800257c <contol_L_2+0x25c>)
 80023de:	fb82 1203 	smull	r1, r2, r2, r3
 80023e2:	441a      	add	r2, r3
 80023e4:	1312      	asrs	r2, r2, #12
 80023e6:	17db      	asrs	r3, r3, #31
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe f845 	bl	800047c <__aeabi_i2d>
 80023f2:	a359      	add	r3, pc, #356	; (adr r3, 8002558 <contol_L_2+0x238>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fe f8aa 	bl	8000550 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4611      	mov	r1, r2
 8002402:	461a      	mov	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1d1e      	adds	r6, r3, #4
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	f7fe fb78 	bl	8000b00 <__aeabi_d2f>
 8002410:	4603      	mov	r3, r0
 8002412:	6033      	str	r3, [r6, #0]
 8002414:	e00d      	b.n	8002432 <contol_L_2+0x112>
				}
				else if(setpoint_L_2*setpoint_R_1>=0)
 8002416:	ed97 7a03 	vldr	s14, [r7, #12]
 800241a:	edd7 7a02 	vldr	s15, [r7, #8]
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242a:	db02      	blt.n	8002432 <contol_L_2+0x112>
				{
					stotage_L_2=0;
 800242c:	4b52      	ldr	r3, [pc, #328]	; (8002578 <contol_L_2+0x258>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
				}

		//计算转速和线速度
		n_L_2=GetData_L_2/4680*5;
 8002432:	4b4e      	ldr	r3, [pc, #312]	; (800256c <contol_L_2+0x24c>)
 8002434:	ed93 7a00 	vldr	s14, [r3]
 8002438:	eddf 6a51 	vldr	s13, [pc, #324]	; 8002580 <contol_L_2+0x260>
 800243c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002440:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002448:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <contol_L_2+0x264>)
 800244a:	edc3 7a00 	vstr	s15, [r3]
		v_L_2=GetData_L_2/4680*0.2041*5;    			//v=n*2*Π*r*0.01=n*0.2041m/s  r=3.25
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <contol_L_2+0x24c>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002580 <contol_L_2+0x260>
 8002458:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800245c:	ee16 0a90 	vmov	r0, s13
 8002460:	f7fe f81e 	bl	80004a0 <__aeabi_f2d>
 8002464:	a33e      	add	r3, pc, #248	; (adr r3, 8002560 <contol_L_2+0x240>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe f871 	bl	8000550 <__aeabi_dmul>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b43      	ldr	r3, [pc, #268]	; (8002588 <contol_L_2+0x268>)
 800247c:	f7fe f868 	bl	8000550 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fb3a 	bl	8000b00 <__aeabi_d2f>
 800248c:	4602      	mov	r2, r0
 800248e:	4b3f      	ldr	r3, [pc, #252]	; (800258c <contol_L_2+0x26c>)
 8002490:	601a      	str	r2, [r3, #0]

		//pid的系统为转速
		outpwm_L_2=PID_Calc_L_2(n_L_2,fabs(setpoint_L_2/1000.0)/0.2041);   //设定值从线速度变为转速
 8002492:	4b3c      	ldr	r3, [pc, #240]	; (8002584 <contol_L_2+0x264>)
 8002494:	ed93 8a00 	vldr	s16, [r3]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f7fe f801 	bl	80004a0 <__aeabi_f2d>
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <contol_L_2+0x270>)
 80024a4:	f7fe f97e 	bl	80007a4 <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4614      	mov	r4, r2
 80024ae:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80024b2:	a32b      	add	r3, pc, #172	; (adr r3, 8002560 <contol_L_2+0x240>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	4620      	mov	r0, r4
 80024ba:	4629      	mov	r1, r5
 80024bc:	f7fe f972 	bl	80007a4 <__aeabi_ddiv>
 80024c0:	4603      	mov	r3, r0
 80024c2:	460c      	mov	r4, r1
 80024c4:	4618      	mov	r0, r3
 80024c6:	4621      	mov	r1, r4
 80024c8:	f7fe fb1a 	bl	8000b00 <__aeabi_d2f>
 80024cc:	4603      	mov	r3, r0
 80024ce:	ee00 3a90 	vmov	s1, r3
 80024d2:	eeb0 0a48 	vmov.f32	s0, s16
 80024d6:	f000 f867 	bl	80025a8 <PID_Calc_L_2>
 80024da:	eef0 7a40 	vmov.f32	s15, s0
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <contol_L_2+0x274>)
 80024e0:	edc3 7a00 	vstr	s15, [r3]
		prespwm_L_2+= outpwm_L_2;
 80024e4:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <contol_L_2+0x278>)
 80024e6:	ed93 7a00 	vldr	s14, [r3]
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <contol_L_2+0x274>)
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <contol_L_2+0x278>)
 80024f6:	edc3 7a00 	vstr	s15, [r3]

		if(prespwm_L_2>=80){prespwm_L_2=80;} if(prespwm_L_2<=0){prespwm_L_2=0;}   //限幅pwm
 80024fa:	4b27      	ldr	r3, [pc, #156]	; (8002598 <contol_L_2+0x278>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800259c <contol_L_2+0x27c>
 8002504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	db02      	blt.n	8002514 <contol_L_2+0x1f4>
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <contol_L_2+0x278>)
 8002510:	4a23      	ldr	r2, [pc, #140]	; (80025a0 <contol_L_2+0x280>)
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	4b20      	ldr	r3, [pc, #128]	; (8002598 <contol_L_2+0x278>)
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d803      	bhi.n	800252c <contol_L_2+0x20c>
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <contol_L_2+0x278>)
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,prespwm_L_2);//通过pwm控制电机速度
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <contol_L_2+0x278>)
 800252e:	edd3 7a00 	vldr	s15, [r3]
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <contol_L_2+0x284>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800253a:	ee17 2a90 	vmov	r2, s15
 800253e:	641a      	str	r2, [r3, #64]	; 0x40

		return v_L_2;//返回线速度
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <contol_L_2+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	ee07 3a90 	vmov	s15, r3
}
 8002548:	eeb0 0a67 	vmov.f32	s0, s15
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	ecbd 8b02 	vpop	{d8}
 8002554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002556:	bf00      	nop
 8002558:	51eb851f 	.word	0x51eb851f
 800255c:	40091eb8 	.word	0x40091eb8
 8002560:	e48e8a72 	.word	0xe48e8a72
 8002564:	3fca1ff2 	.word	0x3fca1ff2
 8002568:	20000514 	.word	0x20000514
 800256c:	2000028c 	.word	0x2000028c
 8002570:	20000290 	.word	0x20000290
 8002574:	477fff00 	.word	0x477fff00
 8002578:	200002b4 	.word	0x200002b4
 800257c:	e00e00e1 	.word	0xe00e00e1
 8002580:	45924000 	.word	0x45924000
 8002584:	20000294 	.word	0x20000294
 8002588:	40140000 	.word	0x40140000
 800258c:	20000298 	.word	0x20000298
 8002590:	408f4000 	.word	0x408f4000
 8002594:	200002a0 	.word	0x200002a0
 8002598:	2000029c 	.word	0x2000029c
 800259c:	42a00000 	.word	0x42a00000
 80025a0:	42a00000 	.word	0x42a00000
 80025a4:	200004d4 	.word	0x200004d4

080025a8 <PID_Calc_L_2>:
	//位置式pid
	//PID计算公式Δu(k)=kp*e(k)+ki*[e(k)+...+e(0)]+kd[e(k)-e(k−1)]
	float PID_Calc_L_2(float PresPoint_L_2,float SetPoint_L_2)
	{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80025b2:	edc7 0a00 	vstr	s1, [r7]
		PresError_L_2=SetPoint_L_2-PresPoint_L_2;                //误差计算
 80025b6:	ed97 7a00 	vldr	s14, [r7]
 80025ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80025be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c2:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <PID_Calc_L_2+0xc8>)
 80025c4:	edc3 7a00 	vstr	s15, [r3]
		if(PresError_L_2<0.3){I_acc_L_2+=PresError_L_2;}//误差小于0.3不进行积分控制（积分分离）
 80025c8:	4b29      	ldr	r3, [pc, #164]	; (8002670 <PID_Calc_L_2+0xc8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ff67 	bl	80004a0 <__aeabi_f2d>
 80025d2:	a325      	add	r3, pc, #148	; (adr r3, 8002668 <PID_Calc_L_2+0xc0>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	f7fe fa2c 	bl	8000a34 <__aeabi_dcmplt>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00b      	beq.n	80025fa <PID_Calc_L_2+0x52>
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <PID_Calc_L_2+0xcc>)
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <PID_Calc_L_2+0xc8>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <PID_Calc_L_2+0xcc>)
 80025f4:	edc3 7a00 	vstr	s15, [r3]
 80025f8:	e003      	b.n	8002602 <PID_Calc_L_2+0x5a>
		else{I_acc_L_2=0;}
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <PID_Calc_L_2+0xcc>)
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

		Outpid_L_2=Proportion_L_2 *PresError_L_2                //p项
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <PID_Calc_L_2+0xd0>)
 8002604:	ed93 7a00 	vldr	s14, [r3]
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <PID_Calc_L_2+0xc8>)
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee27 7a27 	vmul.f32	s14, s14, s15
					+Integral_L_2 * I_acc_L_2     //i项
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <PID_Calc_L_2+0xd4>)
 8002614:	edd3 6a00 	vldr	s13, [r3]
 8002618:	4b16      	ldr	r3, [pc, #88]	; (8002674 <PID_Calc_L_2+0xcc>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002622:	ee37 7a27 	vadd.f32	s14, s14, s15
					+Derivative_L_2 *( PresError_L_2-LastError_L_2);   //d项
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <PID_Calc_L_2+0xc8>)
 8002628:	edd3 6a00 	vldr	s13, [r3]
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <PID_Calc_L_2+0xd8>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <PID_Calc_L_2+0xdc>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002640:	ee77 7a27 	vadd.f32	s15, s14, s15
		Outpid_L_2=Proportion_L_2 *PresError_L_2                //p项
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <PID_Calc_L_2+0xe0>)
 8002646:	edc3 7a00 	vstr	s15, [r3]

		LastError_L_2=PresError_L_2;                    //存储误差，用于下次计算
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <PID_Calc_L_2+0xc8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <PID_Calc_L_2+0xd8>)
 8002650:	6013      	str	r3, [r2, #0]
		return(Outpid_L_2);                                       //返回输出值（pwm）
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <PID_Calc_L_2+0xe0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	ee07 3a90 	vmov	s15, r3
}
 800265a:	eeb0 0a67 	vmov.f32	s0, s15
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	f3af 8000 	nop.w
 8002668:	33333333 	.word	0x33333333
 800266c:	3fd33333 	.word	0x3fd33333
 8002670:	200002a8 	.word	0x200002a8
 8002674:	200002b0 	.word	0x200002b0
 8002678:	20000010 	.word	0x20000010
 800267c:	20000014 	.word	0x20000014
 8002680:	200002a4 	.word	0x200002a4
 8002684:	20000288 	.word	0x20000288
 8002688:	200002ac 	.word	0x200002ac

0800268c <go_or_back_R_1>:
float I_acc_R_1=0; //之前误差累加和（利用积分分离）
int stotage_R_1 =0;//计算角度时储存编码器的值

//判断电机转动方向
void go_or_back_R_1(float  setpoint_R_1)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	ed87 0a01 	vstr	s0, [r7, #4]
	if(setpoint_R_1>0)
 8002696:	edd7 7a01 	vldr	s15, [r7, #4]
 800269a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	dd02      	ble.n	80026aa <go_or_back_R_1+0x1e>
			{
				Motor_R_1(GO);//右1电机正转
 80026a4:	2000      	movs	r0, #0
 80026a6:	f000 f819 	bl	80026dc <Motor_R_1>
			}
		if(setpoint_R_1<0)
 80026aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b6:	d502      	bpl.n	80026be <go_or_back_R_1+0x32>
			{
				Motor_R_1(BACK);//右1电机反转
 80026b8:	2001      	movs	r0, #1
 80026ba:	f000 f80f 	bl	80026dc <Motor_R_1>
			}
		if(setpoint_R_1==0)
 80026be:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	d102      	bne.n	80026d2 <go_or_back_R_1+0x46>
			{
				Motor_R_1(STOP);//右1电机停止
 80026cc:	2002      	movs	r0, #2
 80026ce:	f000 f805 	bl	80026dc <Motor_R_1>
			}
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <Motor_R_1>:

//电机转动方向控制
void Motor_R_1(char state)
	  {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
	  	if(state == GO)//右1电机前进
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <Motor_R_1+0x28>
	  	{
	  		HAL_GPIO_WritePin(motor5_GPIO_Port,  motor5_Pin, 1);
 80026ec:	2201      	movs	r2, #1
 80026ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f2:	4815      	ldr	r0, [pc, #84]	; (8002748 <Motor_R_1+0x6c>)
 80026f4:	f002 fc40 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor6_GPIO_Port,  motor6_Pin, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026fe:	4812      	ldr	r0, [pc, #72]	; (8002748 <Motor_R_1+0x6c>)
 8002700:	f002 fc3a 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  	if(state == BACK)//右1电机后退
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d10b      	bne.n	8002722 <Motor_R_1+0x46>
	  	{
	  		HAL_GPIO_WritePin(motor5_GPIO_Port,  motor5_Pin, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002710:	480d      	ldr	r0, [pc, #52]	; (8002748 <Motor_R_1+0x6c>)
 8002712:	f002 fc31 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor6_GPIO_Port,  motor6_Pin, 1);
 8002716:	2201      	movs	r2, #1
 8002718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800271c:	480a      	ldr	r0, [pc, #40]	; (8002748 <Motor_R_1+0x6c>)
 800271e:	f002 fc2b 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  	if(state == STOP)//右1电机停转
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d10b      	bne.n	8002740 <Motor_R_1+0x64>
	  	{
	  		HAL_GPIO_WritePin(motor5_GPIO_Port,  motor5_Pin, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800272e:	4806      	ldr	r0, [pc, #24]	; (8002748 <Motor_R_1+0x6c>)
 8002730:	f002 fc22 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor6_GPIO_Port,  motor6_Pin, 0);
 8002734:	2200      	movs	r2, #0
 8002736:	f44f 7100 	mov.w	r1, #512	; 0x200
 800273a:	4803      	ldr	r0, [pc, #12]	; (8002748 <Motor_R_1+0x6c>)
 800273c:	f002 fc1c 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  }
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40020800 	.word	0x40020800
 800274c:	00000000 	.word	0x00000000

08002750 <contol_R_1>:

//编码器采集脉冲数，具体调节电机转速
float contol_R_1(float setpoint_R_1,float setpoint_L_2,float *angular)
{
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	ed2d 8b02 	vpush	{d8}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	ed87 0a03 	vstr	s0, [r7, #12]
 800275e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002762:	6078      	str	r0, [r7, #4]
		GetData_R_1 = __HAL_TIM_GET_COUNTER(&htim4);   //编码器读脉冲数
 8002764:	4b8c      	ldr	r3, [pc, #560]	; (8002998 <contol_R_1+0x248>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002772:	4b8a      	ldr	r3, [pc, #552]	; (800299c <contol_R_1+0x24c>)
 8002774:	edc3 7a00 	vstr	s15, [r3]
		Direction_R_1 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4);		// 判断电机正反转，前进时左为0，右为1；后退时左为1，右为0
 8002778:	4b87      	ldr	r3, [pc, #540]	; (8002998 <contol_R_1+0x248>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b10      	cmp	r3, #16
 8002784:	bf0c      	ite	eq
 8002786:	2301      	moveq	r3, #1
 8002788:	2300      	movne	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	4b84      	ldr	r3, [pc, #528]	; (80029a0 <contol_R_1+0x250>)
 8002790:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4,0);//编码器读数后清零
 8002792:	4b81      	ldr	r3, [pc, #516]	; (8002998 <contol_R_1+0x248>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2200      	movs	r2, #0
 8002798:	625a      	str	r2, [r3, #36]	; 0x24

		//判断是否反转，前进时左为0，右为1；后退时左为1，右为0
		if (Direction_R_1==1)
 800279a:	4b81      	ldr	r3, [pc, #516]	; (80029a0 <contol_R_1+0x250>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d116      	bne.n	80027d0 <contol_R_1+0x80>
		{
			if(GetData_R_1==0)
 80027a2:	4b7e      	ldr	r3, [pc, #504]	; (800299c <contol_R_1+0x24c>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b0:	d104      	bne.n	80027bc <contol_R_1+0x6c>
			{
				GetData_R_1=0;
 80027b2:	4b7a      	ldr	r3, [pc, #488]	; (800299c <contol_R_1+0x24c>)
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e009      	b.n	80027d0 <contol_R_1+0x80>
			}
			else
			{
				GetData_R_1=65535-GetData_R_1;
 80027bc:	4b77      	ldr	r3, [pc, #476]	; (800299c <contol_R_1+0x24c>)
 80027be:	edd3 7a00 	vldr	s15, [r3]
 80027c2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80029a4 <contol_R_1+0x254>
 80027c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ca:	4b74      	ldr	r3, [pc, #464]	; (800299c <contol_R_1+0x24c>)
 80027cc:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		//计算转角
		if (setpoint_R_1*setpoint_L_2<0)
 80027d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80027d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	d530      	bpl.n	8002848 <contol_R_1+0xf8>
		{
			stotage_R_1+=GetData_R_1;
 80027e6:	4b70      	ldr	r3, [pc, #448]	; (80029a8 <contol_R_1+0x258>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f2:	4b6a      	ldr	r3, [pc, #424]	; (800299c <contol_R_1+0x24c>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002800:	ee17 2a90 	vmov	r2, s15
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <contol_R_1+0x258>)
 8002806:	601a      	str	r2, [r3, #0]
			angular[2]=stotage_R_1/4680*2*3.14;
 8002808:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <contol_R_1+0x258>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a67      	ldr	r2, [pc, #412]	; (80029ac <contol_R_1+0x25c>)
 800280e:	fb82 1203 	smull	r1, r2, r2, r3
 8002812:	441a      	add	r2, r3
 8002814:	1312      	asrs	r2, r2, #12
 8002816:	17db      	asrs	r3, r3, #31
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fe2d 	bl	800047c <__aeabi_i2d>
 8002822:	a359      	add	r3, pc, #356	; (adr r3, 8002988 <contol_R_1+0x238>)
 8002824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002828:	f7fd fe92 	bl	8000550 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4611      	mov	r1, r2
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 0608 	add.w	r6, r3, #8
 800283a:	4608      	mov	r0, r1
 800283c:	4611      	mov	r1, r2
 800283e:	f7fe f95f 	bl	8000b00 <__aeabi_d2f>
 8002842:	4603      	mov	r3, r0
 8002844:	6033      	str	r3, [r6, #0]
 8002846:	e00d      	b.n	8002864 <contol_R_1+0x114>
		}
		else if(setpoint_R_1*setpoint_L_2>=0)
 8002848:	ed97 7a03 	vldr	s14, [r7, #12]
 800284c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002854:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285c:	db02      	blt.n	8002864 <contol_R_1+0x114>
		{
			stotage_R_1=0;
 800285e:	4b52      	ldr	r3, [pc, #328]	; (80029a8 <contol_R_1+0x258>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
		}

		//计算转速和线速度
		n_R_1=GetData_R_1/4680*5;
 8002864:	4b4d      	ldr	r3, [pc, #308]	; (800299c <contol_R_1+0x24c>)
 8002866:	ed93 7a00 	vldr	s14, [r3]
 800286a:	eddf 6a51 	vldr	s13, [pc, #324]	; 80029b0 <contol_R_1+0x260>
 800286e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002872:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800287a:	4b4e      	ldr	r3, [pc, #312]	; (80029b4 <contol_R_1+0x264>)
 800287c:	edc3 7a00 	vstr	s15, [r3]
		v_R_1=GetData_R_1/4680*0.2041*5;    			//v=n*2*Π*r*0.01=n*0.2041m/s  r=3.25
 8002880:	4b46      	ldr	r3, [pc, #280]	; (800299c <contol_R_1+0x24c>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80029b0 <contol_R_1+0x260>
 800288a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800288e:	ee16 0a90 	vmov	r0, s13
 8002892:	f7fd fe05 	bl	80004a0 <__aeabi_f2d>
 8002896:	a33e      	add	r3, pc, #248	; (adr r3, 8002990 <contol_R_1+0x240>)
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f7fd fe58 	bl	8000550 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	4b42      	ldr	r3, [pc, #264]	; (80029b8 <contol_R_1+0x268>)
 80028ae:	f7fd fe4f 	bl	8000550 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f7fe f921 	bl	8000b00 <__aeabi_d2f>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <contol_R_1+0x26c>)
 80028c2:	601a      	str	r2, [r3, #0]

		//pid的系统为转速
		outpwm_R_1=PID_Calc_R_1(n_R_1,fabs(setpoint_R_1/1000.0)/0.2041);   //设定值从线速度变为转速
 80028c4:	4b3b      	ldr	r3, [pc, #236]	; (80029b4 <contol_R_1+0x264>)
 80028c6:	ed93 8a00 	vldr	s16, [r3]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7fd fde8 	bl	80004a0 <__aeabi_f2d>
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4b3a      	ldr	r3, [pc, #232]	; (80029c0 <contol_R_1+0x270>)
 80028d6:	f7fd ff65 	bl	80007a4 <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4614      	mov	r4, r2
 80028e0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80028e4:	a32a      	add	r3, pc, #168	; (adr r3, 8002990 <contol_R_1+0x240>)
 80028e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f7fd ff59 	bl	80007a4 <__aeabi_ddiv>
 80028f2:	4603      	mov	r3, r0
 80028f4:	460c      	mov	r4, r1
 80028f6:	4618      	mov	r0, r3
 80028f8:	4621      	mov	r1, r4
 80028fa:	f7fe f901 	bl	8000b00 <__aeabi_d2f>
 80028fe:	4603      	mov	r3, r0
 8002900:	ee00 3a90 	vmov	s1, r3
 8002904:	eeb0 0a48 	vmov.f32	s0, s16
 8002908:	f000 f866 	bl	80029d8 <PID_Calc_R_1>
 800290c:	eef0 7a40 	vmov.f32	s15, s0
 8002910:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <contol_R_1+0x274>)
 8002912:	edc3 7a00 	vstr	s15, [r3]
		prespwm_R_1+= outpwm_R_1;
 8002916:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <contol_R_1+0x278>)
 8002918:	ed93 7a00 	vldr	s14, [r3]
 800291c:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <contol_R_1+0x274>)
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <contol_R_1+0x278>)
 8002928:	edc3 7a00 	vstr	s15, [r3]

		if(prespwm_R_1>=80){prespwm_R_1=80;} if(prespwm_R_1<=0){prespwm_R_1=0;}   //限幅pwm
 800292c:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <contol_R_1+0x278>)
 800292e:	edd3 7a00 	vldr	s15, [r3]
 8002932:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80029cc <contol_R_1+0x27c>
 8002936:	eef4 7ac7 	vcmpe.f32	s15, s14
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293e:	db02      	blt.n	8002946 <contol_R_1+0x1f6>
 8002940:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <contol_R_1+0x278>)
 8002942:	4a23      	ldr	r2, [pc, #140]	; (80029d0 <contol_R_1+0x280>)
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <contol_R_1+0x278>)
 8002948:	edd3 7a00 	vldr	s15, [r3]
 800294c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002954:	d803      	bhi.n	800295e <contol_R_1+0x20e>
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <contol_R_1+0x278>)
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,prespwm_R_1);//通过pwm控制电机速度
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <contol_R_1+0x278>)
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <contol_R_1+0x284>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800296c:	ee17 2a90 	vmov	r2, s15
 8002970:	635a      	str	r2, [r3, #52]	; 0x34

		return v_R_1;//返回线速度
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <contol_R_1+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	ee07 3a90 	vmov	s15, r3
}
 800297a:	eeb0 0a67 	vmov.f32	s0, s15
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	ecbd 8b02 	vpop	{d8}
 8002986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002988:	51eb851f 	.word	0x51eb851f
 800298c:	40091eb8 	.word	0x40091eb8
 8002990:	e48e8a72 	.word	0xe48e8a72
 8002994:	3fca1ff2 	.word	0x3fca1ff2
 8002998:	20000454 	.word	0x20000454
 800299c:	200002bc 	.word	0x200002bc
 80029a0:	200002c0 	.word	0x200002c0
 80029a4:	477fff00 	.word	0x477fff00
 80029a8:	200002e4 	.word	0x200002e4
 80029ac:	e00e00e1 	.word	0xe00e00e1
 80029b0:	45924000 	.word	0x45924000
 80029b4:	200002c4 	.word	0x200002c4
 80029b8:	40140000 	.word	0x40140000
 80029bc:	200002c8 	.word	0x200002c8
 80029c0:	408f4000 	.word	0x408f4000
 80029c4:	200002d0 	.word	0x200002d0
 80029c8:	200002cc 	.word	0x200002cc
 80029cc:	42a00000 	.word	0x42a00000
 80029d0:	42a00000 	.word	0x42a00000
 80029d4:	20000614 	.word	0x20000614

080029d8 <PID_Calc_R_1>:

	//位置式pid
	//PID计算公式Δu(k)=kp*e(k)+ki*[e(k)+...+e(0)]+kd[e(k)-e(k−1)]
	float PID_Calc_R_1(float PresPoint_R_1,float SetPoint_R_1)
	{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	ed87 0a01 	vstr	s0, [r7, #4]
 80029e2:	edc7 0a00 	vstr	s1, [r7]

		PresError_R_1=SetPoint_R_1-PresPoint_R_1;                //误差计算
 80029e6:	ed97 7a00 	vldr	s14, [r7]
 80029ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <PID_Calc_R_1+0xc8>)
 80029f4:	edc3 7a00 	vstr	s15, [r3]
		if(PresError_R_1<0.3){I_acc_R_1+=PresError_R_1;}//误差小于0.3不进行积分控制（积分分离）
 80029f8:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <PID_Calc_R_1+0xc8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fd fd4f 	bl	80004a0 <__aeabi_f2d>
 8002a02:	a325      	add	r3, pc, #148	; (adr r3, 8002a98 <PID_Calc_R_1+0xc0>)
 8002a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a08:	f7fe f814 	bl	8000a34 <__aeabi_dcmplt>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <PID_Calc_R_1+0x52>
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <PID_Calc_R_1+0xcc>)
 8002a14:	ed93 7a00 	vldr	s14, [r3]
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <PID_Calc_R_1+0xc8>)
 8002a1a:	edd3 7a00 	vldr	s15, [r3]
 8002a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <PID_Calc_R_1+0xcc>)
 8002a24:	edc3 7a00 	vstr	s15, [r3]
 8002a28:	e003      	b.n	8002a32 <PID_Calc_R_1+0x5a>
		else{I_acc_R_1=0;}
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <PID_Calc_R_1+0xcc>)
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

		Outpid_R_1=Proportion_R_1 *PresError_R_1                 //p项
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <PID_Calc_R_1+0xd0>)
 8002a34:	ed93 7a00 	vldr	s14, [r3]
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <PID_Calc_R_1+0xc8>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
					+Integral_R_1 * I_acc_R_1     //i项
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <PID_Calc_R_1+0xd4>)
 8002a44:	edd3 6a00 	vldr	s13, [r3]
 8002a48:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <PID_Calc_R_1+0xcc>)
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a52:	ee37 7a27 	vadd.f32	s14, s14, s15
					+Derivative_R_1 *( PresError_R_1-LastError_R_1);   //d项
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <PID_Calc_R_1+0xc8>)
 8002a58:	edd3 6a00 	vldr	s13, [r3]
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <PID_Calc_R_1+0xd8>)
 8002a5e:	edd3 7a00 	vldr	s15, [r3]
 8002a62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a66:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <PID_Calc_R_1+0xdc>)
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
		Outpid_R_1=Proportion_R_1 *PresError_R_1                 //p项
 8002a74:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <PID_Calc_R_1+0xe0>)
 8002a76:	edc3 7a00 	vstr	s15, [r3]

		LastError_R_1=PresError_R_1;                    //存储误差，用于下次计算
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <PID_Calc_R_1+0xc8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <PID_Calc_R_1+0xd8>)
 8002a80:	6013      	str	r3, [r2, #0]
		return(Outpid_R_1);                                     //返回输出值（pwm）
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <PID_Calc_R_1+0xe0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	ee07 3a90 	vmov	s15, r3
}
 8002a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	f3af 8000 	nop.w
 8002a98:	33333333 	.word	0x33333333
 8002a9c:	3fd33333 	.word	0x3fd33333
 8002aa0:	200002d8 	.word	0x200002d8
 8002aa4:	200002e0 	.word	0x200002e0
 8002aa8:	20000018 	.word	0x20000018
 8002aac:	2000001c 	.word	0x2000001c
 8002ab0:	200002d4 	.word	0x200002d4
 8002ab4:	200002b8 	.word	0x200002b8
 8002ab8:	200002dc 	.word	0x200002dc

08002abc <go_or_back_R_2>:
float Outpid_R_2=0;//pid输出值（pwm）
float I_acc_R_2=0; //之前误差累加和（利用积分分离）
int stotage_R_2 =0;//计算角度时储存编码器的值
//判断电机转动方向
void go_or_back_R_2(float  setpoint_R_2)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	ed87 0a01 	vstr	s0, [r7, #4]
	if(setpoint_R_2>0)
 8002ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	dd02      	ble.n	8002ada <go_or_back_R_2+0x1e>
			{
				Motor_R_2(GO);//右2电机正转
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f000 f819 	bl	8002b0c <Motor_R_2>
			}
		if(setpoint_R_2<0)
 8002ada:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ade:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	d502      	bpl.n	8002aee <go_or_back_R_2+0x32>
			{
				Motor_R_2(BACK);//右2电机反转
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f000 f80f 	bl	8002b0c <Motor_R_2>
			}
		if(setpoint_R_2==0)
 8002aee:	edd7 7a01 	vldr	s15, [r7, #4]
 8002af2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afa:	d102      	bne.n	8002b02 <go_or_back_R_2+0x46>
			{
				Motor_R_2(STOP);//右2电机停止
 8002afc:	2002      	movs	r0, #2
 8002afe:	f000 f805 	bl	8002b0c <Motor_R_2>
			}
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <Motor_R_2>:

//电机转动方向控制
void Motor_R_2(char state)
	  {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
	  	if(state == GO)//右2电机前进
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <Motor_R_2+0x28>
	  	{
	  		HAL_GPIO_WritePin(motor7_GPIO_Port,  motor7_Pin, 1);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b22:	4815      	ldr	r0, [pc, #84]	; (8002b78 <Motor_R_2+0x6c>)
 8002b24:	f002 fa28 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor8_GPIO_Port,  motor8_Pin, 0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b2e:	4812      	ldr	r0, [pc, #72]	; (8002b78 <Motor_R_2+0x6c>)
 8002b30:	f002 fa22 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  	if(state == BACK)//右2电机后退
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10b      	bne.n	8002b52 <Motor_R_2+0x46>
	  	{
	  		HAL_GPIO_WritePin(motor7_GPIO_Port,  motor7_Pin, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <Motor_R_2+0x6c>)
 8002b42:	f002 fa19 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor8_GPIO_Port,  motor8_Pin, 1);
 8002b46:	2201      	movs	r2, #1
 8002b48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b4c:	480a      	ldr	r0, [pc, #40]	; (8002b78 <Motor_R_2+0x6c>)
 8002b4e:	f002 fa13 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  	if(state == STOP)//右2电机停转
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d10b      	bne.n	8002b70 <Motor_R_2+0x64>
	  	{
	  		HAL_GPIO_WritePin(motor7_GPIO_Port,  motor7_Pin, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b5e:	4806      	ldr	r0, [pc, #24]	; (8002b78 <Motor_R_2+0x6c>)
 8002b60:	f002 fa0a 	bl	8004f78 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(motor8_GPIO_Port,  motor8_Pin, 0);
 8002b64:	2200      	movs	r2, #0
 8002b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b6a:	4803      	ldr	r0, [pc, #12]	; (8002b78 <Motor_R_2+0x6c>)
 8002b6c:	f002 fa04 	bl	8004f78 <HAL_GPIO_WritePin>
	  	}
	  }
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	00000000 	.word	0x00000000

08002b80 <contol_R_2>:

//编码器采集脉冲数，具体调节电机转速
float contol_R_2(float setpoint_R_2,float setpoint_L_1,float *angular)
{
 8002b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b82:	ed2d 8b02 	vpush	{d8}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002b92:	6078      	str	r0, [r7, #4]
		GetData_R_2 = __HAL_TIM_GET_COUNTER(&htim8);   //编码器读脉冲数
 8002b94:	4b8c      	ldr	r3, [pc, #560]	; (8002dc8 <contol_R_2+0x248>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba2:	4b8a      	ldr	r3, [pc, #552]	; (8002dcc <contol_R_2+0x24c>)
 8002ba4:	edc3 7a00 	vstr	s15, [r3]
		Direction_R_2 = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8);		// 判断电机正反转，前进时左为0，右为1；后退时左为1，右为0
 8002ba8:	4b87      	ldr	r3, [pc, #540]	; (8002dc8 <contol_R_2+0x248>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b10      	cmp	r3, #16
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b84      	ldr	r3, [pc, #528]	; (8002dd0 <contol_R_2+0x250>)
 8002bc0:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim8,0);//编码器读数后清零
 8002bc2:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <contol_R_2+0x248>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

		//判断是否反转，前进时左为0，右为1；后退时左为1，右为0
		if (Direction_R_2==1)
 8002bca:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <contol_R_2+0x250>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d116      	bne.n	8002c00 <contol_R_2+0x80>
		{
			if(GetData_R_2==0)
 8002bd2:	4b7e      	ldr	r3, [pc, #504]	; (8002dcc <contol_R_2+0x24c>)
 8002bd4:	edd3 7a00 	vldr	s15, [r3]
 8002bd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	d104      	bne.n	8002bec <contol_R_2+0x6c>
			{
				GetData_R_2=0;
 8002be2:	4b7a      	ldr	r3, [pc, #488]	; (8002dcc <contol_R_2+0x24c>)
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e009      	b.n	8002c00 <contol_R_2+0x80>
			}
			else
			{
				GetData_R_2=65535-GetData_R_2;
 8002bec:	4b77      	ldr	r3, [pc, #476]	; (8002dcc <contol_R_2+0x24c>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8002dd4 <contol_R_2+0x254>
 8002bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfa:	4b74      	ldr	r3, [pc, #464]	; (8002dcc <contol_R_2+0x24c>)
 8002bfc:	edc3 7a00 	vstr	s15, [r3]
			}
		}

		//计算转角
		if (setpoint_R_2*setpoint_L_1<0)
 8002c00:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	d530      	bpl.n	8002c78 <contol_R_2+0xf8>
		{
			stotage_R_2+=GetData_R_2;
 8002c16:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <contol_R_2+0x258>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c22:	4b6a      	ldr	r3, [pc, #424]	; (8002dcc <contol_R_2+0x24c>)
 8002c24:	edd3 7a00 	vldr	s15, [r3]
 8002c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c30:	ee17 2a90 	vmov	r2, s15
 8002c34:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <contol_R_2+0x258>)
 8002c36:	601a      	str	r2, [r3, #0]
			angular[3]=stotage_R_2/4680*2*3.14;
 8002c38:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <contol_R_2+0x258>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a67      	ldr	r2, [pc, #412]	; (8002ddc <contol_R_2+0x25c>)
 8002c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8002c42:	441a      	add	r2, r3
 8002c44:	1312      	asrs	r2, r2, #12
 8002c46:	17db      	asrs	r3, r3, #31
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc15 	bl	800047c <__aeabi_i2d>
 8002c52:	a359      	add	r3, pc, #356	; (adr r3, 8002db8 <contol_R_2+0x238>)
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f7fd fc7a 	bl	8000550 <__aeabi_dmul>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4611      	mov	r1, r2
 8002c62:	461a      	mov	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f103 060c 	add.w	r6, r3, #12
 8002c6a:	4608      	mov	r0, r1
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	f7fd ff47 	bl	8000b00 <__aeabi_d2f>
 8002c72:	4603      	mov	r3, r0
 8002c74:	6033      	str	r3, [r6, #0]
 8002c76:	e00d      	b.n	8002c94 <contol_R_2+0x114>
		}
		else if(setpoint_R_2*setpoint_L_1>=0)
 8002c78:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8c:	db02      	blt.n	8002c94 <contol_R_2+0x114>
		{
			stotage_R_2=0;
 8002c8e:	4b52      	ldr	r3, [pc, #328]	; (8002dd8 <contol_R_2+0x258>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
		}

		//计算转速和线速度
		n_R_2=GetData_R_2/4680*5;
 8002c94:	4b4d      	ldr	r3, [pc, #308]	; (8002dcc <contol_R_2+0x24c>)
 8002c96:	ed93 7a00 	vldr	s14, [r3]
 8002c9a:	eddf 6a51 	vldr	s13, [pc, #324]	; 8002de0 <contol_R_2+0x260>
 8002c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002caa:	4b4e      	ldr	r3, [pc, #312]	; (8002de4 <contol_R_2+0x264>)
 8002cac:	edc3 7a00 	vstr	s15, [r3]
		v_R_2=GetData_R_2/4680*0.2041*5;    			//v=n*2*Π*r*0.01=n*0.2041m/s  r=3.25
 8002cb0:	4b46      	ldr	r3, [pc, #280]	; (8002dcc <contol_R_2+0x24c>)
 8002cb2:	edd3 7a00 	vldr	s15, [r3]
 8002cb6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002de0 <contol_R_2+0x260>
 8002cba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cbe:	ee16 0a90 	vmov	r0, s13
 8002cc2:	f7fd fbed 	bl	80004a0 <__aeabi_f2d>
 8002cc6:	a33e      	add	r3, pc, #248	; (adr r3, 8002dc0 <contol_R_2+0x240>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fc40 	bl	8000550 <__aeabi_dmul>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	4b42      	ldr	r3, [pc, #264]	; (8002de8 <contol_R_2+0x268>)
 8002cde:	f7fd fc37 	bl	8000550 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd ff09 	bl	8000b00 <__aeabi_d2f>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <contol_R_2+0x26c>)
 8002cf2:	601a      	str	r2, [r3, #0]

		//pid的系统为转速
		outpwm_R_2=PID_Calc_R_2(n_R_2,fabs(setpoint_R_2/1000.0)/0.2041);   //设定值从线速度变为转速
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	; (8002de4 <contol_R_2+0x264>)
 8002cf6:	ed93 8a00 	vldr	s16, [r3]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7fd fbd0 	bl	80004a0 <__aeabi_f2d>
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	4b3a      	ldr	r3, [pc, #232]	; (8002df0 <contol_R_2+0x270>)
 8002d06:	f7fd fd4d 	bl	80007a4 <__aeabi_ddiv>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4614      	mov	r4, r2
 8002d10:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002d14:	a32a      	add	r3, pc, #168	; (adr r3, 8002dc0 <contol_R_2+0x240>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f7fd fd41 	bl	80007a4 <__aeabi_ddiv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	460c      	mov	r4, r1
 8002d26:	4618      	mov	r0, r3
 8002d28:	4621      	mov	r1, r4
 8002d2a:	f7fd fee9 	bl	8000b00 <__aeabi_d2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	ee00 3a90 	vmov	s1, r3
 8002d34:	eeb0 0a48 	vmov.f32	s0, s16
 8002d38:	f000 f866 	bl	8002e08 <PID_Calc_R_2>
 8002d3c:	eef0 7a40 	vmov.f32	s15, s0
 8002d40:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <contol_R_2+0x274>)
 8002d42:	edc3 7a00 	vstr	s15, [r3]
		prespwm_R_2+= outpwm_R_2;
 8002d46:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <contol_R_2+0x278>)
 8002d48:	ed93 7a00 	vldr	s14, [r3]
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <contol_R_2+0x274>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <contol_R_2+0x278>)
 8002d58:	edc3 7a00 	vstr	s15, [r3]

		if(prespwm_R_2>=80){prespwm_R_2=80;} if(prespwm_R_2<=0){prespwm_R_2=0;}   //限幅pwm
 8002d5c:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <contol_R_2+0x278>)
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002dfc <contol_R_2+0x27c>
 8002d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	db02      	blt.n	8002d76 <contol_R_2+0x1f6>
 8002d70:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <contol_R_2+0x278>)
 8002d72:	4a23      	ldr	r2, [pc, #140]	; (8002e00 <contol_R_2+0x280>)
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <contol_R_2+0x278>)
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d84:	d803      	bhi.n	8002d8e <contol_R_2+0x20e>
 8002d86:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <contol_R_2+0x278>)
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_2,prespwm_R_2);//通过pwm控制电机速度
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <contol_R_2+0x278>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <contol_R_2+0x284>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9c:	ee17 2a90 	vmov	r2, s15
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38

		return v_R_2;//返回线速度
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <contol_R_2+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	ee07 3a90 	vmov	s15, r3
}
 8002daa:	eeb0 0a67 	vmov.f32	s0, s15
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	ecbd 8b02 	vpop	{d8}
 8002db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db8:	51eb851f 	.word	0x51eb851f
 8002dbc:	40091eb8 	.word	0x40091eb8
 8002dc0:	e48e8a72 	.word	0xe48e8a72
 8002dc4:	3fca1ff2 	.word	0x3fca1ff2
 8002dc8:	20000414 	.word	0x20000414
 8002dcc:	200002ec 	.word	0x200002ec
 8002dd0:	200002f0 	.word	0x200002f0
 8002dd4:	477fff00 	.word	0x477fff00
 8002dd8:	20000314 	.word	0x20000314
 8002ddc:	e00e00e1 	.word	0xe00e00e1
 8002de0:	45924000 	.word	0x45924000
 8002de4:	200002f4 	.word	0x200002f4
 8002de8:	40140000 	.word	0x40140000
 8002dec:	200002f8 	.word	0x200002f8
 8002df0:	408f4000 	.word	0x408f4000
 8002df4:	20000300 	.word	0x20000300
 8002df8:	200002fc 	.word	0x200002fc
 8002dfc:	42a00000 	.word	0x42a00000
 8002e00:	42a00000 	.word	0x42a00000
 8002e04:	20000614 	.word	0x20000614

08002e08 <PID_Calc_R_2>:

	//位置式pid
	//PID计算公式Δu(k)=kp*e(k)+ki*[e(k)+...+e(0)]+kd[e(k)-e(k−1)]
	float PID_Calc_R_2(float PresPoint_R_2,float SetPoint_R_2)
	{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e12:	edc7 0a00 	vstr	s1, [r7]

		PresError_R_2=SetPoint_R_2-PresPoint_R_2;                //误差计算
 8002e16:	ed97 7a00 	vldr	s14, [r7]
 8002e1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e22:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <PID_Calc_R_2+0xc8>)
 8002e24:	edc3 7a00 	vstr	s15, [r3]
		if(PresError_R_2<0.3){I_acc_R_2+=PresError_R_2;}//误差小于0.3不进行积分控制（积分分离）
 8002e28:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <PID_Calc_R_2+0xc8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fb37 	bl	80004a0 <__aeabi_f2d>
 8002e32:	a325      	add	r3, pc, #148	; (adr r3, 8002ec8 <PID_Calc_R_2+0xc0>)
 8002e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e38:	f7fd fdfc 	bl	8000a34 <__aeabi_dcmplt>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <PID_Calc_R_2+0x52>
 8002e42:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <PID_Calc_R_2+0xcc>)
 8002e44:	ed93 7a00 	vldr	s14, [r3]
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <PID_Calc_R_2+0xc8>)
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <PID_Calc_R_2+0xcc>)
 8002e54:	edc3 7a00 	vstr	s15, [r3]
 8002e58:	e003      	b.n	8002e62 <PID_Calc_R_2+0x5a>
		else{I_acc_R_2=0;}
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <PID_Calc_R_2+0xcc>)
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

		Outpid_R_2=Proportion_R_2 *PresError_R_2                 //p项
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <PID_Calc_R_2+0xd0>)
 8002e64:	ed93 7a00 	vldr	s14, [r3]
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <PID_Calc_R_2+0xc8>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
					+Integral_R_2 * I_acc_R_2     //i项
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <PID_Calc_R_2+0xd4>)
 8002e74:	edd3 6a00 	vldr	s13, [r3]
 8002e78:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <PID_Calc_R_2+0xcc>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e82:	ee37 7a27 	vadd.f32	s14, s14, s15
					+Derivative_R_2 *( PresError_R_2-LastError_R_2);   //d项
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <PID_Calc_R_2+0xc8>)
 8002e88:	edd3 6a00 	vldr	s13, [r3]
 8002e8c:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <PID_Calc_R_2+0xd8>)
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <PID_Calc_R_2+0xdc>)
 8002e98:	edd3 7a00 	vldr	s15, [r3]
 8002e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
		Outpid_R_2=Proportion_R_2 *PresError_R_2                 //p项
 8002ea4:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <PID_Calc_R_2+0xe0>)
 8002ea6:	edc3 7a00 	vstr	s15, [r3]

		LastError_R_2=PresError_R_2;                    //存储误差，用于下次计算
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <PID_Calc_R_2+0xc8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <PID_Calc_R_2+0xd8>)
 8002eb0:	6013      	str	r3, [r2, #0]
		return(Outpid_R_2);                                     //返回输出值（pwm）
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <PID_Calc_R_2+0xe0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	ee07 3a90 	vmov	s15, r3
}
 8002eba:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	f3af 8000 	nop.w
 8002ec8:	33333333 	.word	0x33333333
 8002ecc:	3fd33333 	.word	0x3fd33333
 8002ed0:	20000308 	.word	0x20000308
 8002ed4:	20000310 	.word	0x20000310
 8002ed8:	20000020 	.word	0x20000020
 8002edc:	20000024 	.word	0x20000024
 8002ee0:	20000304 	.word	0x20000304
 8002ee4:	200002e8 	.word	0x200002e8
 8002ee8:	2000030c 	.word	0x2000030c

08002eec <PEOPLE_PUT>:
*/

#include <people.h>

void PEOPLE_PUT(unsigned char *data)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	if  (HAL_GPIO_ReadPin(people_GPIO_Port,people_Pin)==1)
 8002ef4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ef8:	4809      	ldr	r0, [pc, #36]	; (8002f20 <PEOPLE_PUT+0x34>)
 8002efa:	f002 f825 	bl	8004f48 <HAL_GPIO_ReadPin>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d104      	bne.n	8002f0e <PEOPLE_PUT+0x22>
		   {
				data[5]=0x01;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3305      	adds	r3, #5
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
		   }
	else
	 	  {
	 		  data[5]=0x00;
	 	  }
}
 8002f0c:	e003      	b.n	8002f16 <PEOPLE_PUT+0x2a>
	 		  data[5]=0x00;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3305      	adds	r3, #5
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000

08002f24 <SMOK_PUT>:
#include <smok.h>

void SMOK_PUT (unsigned char *date)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	if  (HAL_GPIO_ReadPin(smok_GPIO_Port,smok_Pin)==0)
 8002f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f30:	4809      	ldr	r0, [pc, #36]	; (8002f58 <SMOK_PUT+0x34>)
 8002f32:	f002 f809 	bl	8004f48 <HAL_GPIO_ReadPin>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d104      	bne.n	8002f46 <SMOK_PUT+0x22>
		    {
				date[4]=0x01;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
		    }
	else
	 	 	 {
				date[4]=0x00;
	 	 	 }
}
 8002f44:	e003      	b.n	8002f4e <SMOK_PUT+0x2a>
				date[4]=0x00;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40020400 	.word	0x40020400

08002f5c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002f60:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <MX_SPI1_Init+0x68>)
 8002f64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f74:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002f8e:	4b0c      	ldr	r3, [pc, #48]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f90:	2208      	movs	r2, #8
 8002f92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002fa8:	220a      	movs	r2, #10
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fac:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <MX_SPI1_Init+0x64>)
 8002fae:	f002 fc39 	bl	8005824 <HAL_SPI_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002fb8:	f7fe fde6 	bl	8001b88 <Error_Handler>
  }

}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	2000035c 	.word	0x2000035c
 8002fc4:	40013000 	.word	0x40013000

08002fc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a3f      	ldr	r2, [pc, #252]	; (80030e4 <HAL_SPI_MspInit+0x11c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d178      	bne.n	80030dc <HAL_SPI_MspInit+0x114>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	4b3e      	ldr	r3, [pc, #248]	; (80030e8 <HAL_SPI_MspInit+0x120>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a3d      	ldr	r2, [pc, #244]	; (80030e8 <HAL_SPI_MspInit+0x120>)
 8002ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_SPI_MspInit+0x120>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <HAL_SPI_MspInit+0x120>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a36      	ldr	r2, [pc, #216]	; (80030e8 <HAL_SPI_MspInit+0x120>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b34      	ldr	r3, [pc, #208]	; (80030e8 <HAL_SPI_MspInit+0x120>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_SPI_MspInit+0x120>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a2f      	ldr	r2, [pc, #188]	; (80030e8 <HAL_SPI_MspInit+0x120>)
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b2d      	ldr	r3, [pc, #180]	; (80030e8 <HAL_SPI_MspInit+0x120>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800303e:	23a0      	movs	r3, #160	; 0xa0
 8003040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304a:	2303      	movs	r3, #3
 800304c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800304e:	2305      	movs	r3, #5
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	4824      	ldr	r0, [pc, #144]	; (80030ec <HAL_SPI_MspInit+0x124>)
 800305a:	f001 fddb 	bl	8004c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800305e:	2310      	movs	r3, #16
 8003060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800306e:	2305      	movs	r3, #5
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	4619      	mov	r1, r3
 8003078:	481d      	ldr	r0, [pc, #116]	; (80030f0 <HAL_SPI_MspInit+0x128>)
 800307a:	f001 fdcb 	bl	8004c14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_SPI_MspInit+0x130>)
 8003082:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 8003086:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800308a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003092:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 8003094:	2200      	movs	r2, #0
 8003096:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003098:	4b16      	ldr	r3, [pc, #88]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 800309a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 80030ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030ba:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80030c0:	480c      	ldr	r0, [pc, #48]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 80030c2:	f001 fa17 	bl	80044f4 <HAL_DMA_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_SPI_MspInit+0x108>
    {
      Error_Handler();
 80030cc:	f7fe fd5c 	bl	8001b88 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a08      	ldr	r2, [pc, #32]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 80030d4:	649a      	str	r2, [r3, #72]	; 0x48
 80030d6:	4a07      	ldr	r2, [pc, #28]	; (80030f4 <HAL_SPI_MspInit+0x12c>)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80030dc:	bf00      	nop
 80030de:	3728      	adds	r7, #40	; 0x28
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40013000 	.word	0x40013000
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400
 80030f4:	200003b4 	.word	0x200003b4
 80030f8:	40026458 	.word	0x40026458

080030fc <motor_start>:
#include <start.h>
#include "tim.h"

void motor_start(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
	//tt6612芯片使能
	 HAL_GPIO_WritePin(STBY1_GPIO_Port,  STBY1_Pin, 1);
 8003100:	2201      	movs	r2, #1
 8003102:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003106:	481d      	ldr	r0, [pc, #116]	; (800317c <motor_start+0x80>)
 8003108:	f001 ff36 	bl	8004f78 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(STBY2_GPIO_Port,  STBY2_Pin, 1);
 800310c:	2201      	movs	r2, #1
 800310e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003112:	481a      	ldr	r0, [pc, #104]	; (800317c <motor_start+0x80>)
 8003114:	f001 ff30 	bl	8004f78 <HAL_GPIO_WritePin>

	 //PWM通道使能
	 HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8003118:	2100      	movs	r1, #0
 800311a:	4819      	ldr	r0, [pc, #100]	; (8003180 <motor_start+0x84>)
 800311c:	f002 fc6a 	bl	80059f4 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8003120:	2104      	movs	r1, #4
 8003122:	4817      	ldr	r0, [pc, #92]	; (8003180 <motor_start+0x84>)
 8003124:	f002 fc66 	bl	80059f4 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8003128:	2108      	movs	r1, #8
 800312a:	4816      	ldr	r0, [pc, #88]	; (8003184 <motor_start+0x88>)
 800312c:	f002 fc62 	bl	80059f4 <HAL_TIM_PWM_Start>
	 HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8003130:	210c      	movs	r1, #12
 8003132:	4814      	ldr	r0, [pc, #80]	; (8003184 <motor_start+0x88>)
 8003134:	f002 fc5e 	bl	80059f4 <HAL_TIM_PWM_Start>

	 //编码器使能
	 HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8003138:	213c      	movs	r1, #60	; 0x3c
 800313a:	4813      	ldr	r0, [pc, #76]	; (8003188 <motor_start+0x8c>)
 800313c:	f002 fd2a 	bl	8005b94 <HAL_TIM_Encoder_Start>
	 HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8003140:	213c      	movs	r1, #60	; 0x3c
 8003142:	4812      	ldr	r0, [pc, #72]	; (800318c <motor_start+0x90>)
 8003144:	f002 fd26 	bl	8005b94 <HAL_TIM_Encoder_Start>
	 HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8003148:	213c      	movs	r1, #60	; 0x3c
 800314a:	4811      	ldr	r0, [pc, #68]	; (8003190 <motor_start+0x94>)
 800314c:	f002 fd22 	bl	8005b94 <HAL_TIM_Encoder_Start>
	 HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8003150:	213c      	movs	r1, #60	; 0x3c
 8003152:	4810      	ldr	r0, [pc, #64]	; (8003194 <motor_start+0x98>)
 8003154:	f002 fd1e 	bl	8005b94 <HAL_TIM_Encoder_Start>

	 //定时器先清零
	 __HAL_TIM_SET_COUNTER(&htim2,0);
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <motor_start+0x94>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2200      	movs	r2, #0
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
	 __HAL_TIM_SET_COUNTER(&htim3,0);
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <motor_start+0x8c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
	 __HAL_TIM_SET_COUNTER(&htim4,0);
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <motor_start+0x90>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2200      	movs	r2, #0
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
	 __HAL_TIM_SET_COUNTER(&htim8,0);
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <motor_start+0x98>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2200      	movs	r2, #0
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40020000 	.word	0x40020000
 8003180:	20000614 	.word	0x20000614
 8003184:	200004d4 	.word	0x200004d4
 8003188:	20000514 	.word	0x20000514
 800318c:	20000454 	.word	0x20000454
 8003190:	20000654 	.word	0x20000654
 8003194:	20000414 	.word	0x20000414

08003198 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_MspInit+0x4c>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <HAL_MspInit+0x4c>)
 80031a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ac:	6453      	str	r3, [r2, #68]	; 0x44
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <HAL_MspInit+0x4c>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_MspInit+0x4c>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <HAL_MspInit+0x4c>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_MspInit+0x4c>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800

080031e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fa:	e7fe      	b.n	80031fa <HardFault_Handler+0x4>

080031fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <MemManage_Handler+0x4>

08003202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003206:	e7fe      	b.n	8003206 <BusFault_Handler+0x4>

08003208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800320c:	e7fe      	b.n	800320c <UsageFault_Handler+0x4>

0800320e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <DMA1_Stream5_IRQHandler+0x10>)
 800324e:	f001 fa79 	bl	8004744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200006d4 	.word	0x200006d4

0800325c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003260:	4803      	ldr	r0, [pc, #12]	; (8003270 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003262:	f002 fd15 	bl	8005c90 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003266:	4803      	ldr	r0, [pc, #12]	; (8003274 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003268:	f002 fd12 	bl	8005c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}
 8003270:	200005d4 	.word	0x200005d4
 8003274:	20000494 	.word	0x20000494

08003278 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800327c:	4802      	ldr	r0, [pc, #8]	; (8003288 <USART3_IRQHandler+0x10>)
 800327e:	f003 fc23 	bl	8006ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000794 	.word	0x20000794

0800328c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003290:	4802      	ldr	r0, [pc, #8]	; (800329c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003292:	f002 fcfd 	bl	8005c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000414 	.word	0x20000414

080032a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80032a4:	4802      	ldr	r0, [pc, #8]	; (80032b0 <DMA2_Stream1_IRQHandler+0x10>)
 80032a6:	f001 fa4d 	bl	8004744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000734 	.word	0x20000734

080032b4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <DMA2_Stream3_IRQHandler+0x10>)
 80032ba:	f001 fa43 	bl	8004744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200003b4 	.word	0x200003b4

080032c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032d0:	4a14      	ldr	r2, [pc, #80]	; (8003324 <_sbrk+0x5c>)
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <_sbrk+0x60>)
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <_sbrk+0x64>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <_sbrk+0x64>)
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <_sbrk+0x68>)
 80032e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <_sbrk+0x64>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d207      	bcs.n	8003308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032f8:	f004 fa4e 	bl	8007798 <__errno>
 80032fc:	4602      	mov	r2, r0
 80032fe:	230c      	movs	r3, #12
 8003300:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003302:	f04f 33ff 	mov.w	r3, #4294967295
 8003306:	e009      	b.n	800331c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <_sbrk+0x64>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800330e:	4b07      	ldr	r3, [pc, #28]	; (800332c <_sbrk+0x64>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	4a05      	ldr	r2, [pc, #20]	; (800332c <_sbrk+0x64>)
 8003318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800331a:	68fb      	ldr	r3, [r7, #12]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	20020000 	.word	0x20020000
 8003328:	00000400 	.word	0x00000400
 800332c:	20000318 	.word	0x20000318
 8003330:	20000860 	.word	0x20000860

08003334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <SystemInit+0x28>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <SystemInit+0x28>)
 8003340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <SystemInit+0x28>)
 800334a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800334e:	609a      	str	r2, [r3, #8]
#endif
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003366:	f107 0308 	add.w	r3, r7, #8
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003374:	463b      	mov	r3, r7
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800337c:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <MX_TIM1_Init+0x98>)
 800337e:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <MX_TIM1_Init+0x9c>)
 8003380:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <MX_TIM1_Init+0x98>)
 8003384:	22a7      	movs	r2, #167	; 0xa7
 8003386:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003388:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <MX_TIM1_Init+0x98>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <MX_TIM1_Init+0x98>)
 8003390:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003394:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <MX_TIM1_Init+0x98>)
 8003398:	2200      	movs	r2, #0
 800339a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800339c:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <MX_TIM1_Init+0x98>)
 800339e:	2200      	movs	r2, #0
 80033a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <MX_TIM1_Init+0x98>)
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033a8:	4813      	ldr	r0, [pc, #76]	; (80033f8 <MX_TIM1_Init+0x98>)
 80033aa:	f002 fa9f 	bl	80058ec <HAL_TIM_Base_Init>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80033b4:	f7fe fbe8 	bl	8001b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033be:	f107 0308 	add.w	r3, r7, #8
 80033c2:	4619      	mov	r1, r3
 80033c4:	480c      	ldr	r0, [pc, #48]	; (80033f8 <MX_TIM1_Init+0x98>)
 80033c6:	f002 fe31 	bl	800602c <HAL_TIM_ConfigClockSource>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80033d0:	f7fe fbda 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d8:	2300      	movs	r3, #0
 80033da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033dc:	463b      	mov	r3, r7
 80033de:	4619      	mov	r1, r3
 80033e0:	4805      	ldr	r0, [pc, #20]	; (80033f8 <MX_TIM1_Init+0x98>)
 80033e2:	f003 fa13 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80033ec:	f7fe fbcc 	bl	8001b88 <Error_Handler>
  }

}
 80033f0:	bf00      	nop
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	200005d4 	.word	0x200005d4
 80033fc:	40010000 	.word	0x40010000

08003400 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003406:	f107 030c 	add.w	r3, r7, #12
 800340a:	2224      	movs	r2, #36	; 0x24
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f004 f9ec 	bl	80077ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003414:	1d3b      	adds	r3, r7, #4
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800341c:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <MX_TIM2_Init+0xa4>)
 800341e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003422:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <MX_TIM2_Init+0xa4>)
 8003426:	2200      	movs	r2, #0
 8003428:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342a:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <MX_TIM2_Init+0xa4>)
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003430:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <MX_TIM2_Init+0xa4>)
 8003432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003436:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003438:	4b1a      	ldr	r3, [pc, #104]	; (80034a4 <MX_TIM2_Init+0xa4>)
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800343e:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <MX_TIM2_Init+0xa4>)
 8003440:	2280      	movs	r2, #128	; 0x80
 8003442:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003444:	2303      	movs	r3, #3
 8003446:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800344c:	2301      	movs	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800345c:	2301      	movs	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003460:	2300      	movs	r3, #0
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	4619      	mov	r1, r3
 800346e:	480d      	ldr	r0, [pc, #52]	; (80034a4 <MX_TIM2_Init+0xa4>)
 8003470:	f002 fafe 	bl	8005a70 <HAL_TIM_Encoder_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800347a:	f7fe fb85 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003486:	1d3b      	adds	r3, r7, #4
 8003488:	4619      	mov	r1, r3
 800348a:	4806      	ldr	r0, [pc, #24]	; (80034a4 <MX_TIM2_Init+0xa4>)
 800348c:	f003 f9be 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003496:	f7fe fb77 	bl	8001b88 <Error_Handler>
  }

}
 800349a:	bf00      	nop
 800349c:	3730      	adds	r7, #48	; 0x30
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000654 	.word	0x20000654

080034a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08c      	sub	sp, #48	; 0x30
 80034ac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80034ae:	f107 030c 	add.w	r3, r7, #12
 80034b2:	2224      	movs	r2, #36	; 0x24
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f004 f998 	bl	80077ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034bc:	1d3b      	adds	r3, r7, #4
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80034c4:	4b20      	ldr	r3, [pc, #128]	; (8003548 <MX_TIM3_Init+0xa0>)
 80034c6:	4a21      	ldr	r2, [pc, #132]	; (800354c <MX_TIM3_Init+0xa4>)
 80034c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80034ca:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <MX_TIM3_Init+0xa0>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d0:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <MX_TIM3_Init+0xa0>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <MX_TIM3_Init+0xa0>)
 80034d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034de:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <MX_TIM3_Init+0xa0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <MX_TIM3_Init+0xa0>)
 80034e6:	2280      	movs	r2, #128	; 0x80
 80034e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80034ea:	2303      	movs	r3, #3
 80034ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034f2:	2301      	movs	r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80034fa:	230a      	movs	r3, #10
 80034fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003502:	2301      	movs	r3, #1
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003506:	2300      	movs	r3, #0
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800350a:	230a      	movs	r3, #10
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800350e:	f107 030c 	add.w	r3, r7, #12
 8003512:	4619      	mov	r1, r3
 8003514:	480c      	ldr	r0, [pc, #48]	; (8003548 <MX_TIM3_Init+0xa0>)
 8003516:	f002 faab 	bl	8005a70 <HAL_TIM_Encoder_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003520:	f7fe fb32 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003524:	2300      	movs	r3, #0
 8003526:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003528:	2300      	movs	r3, #0
 800352a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4805      	ldr	r0, [pc, #20]	; (8003548 <MX_TIM3_Init+0xa0>)
 8003532:	f003 f96b 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800353c:	f7fe fb24 	bl	8001b88 <Error_Handler>
  }

}
 8003540:	bf00      	nop
 8003542:	3730      	adds	r7, #48	; 0x30
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000514 	.word	0x20000514
 800354c:	40000400 	.word	0x40000400

08003550 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	; 0x30
 8003554:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003556:	f107 030c 	add.w	r3, r7, #12
 800355a:	2224      	movs	r2, #36	; 0x24
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f004 f944 	bl	80077ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <MX_TIM4_Init+0xa0>)
 800356e:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <MX_TIM4_Init+0xa4>)
 8003570:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003572:	4b1f      	ldr	r3, [pc, #124]	; (80035f0 <MX_TIM4_Init+0xa0>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <MX_TIM4_Init+0xa0>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800357e:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <MX_TIM4_Init+0xa0>)
 8003580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003584:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <MX_TIM4_Init+0xa0>)
 8003588:	2200      	movs	r2, #0
 800358a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <MX_TIM4_Init+0xa0>)
 800358e:	2280      	movs	r2, #128	; 0x80
 8003590:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003592:	2303      	movs	r3, #3
 8003594:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800359a:	2301      	movs	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035aa:	2301      	movs	r3, #1
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035ae:	2300      	movs	r3, #0
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	4619      	mov	r1, r3
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <MX_TIM4_Init+0xa0>)
 80035be:	f002 fa57 	bl	8005a70 <HAL_TIM_Encoder_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80035c8:	f7fe fade 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4805      	ldr	r0, [pc, #20]	; (80035f0 <MX_TIM4_Init+0xa0>)
 80035da:	f003 f917 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80035e4:	f7fe fad0 	bl	8001b88 <Error_Handler>
  }

}
 80035e8:	bf00      	nop
 80035ea:	3730      	adds	r7, #48	; 0x30
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000454 	.word	0x20000454
 80035f4:	40000800 	.word	0x40000800

080035f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08e      	sub	sp, #56	; 0x38
 80035fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800360c:	f107 0320 	add.w	r3, r7, #32
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
 8003624:	615a      	str	r2, [r3, #20]
 8003626:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8003628:	4b37      	ldr	r3, [pc, #220]	; (8003708 <MX_TIM5_Init+0x110>)
 800362a:	4a38      	ldr	r2, [pc, #224]	; (800370c <MX_TIM5_Init+0x114>)
 800362c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <MX_TIM5_Init+0x110>)
 8003630:	2253      	movs	r2, #83	; 0x53
 8003632:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003634:	4b34      	ldr	r3, [pc, #208]	; (8003708 <MX_TIM5_Init+0x110>)
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 800363a:	4b33      	ldr	r3, [pc, #204]	; (8003708 <MX_TIM5_Init+0x110>)
 800363c:	2263      	movs	r2, #99	; 0x63
 800363e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <MX_TIM5_Init+0x110>)
 8003642:	2200      	movs	r2, #0
 8003644:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003646:	4b30      	ldr	r3, [pc, #192]	; (8003708 <MX_TIM5_Init+0x110>)
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800364c:	482e      	ldr	r0, [pc, #184]	; (8003708 <MX_TIM5_Init+0x110>)
 800364e:	f002 f94d 	bl	80058ec <HAL_TIM_Base_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8003658:	f7fe fa96 	bl	8001b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800365c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003666:	4619      	mov	r1, r3
 8003668:	4827      	ldr	r0, [pc, #156]	; (8003708 <MX_TIM5_Init+0x110>)
 800366a:	f002 fcdf 	bl	800602c <HAL_TIM_ConfigClockSource>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8003674:	f7fe fa88 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003678:	4823      	ldr	r0, [pc, #140]	; (8003708 <MX_TIM5_Init+0x110>)
 800367a:	f002 f986 	bl	800598a <HAL_TIM_PWM_Init>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8003684:	f7fe fa80 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003690:	f107 0320 	add.w	r3, r7, #32
 8003694:	4619      	mov	r1, r3
 8003696:	481c      	ldr	r0, [pc, #112]	; (8003708 <MX_TIM5_Init+0x110>)
 8003698:	f003 f8b8 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80036a2:	f7fe fa71 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036a6:	2360      	movs	r3, #96	; 0x60
 80036a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	2204      	movs	r2, #4
 80036ba:	4619      	mov	r1, r3
 80036bc:	4812      	ldr	r0, [pc, #72]	; (8003708 <MX_TIM5_Init+0x110>)
 80036be:	f002 fbef 	bl	8005ea0 <HAL_TIM_PWM_ConfigChannel>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80036c8:	f7fe fa5e 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	2208      	movs	r2, #8
 80036d0:	4619      	mov	r1, r3
 80036d2:	480d      	ldr	r0, [pc, #52]	; (8003708 <MX_TIM5_Init+0x110>)
 80036d4:	f002 fbe4 	bl	8005ea0 <HAL_TIM_PWM_ConfigChannel>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 80036de:	f7fe fa53 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	220c      	movs	r2, #12
 80036e6:	4619      	mov	r1, r3
 80036e8:	4807      	ldr	r0, [pc, #28]	; (8003708 <MX_TIM5_Init+0x110>)
 80036ea:	f002 fbd9 	bl	8005ea0 <HAL_TIM_PWM_ConfigChannel>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM5_Init+0x100>
  {
    Error_Handler();
 80036f4:	f7fe fa48 	bl	8001b88 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 80036f8:	4803      	ldr	r0, [pc, #12]	; (8003708 <MX_TIM5_Init+0x110>)
 80036fa:	f000 fb5f 	bl	8003dbc <HAL_TIM_MspPostInit>

}
 80036fe:	bf00      	nop
 8003700:	3738      	adds	r7, #56	; 0x38
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200004d4 	.word	0x200004d4
 800370c:	40000c00 	.word	0x40000c00

08003710 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003716:	463b      	mov	r3, r7
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <MX_TIM6_Init+0x64>)
 8003720:	4a15      	ldr	r2, [pc, #84]	; (8003778 <MX_TIM6_Init+0x68>)
 8003722:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <MX_TIM6_Init+0x64>)
 8003726:	2253      	movs	r2, #83	; 0x53
 8003728:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <MX_TIM6_Init+0x64>)
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000-1;
 8003730:	4b10      	ldr	r3, [pc, #64]	; (8003774 <MX_TIM6_Init+0x64>)
 8003732:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003736:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <MX_TIM6_Init+0x64>)
 800373a:	2280      	movs	r2, #128	; 0x80
 800373c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800373e:	480d      	ldr	r0, [pc, #52]	; (8003774 <MX_TIM6_Init+0x64>)
 8003740:	f002 f8d4 	bl	80058ec <HAL_TIM_Base_Init>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800374a:	f7fe fa1d 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800374e:	2300      	movs	r3, #0
 8003750:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003756:	463b      	mov	r3, r7
 8003758:	4619      	mov	r1, r3
 800375a:	4806      	ldr	r0, [pc, #24]	; (8003774 <MX_TIM6_Init+0x64>)
 800375c:	f003 f856 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003766:	f7fe fa0f 	bl	8001b88 <Error_Handler>
  }

}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000594 	.word	0x20000594
 8003778:	40001000 	.word	0x40001000

0800377c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003782:	463b      	mov	r3, r7
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <MX_TIM7_Init+0x64>)
 800378c:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <MX_TIM7_Init+0x68>)
 800378e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8400-1;
 8003790:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <MX_TIM7_Init+0x64>)
 8003792:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003796:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <MX_TIM7_Init+0x64>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <MX_TIM7_Init+0x64>)
 80037a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80037a4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037a6:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <MX_TIM7_Init+0x64>)
 80037a8:	2280      	movs	r2, #128	; 0x80
 80037aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80037ac:	480c      	ldr	r0, [pc, #48]	; (80037e0 <MX_TIM7_Init+0x64>)
 80037ae:	f002 f89d 	bl	80058ec <HAL_TIM_Base_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80037b8:	f7fe f9e6 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037bc:	2300      	movs	r3, #0
 80037be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80037c4:	463b      	mov	r3, r7
 80037c6:	4619      	mov	r1, r3
 80037c8:	4805      	ldr	r0, [pc, #20]	; (80037e0 <MX_TIM7_Init+0x64>)
 80037ca:	f003 f81f 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80037d4:	f7fe f9d8 	bl	8001b88 <Error_Handler>
  }

}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000694 	.word	0x20000694
 80037e4:	40001400 	.word	0x40001400

080037e8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08c      	sub	sp, #48	; 0x30
 80037ec:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	2224      	movs	r2, #36	; 0x24
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f003 fff8 	bl	80077ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8003804:	4b22      	ldr	r3, [pc, #136]	; (8003890 <MX_TIM8_Init+0xa8>)
 8003806:	4a23      	ldr	r2, [pc, #140]	; (8003894 <MX_TIM8_Init+0xac>)
 8003808:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800380a:	4b21      	ldr	r3, [pc, #132]	; (8003890 <MX_TIM8_Init+0xa8>)
 800380c:	2200      	movs	r2, #0
 800380e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <MX_TIM8_Init+0xa8>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <MX_TIM8_Init+0xa8>)
 8003818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800381c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <MX_TIM8_Init+0xa8>)
 8003820:	2200      	movs	r2, #0
 8003822:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <MX_TIM8_Init+0xa8>)
 8003826:	2200      	movs	r2, #0
 8003828:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <MX_TIM8_Init+0xa8>)
 800382c:	2280      	movs	r2, #128	; 0x80
 800382e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003830:	2303      	movs	r3, #3
 8003832:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003838:	2301      	movs	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003840:	230a      	movs	r3, #10
 8003842:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003844:	2300      	movs	r3, #0
 8003846:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003848:	2301      	movs	r3, #1
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800384c:	2300      	movs	r3, #0
 800384e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8003850:	230a      	movs	r3, #10
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	4619      	mov	r1, r3
 800385a:	480d      	ldr	r0, [pc, #52]	; (8003890 <MX_TIM8_Init+0xa8>)
 800385c:	f002 f908 	bl	8005a70 <HAL_TIM_Encoder_Init>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003866:	f7fe f98f 	bl	8001b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4806      	ldr	r0, [pc, #24]	; (8003890 <MX_TIM8_Init+0xa8>)
 8003878:	f002 ffc8 	bl	800680c <HAL_TIMEx_MasterConfigSynchronization>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8003882:	f7fe f981 	bl	8001b88 <Error_Handler>
  }

}
 8003886:	bf00      	nop
 8003888:	3730      	adds	r7, #48	; 0x30
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000414 	.word	0x20000414
 8003894:	40010400 	.word	0x40010400

08003898 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08c      	sub	sp, #48	; 0x30
 800389c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800389e:	f107 0320 	add.w	r3, r7, #32
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	60da      	str	r2, [r3, #12]
 80038b8:	611a      	str	r2, [r3, #16]
 80038ba:	615a      	str	r2, [r3, #20]
 80038bc:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 80038be:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <MX_TIM9_Init+0xd0>)
 80038c0:	4a2a      	ldr	r2, [pc, #168]	; (800396c <MX_TIM9_Init+0xd4>)
 80038c2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 80038c4:	4b28      	ldr	r3, [pc, #160]	; (8003968 <MX_TIM9_Init+0xd0>)
 80038c6:	2253      	movs	r2, #83	; 0x53
 80038c8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ca:	4b27      	ldr	r3, [pc, #156]	; (8003968 <MX_TIM9_Init+0xd0>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <MX_TIM9_Init+0xd0>)
 80038d2:	2263      	movs	r2, #99	; 0x63
 80038d4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d6:	4b24      	ldr	r3, [pc, #144]	; (8003968 <MX_TIM9_Init+0xd0>)
 80038d8:	2200      	movs	r2, #0
 80038da:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038dc:	4b22      	ldr	r3, [pc, #136]	; (8003968 <MX_TIM9_Init+0xd0>)
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80038e2:	4821      	ldr	r0, [pc, #132]	; (8003968 <MX_TIM9_Init+0xd0>)
 80038e4:	f002 f802 	bl	80058ec <HAL_TIM_Base_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 80038ee:	f7fe f94b 	bl	8001b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80038f8:	f107 0320 	add.w	r3, r7, #32
 80038fc:	4619      	mov	r1, r3
 80038fe:	481a      	ldr	r0, [pc, #104]	; (8003968 <MX_TIM9_Init+0xd0>)
 8003900:	f002 fb94 	bl	800602c <HAL_TIM_ConfigClockSource>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800390a:	f7fe f93d 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800390e:	4816      	ldr	r0, [pc, #88]	; (8003968 <MX_TIM9_Init+0xd0>)
 8003910:	f002 f83b 	bl	800598a <HAL_TIM_PWM_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 800391a:	f7fe f935 	bl	8001b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800391e:	2360      	movs	r3, #96	; 0x60
 8003920:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	2200      	movs	r2, #0
 8003932:	4619      	mov	r1, r3
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <MX_TIM9_Init+0xd0>)
 8003936:	f002 fab3 	bl	8005ea0 <HAL_TIM_PWM_ConfigChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8003940:	f7fe f922 	bl	8001b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003944:	1d3b      	adds	r3, r7, #4
 8003946:	2204      	movs	r2, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4807      	ldr	r0, [pc, #28]	; (8003968 <MX_TIM9_Init+0xd0>)
 800394c:	f002 faa8 	bl	8005ea0 <HAL_TIM_PWM_ConfigChannel>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 8003956:	f7fe f917 	bl	8001b88 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800395a:	4803      	ldr	r0, [pc, #12]	; (8003968 <MX_TIM9_Init+0xd0>)
 800395c:	f000 fa2e 	bl	8003dbc <HAL_TIM_MspPostInit>

}
 8003960:	bf00      	nop
 8003962:	3730      	adds	r7, #48	; 0x30
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000614 	.word	0x20000614
 800396c:	40014000 	.word	0x40014000

08003970 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8003974:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <MX_TIM10_Init+0x40>)
 8003976:	4a0f      	ldr	r2, [pc, #60]	; (80039b4 <MX_TIM10_Init+0x44>)
 8003978:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16800-1;
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <MX_TIM10_Init+0x40>)
 800397c:	f244 129f 	movw	r2, #16799	; 0x419f
 8003980:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003982:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <MX_TIM10_Init+0x40>)
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8003988:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <MX_TIM10_Init+0x40>)
 800398a:	f242 720f 	movw	r2, #9999	; 0x270f
 800398e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <MX_TIM10_Init+0x40>)
 8003992:	2200      	movs	r2, #0
 8003994:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <MX_TIM10_Init+0x40>)
 8003998:	2280      	movs	r2, #128	; 0x80
 800399a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800399c:	4804      	ldr	r0, [pc, #16]	; (80039b0 <MX_TIM10_Init+0x40>)
 800399e:	f001 ffa5 	bl	80058ec <HAL_TIM_Base_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80039a8:	f7fe f8ee 	bl	8001b88 <Error_Handler>
  }

}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20000494 	.word	0x20000494
 80039b4:	40014400 	.word	0x40014400

080039b8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 80039bc:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <MX_TIM11_Init+0x40>)
 80039be:	4a0f      	ldr	r2, [pc, #60]	; (80039fc <MX_TIM11_Init+0x44>)
 80039c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800-1;
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <MX_TIM11_Init+0x40>)
 80039c4:	f244 129f 	movw	r2, #16799	; 0x419f
 80039c8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ca:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <MX_TIM11_Init+0x40>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 50000-1;
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <MX_TIM11_Init+0x40>)
 80039d2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80039d6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d8:	4b07      	ldr	r3, [pc, #28]	; (80039f8 <MX_TIM11_Init+0x40>)
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <MX_TIM11_Init+0x40>)
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80039e4:	4804      	ldr	r0, [pc, #16]	; (80039f8 <MX_TIM11_Init+0x40>)
 80039e6:	f001 ff81 	bl	80058ec <HAL_TIM_Base_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80039f0:	f7fe f8ca 	bl	8001b88 <Error_Handler>
  }

}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000554 	.word	0x20000554
 80039fc:	40014800 	.word	0x40014800

08003a00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a4e      	ldr	r2, [pc, #312]	; (8003b48 <HAL_TIM_Base_MspInit+0x148>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d116      	bne.n	8003a40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	4b4d      	ldr	r3, [pc, #308]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a4c      	ldr	r2, [pc, #304]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b4a      	ldr	r3, [pc, #296]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2100      	movs	r1, #0
 8003a32:	2019      	movs	r0, #25
 8003a34:	f000 fd27 	bl	8004486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003a38:	2019      	movs	r0, #25
 8003a3a:	f000 fd40 	bl	80044be <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003a3e:	e07e      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM5)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a42      	ldr	r2, [pc, #264]	; (8003b50 <HAL_TIM_Base_MspInit+0x150>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10e      	bne.n	8003a68 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]
 8003a4e:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a3e      	ldr	r2, [pc, #248]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b3c      	ldr	r3, [pc, #240]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	623b      	str	r3, [r7, #32]
 8003a64:	6a3b      	ldr	r3, [r7, #32]
}
 8003a66:	e06a      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM6)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a39      	ldr	r2, [pc, #228]	; (8003b54 <HAL_TIM_Base_MspInit+0x154>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	4b35      	ldr	r3, [pc, #212]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003a7c:	f043 0310 	orr.w	r3, r3, #16
 8003a80:	6413      	str	r3, [r2, #64]	; 0x40
 8003a82:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	61fb      	str	r3, [r7, #28]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
}
 8003a8e:	e056      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM7)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a30      	ldr	r2, [pc, #192]	; (8003b58 <HAL_TIM_Base_MspInit+0x158>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a2a      	ldr	r2, [pc, #168]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003aa4:	f043 0320 	orr.w	r3, r3, #32
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aaa:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	69bb      	ldr	r3, [r7, #24]
}
 8003ab6:	e042      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM9)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <HAL_TIM_Base_MspInit+0x15c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	4a20      	ldr	r2, [pc, #128]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
}
 8003ade:	e02e      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM10)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1e      	ldr	r2, [pc, #120]	; (8003b60 <HAL_TIM_Base_MspInit+0x160>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d116      	bne.n	8003b18 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	6453      	str	r3, [r2, #68]	; 0x44
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2100      	movs	r1, #0
 8003b0a:	2019      	movs	r0, #25
 8003b0c:	f000 fcbb 	bl	8004486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003b10:	2019      	movs	r0, #25
 8003b12:	f000 fcd4 	bl	80044be <HAL_NVIC_EnableIRQ>
}
 8003b16:	e012      	b.n	8003b3e <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM11)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a11      	ldr	r2, [pc, #68]	; (8003b64 <HAL_TIM_Base_MspInit+0x164>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d10d      	bne.n	8003b3e <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b30:	6453      	str	r3, [r2, #68]	; 0x44
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_TIM_Base_MspInit+0x14c>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
}
 8003b3e:	bf00      	nop
 8003b40:	3728      	adds	r7, #40	; 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40010000 	.word	0x40010000
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40001000 	.word	0x40001000
 8003b58:	40001400 	.word	0x40001400
 8003b5c:	40014000 	.word	0x40014000
 8003b60:	40014400 	.word	0x40014400
 8003b64:	40014800 	.word	0x40014800

08003b68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b092      	sub	sp, #72	; 0x48
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b88:	d14b      	bne.n	8003c22 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b8e:	4b84      	ldr	r3, [pc, #528]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	4a83      	ldr	r2, [pc, #524]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9a:	4b81      	ldr	r3, [pc, #516]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003baa:	4b7d      	ldr	r3, [pc, #500]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a7c      	ldr	r2, [pc, #496]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b7a      	ldr	r3, [pc, #488]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc6:	4b76      	ldr	r3, [pc, #472]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4a75      	ldr	r2, [pc, #468]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd2:	4b73      	ldr	r3, [pc, #460]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be4:	2302      	movs	r3, #2
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bec:	2300      	movs	r3, #0
 8003bee:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	486a      	ldr	r0, [pc, #424]	; (8003da4 <HAL_TIM_Encoder_MspInit+0x23c>)
 8003bfc:	f001 f80a 	bl	8004c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c00:	2308      	movs	r3, #8
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c04:	2302      	movs	r3, #2
 8003c06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c10:	2301      	movs	r3, #1
 8003c12:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4863      	ldr	r0, [pc, #396]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x240>)
 8003c1c:	f000 fffa 	bl	8004c14 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003c20:	e0ba      	b.n	8003d98 <HAL_TIM_Encoder_MspInit+0x230>
  else if(tim_encoderHandle->Instance==TIM3)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a61      	ldr	r2, [pc, #388]	; (8003dac <HAL_TIM_Encoder_MspInit+0x244>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d14a      	bne.n	8003cc2 <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c30:	4b5b      	ldr	r3, [pc, #364]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	4a5a      	ldr	r2, [pc, #360]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003c36:	f043 0302 	orr.w	r3, r3, #2
 8003c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3c:	4b58      	ldr	r3, [pc, #352]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c48:	2300      	movs	r3, #0
 8003c4a:	623b      	str	r3, [r7, #32]
 8003c4c:	4b54      	ldr	r3, [pc, #336]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	4a53      	ldr	r2, [pc, #332]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6313      	str	r3, [r2, #48]	; 0x30
 8003c58:	4b51      	ldr	r3, [pc, #324]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c64:	2300      	movs	r3, #0
 8003c66:	61fb      	str	r3, [r7, #28]
 8003c68:	4b4d      	ldr	r3, [pc, #308]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	4a4c      	ldr	r2, [pc, #304]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003c6e:	f043 0302 	orr.w	r3, r3, #2
 8003c72:	6313      	str	r3, [r2, #48]	; 0x30
 8003c74:	4b4a      	ldr	r3, [pc, #296]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c80:	2340      	movs	r3, #64	; 0x40
 8003c82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c84:	2302      	movs	r3, #2
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c90:	2302      	movs	r3, #2
 8003c92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4842      	ldr	r0, [pc, #264]	; (8003da4 <HAL_TIM_Encoder_MspInit+0x23c>)
 8003c9c:	f000 ffba 	bl	8004c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cac:	2300      	movs	r3, #0
 8003cae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003cb8:	4619      	mov	r1, r3
 8003cba:	483b      	ldr	r0, [pc, #236]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x240>)
 8003cbc:	f000 ffaa 	bl	8004c14 <HAL_GPIO_Init>
}
 8003cc0:	e06a      	b.n	8003d98 <HAL_TIM_Encoder_MspInit+0x230>
  else if(tim_encoderHandle->Instance==TIM4)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a3a      	ldr	r2, [pc, #232]	; (8003db0 <HAL_TIM_Encoder_MspInit+0x248>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d12c      	bne.n	8003d26 <HAL_TIM_Encoder_MspInit+0x1be>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	4a32      	ldr	r2, [pc, #200]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003cd6:	f043 0304 	orr.w	r3, r3, #4
 8003cda:	6413      	str	r3, [r2, #64]	; 0x40
 8003cdc:	4b30      	ldr	r3, [pc, #192]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003cf2:	f043 0302 	orr.w	r3, r3, #2
 8003cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf8:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d04:	23c0      	movs	r3, #192	; 0xc0
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	2300      	movs	r3, #0
 8003d12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d14:	2302      	movs	r3, #2
 8003d16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4822      	ldr	r0, [pc, #136]	; (8003da8 <HAL_TIM_Encoder_MspInit+0x240>)
 8003d20:	f000 ff78 	bl	8004c14 <HAL_GPIO_Init>
}
 8003d24:	e038      	b.n	8003d98 <HAL_TIM_Encoder_MspInit+0x230>
  else if(tim_encoderHandle->Instance==TIM8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a22      	ldr	r2, [pc, #136]	; (8003db4 <HAL_TIM_Encoder_MspInit+0x24c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d133      	bne.n	8003d98 <HAL_TIM_Encoder_MspInit+0x230>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d38:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003d3a:	f043 0302 	orr.w	r3, r3, #2
 8003d3e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d54:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003d56:	f043 0304 	orr.w	r3, r3, #4
 8003d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5c:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <HAL_TIM_Encoder_MspInit+0x238>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d68:	23c0      	movs	r3, #192	; 0xc0
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d74:	2300      	movs	r3, #0
 8003d76:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d80:	4619      	mov	r1, r3
 8003d82:	480d      	ldr	r0, [pc, #52]	; (8003db8 <HAL_TIM_Encoder_MspInit+0x250>)
 8003d84:	f000 ff46 	bl	8004c14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	202c      	movs	r0, #44	; 0x2c
 8003d8e:	f000 fb7a 	bl	8004486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003d92:	202c      	movs	r0, #44	; 0x2c
 8003d94:	f000 fb93 	bl	80044be <HAL_NVIC_EnableIRQ>
}
 8003d98:	bf00      	nop
 8003d9a:	3748      	adds	r7, #72	; 0x48
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40020000 	.word	0x40020000
 8003da8:	40020400 	.word	0x40020400
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800
 8003db4:	40010400 	.word	0x40010400
 8003db8:	40020800 	.word	0x40020800

08003dbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <HAL_TIM_MspPostInit+0xb0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d11e      	bne.n	8003e1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <HAL_TIM_MspPostInit+0xb4>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <HAL_TIM_MspPostInit+0xb4>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_TIM_MspPostInit+0xb4>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003dfa:	230e      	movs	r3, #14
 8003dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfe:	2302      	movs	r3, #2
 8003e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e06:	2300      	movs	r3, #0
 8003e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0e:	f107 0314 	add.w	r3, r7, #20
 8003e12:	4619      	mov	r1, r3
 8003e14:	4817      	ldr	r0, [pc, #92]	; (8003e74 <HAL_TIM_MspPostInit+0xb8>)
 8003e16:	f000 fefd 	bl	8004c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003e1a:	e022      	b.n	8003e62 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM9)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <HAL_TIM_MspPostInit+0xbc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d11d      	bne.n	8003e62 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	4b11      	ldr	r3, [pc, #68]	; (8003e70 <HAL_TIM_MspPostInit+0xb4>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a10      	ldr	r2, [pc, #64]	; (8003e70 <HAL_TIM_MspPostInit+0xb4>)
 8003e30:	f043 0310 	orr.w	r3, r3, #16
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <HAL_TIM_MspPostInit+0xb4>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e42:	2360      	movs	r3, #96	; 0x60
 8003e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e46:	2302      	movs	r3, #2
 8003e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003e52:	2303      	movs	r3, #3
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e56:	f107 0314 	add.w	r3, r7, #20
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4807      	ldr	r0, [pc, #28]	; (8003e7c <HAL_TIM_MspPostInit+0xc0>)
 8003e5e:	f000 fed9 	bl	8004c14 <HAL_GPIO_Init>
}
 8003e62:	bf00      	nop
 8003e64:	3728      	adds	r7, #40	; 0x28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40000c00 	.word	0x40000c00
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40020000 	.word	0x40020000
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40021000 	.word	0x40021000

08003e80 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003e86:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <MX_USART2_UART_Init+0x50>)
 8003e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e92:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003ea6:	220c      	movs	r2, #12
 8003ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003eb6:	4805      	ldr	r0, [pc, #20]	; (8003ecc <MX_USART2_UART_Init+0x4c>)
 8003eb8:	f002 fd38 	bl	800692c <HAL_UART_Init>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ec2:	f7fd fe61 	bl	8001b88 <Error_Handler>
  }

}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000814 	.word	0x20000814
 8003ed0:	40004400 	.word	0x40004400

08003ed4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <MX_USART3_UART_Init+0x4c>)
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <MX_USART3_UART_Init+0x50>)
 8003edc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <MX_USART3_UART_Init+0x4c>)
 8003ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ee4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <MX_USART3_UART_Init+0x4c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <MX_USART3_UART_Init+0x4c>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ef2:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <MX_USART3_UART_Init+0x4c>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <MX_USART3_UART_Init+0x4c>)
 8003efa:	220c      	movs	r2, #12
 8003efc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <MX_USART3_UART_Init+0x4c>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <MX_USART3_UART_Init+0x4c>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f0a:	4805      	ldr	r0, [pc, #20]	; (8003f20 <MX_USART3_UART_Init+0x4c>)
 8003f0c:	f002 fd0e 	bl	800692c <HAL_UART_Init>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003f16:	f7fd fe37 	bl	8001b88 <Error_Handler>
  }

}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000794 	.word	0x20000794
 8003f24:	40004800 	.word	0x40004800

08003f28 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <MX_USART6_UART_Init+0x4c>)
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <MX_USART6_UART_Init+0x50>)
 8003f30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <MX_USART6_UART_Init+0x4c>)
 8003f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <MX_USART6_UART_Init+0x4c>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <MX_USART6_UART_Init+0x4c>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003f46:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <MX_USART6_UART_Init+0x4c>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <MX_USART6_UART_Init+0x4c>)
 8003f4e:	220c      	movs	r2, #12
 8003f50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f52:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <MX_USART6_UART_Init+0x4c>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <MX_USART6_UART_Init+0x4c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003f5e:	4805      	ldr	r0, [pc, #20]	; (8003f74 <MX_USART6_UART_Init+0x4c>)
 8003f60:	f002 fce4 	bl	800692c <HAL_UART_Init>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003f6a:	f7fd fe0d 	bl	8001b88 <Error_Handler>
  }

}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200007d4 	.word	0x200007d4
 8003f78:	40011400 	.word	0x40011400

08003f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08e      	sub	sp, #56	; 0x38
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a7f      	ldr	r2, [pc, #508]	; (8004198 <HAL_UART_MspInit+0x21c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d15b      	bne.n	8004056 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	4b7e      	ldr	r3, [pc, #504]	; (800419c <HAL_UART_MspInit+0x220>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a7d      	ldr	r2, [pc, #500]	; (800419c <HAL_UART_MspInit+0x220>)
 8003fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
 8003fae:	4b7b      	ldr	r3, [pc, #492]	; (800419c <HAL_UART_MspInit+0x220>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	623b      	str	r3, [r7, #32]
 8003fb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	4b77      	ldr	r3, [pc, #476]	; (800419c <HAL_UART_MspInit+0x220>)
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	4a76      	ldr	r2, [pc, #472]	; (800419c <HAL_UART_MspInit+0x220>)
 8003fc4:	f043 0308 	orr.w	r3, r3, #8
 8003fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fca:	4b74      	ldr	r3, [pc, #464]	; (800419c <HAL_UART_MspInit+0x220>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003fd6:	2360      	movs	r3, #96	; 0x60
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fe6:	2307      	movs	r3, #7
 8003fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fee:	4619      	mov	r1, r3
 8003ff0:	486b      	ldr	r0, [pc, #428]	; (80041a0 <HAL_UART_MspInit+0x224>)
 8003ff2:	f000 fe0f 	bl	8004c14 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003ff6:	4b6b      	ldr	r3, [pc, #428]	; (80041a4 <HAL_UART_MspInit+0x228>)
 8003ff8:	4a6b      	ldr	r2, [pc, #428]	; (80041a8 <HAL_UART_MspInit+0x22c>)
 8003ffa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003ffc:	4b69      	ldr	r3, [pc, #420]	; (80041a4 <HAL_UART_MspInit+0x228>)
 8003ffe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004002:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004004:	4b67      	ldr	r3, [pc, #412]	; (80041a4 <HAL_UART_MspInit+0x228>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800400a:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <HAL_UART_MspInit+0x228>)
 800400c:	2200      	movs	r2, #0
 800400e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004010:	4b64      	ldr	r3, [pc, #400]	; (80041a4 <HAL_UART_MspInit+0x228>)
 8004012:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004016:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004018:	4b62      	ldr	r3, [pc, #392]	; (80041a4 <HAL_UART_MspInit+0x228>)
 800401a:	2200      	movs	r2, #0
 800401c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800401e:	4b61      	ldr	r3, [pc, #388]	; (80041a4 <HAL_UART_MspInit+0x228>)
 8004020:	2200      	movs	r2, #0
 8004022:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004024:	4b5f      	ldr	r3, [pc, #380]	; (80041a4 <HAL_UART_MspInit+0x228>)
 8004026:	f44f 7280 	mov.w	r2, #256	; 0x100
 800402a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800402c:	4b5d      	ldr	r3, [pc, #372]	; (80041a4 <HAL_UART_MspInit+0x228>)
 800402e:	2200      	movs	r2, #0
 8004030:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004032:	4b5c      	ldr	r3, [pc, #368]	; (80041a4 <HAL_UART_MspInit+0x228>)
 8004034:	2200      	movs	r2, #0
 8004036:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004038:	485a      	ldr	r0, [pc, #360]	; (80041a4 <HAL_UART_MspInit+0x228>)
 800403a:	f000 fa5b 	bl	80044f4 <HAL_DMA_Init>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004044:	f7fd fda0 	bl	8001b88 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a56      	ldr	r2, [pc, #344]	; (80041a4 <HAL_UART_MspInit+0x228>)
 800404c:	635a      	str	r2, [r3, #52]	; 0x34
 800404e:	4a55      	ldr	r2, [pc, #340]	; (80041a4 <HAL_UART_MspInit+0x228>)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004054:	e09b      	b.n	800418e <HAL_UART_MspInit+0x212>
  else if(uartHandle->Instance==USART3)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a54      	ldr	r2, [pc, #336]	; (80041ac <HAL_UART_MspInit+0x230>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d135      	bne.n	80040cc <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	4b4d      	ldr	r3, [pc, #308]	; (800419c <HAL_UART_MspInit+0x220>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	4a4c      	ldr	r2, [pc, #304]	; (800419c <HAL_UART_MspInit+0x220>)
 800406a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800406e:	6413      	str	r3, [r2, #64]	; 0x40
 8004070:	4b4a      	ldr	r3, [pc, #296]	; (800419c <HAL_UART_MspInit+0x220>)
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	4b46      	ldr	r3, [pc, #280]	; (800419c <HAL_UART_MspInit+0x220>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	4a45      	ldr	r2, [pc, #276]	; (800419c <HAL_UART_MspInit+0x220>)
 8004086:	f043 0308 	orr.w	r3, r3, #8
 800408a:	6313      	str	r3, [r2, #48]	; 0x30
 800408c:	4b43      	ldr	r3, [pc, #268]	; (800419c <HAL_UART_MspInit+0x220>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004098:	f44f 7340 	mov.w	r3, #768	; 0x300
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	2302      	movs	r3, #2
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a6:	2303      	movs	r3, #3
 80040a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040aa:	2307      	movs	r3, #7
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b2:	4619      	mov	r1, r3
 80040b4:	483a      	ldr	r0, [pc, #232]	; (80041a0 <HAL_UART_MspInit+0x224>)
 80040b6:	f000 fdad 	bl	8004c14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 4, 0);
 80040ba:	2200      	movs	r2, #0
 80040bc:	2104      	movs	r1, #4
 80040be:	2027      	movs	r0, #39	; 0x27
 80040c0:	f000 f9e1 	bl	8004486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80040c4:	2027      	movs	r0, #39	; 0x27
 80040c6:	f000 f9fa 	bl	80044be <HAL_NVIC_EnableIRQ>
}
 80040ca:	e060      	b.n	800418e <HAL_UART_MspInit+0x212>
  else if(uartHandle->Instance==USART6)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a37      	ldr	r2, [pc, #220]	; (80041b0 <HAL_UART_MspInit+0x234>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d15b      	bne.n	800418e <HAL_UART_MspInit+0x212>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	4b30      	ldr	r3, [pc, #192]	; (800419c <HAL_UART_MspInit+0x220>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	4a2f      	ldr	r2, [pc, #188]	; (800419c <HAL_UART_MspInit+0x220>)
 80040e0:	f043 0320 	orr.w	r3, r3, #32
 80040e4:	6453      	str	r3, [r2, #68]	; 0x44
 80040e6:	4b2d      	ldr	r3, [pc, #180]	; (800419c <HAL_UART_MspInit+0x220>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	4b29      	ldr	r3, [pc, #164]	; (800419c <HAL_UART_MspInit+0x220>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	4a28      	ldr	r2, [pc, #160]	; (800419c <HAL_UART_MspInit+0x220>)
 80040fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004100:	6313      	str	r3, [r2, #48]	; 0x30
 8004102:	4b26      	ldr	r3, [pc, #152]	; (800419c <HAL_UART_MspInit+0x220>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800410e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004114:	2302      	movs	r3, #2
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800411c:	2303      	movs	r3, #3
 800411e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004120:	2308      	movs	r3, #8
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004128:	4619      	mov	r1, r3
 800412a:	4822      	ldr	r0, [pc, #136]	; (80041b4 <HAL_UART_MspInit+0x238>)
 800412c:	f000 fd72 	bl	8004c14 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004130:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 8004132:	4a22      	ldr	r2, [pc, #136]	; (80041bc <HAL_UART_MspInit+0x240>)
 8004134:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 8004138:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800413c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 8004140:	2200      	movs	r2, #0
 8004142:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004144:	4b1c      	ldr	r3, [pc, #112]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 8004146:	2200      	movs	r2, #0
 8004148:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 800414c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004150:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004152:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 8004154:	2200      	movs	r2, #0
 8004156:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004158:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 800415a:	2200      	movs	r2, #0
 800415c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800415e:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 8004160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004164:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 8004168:	2200      	movs	r2, #0
 800416a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800416c:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 800416e:	2200      	movs	r2, #0
 8004170:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004172:	4811      	ldr	r0, [pc, #68]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 8004174:	f000 f9be 	bl	80044f4 <HAL_DMA_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_UART_MspInit+0x206>
      Error_Handler();
 800417e:	f7fd fd03 	bl	8001b88 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 8004186:	635a      	str	r2, [r3, #52]	; 0x34
 8004188:	4a0b      	ldr	r2, [pc, #44]	; (80041b8 <HAL_UART_MspInit+0x23c>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800418e:	bf00      	nop
 8004190:	3738      	adds	r7, #56	; 0x38
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40004400 	.word	0x40004400
 800419c:	40023800 	.word	0x40023800
 80041a0:	40020c00 	.word	0x40020c00
 80041a4:	200006d4 	.word	0x200006d4
 80041a8:	40026088 	.word	0x40026088
 80041ac:	40004800 	.word	0x40004800
 80041b0:	40011400 	.word	0x40011400
 80041b4:	40021800 	.word	0x40021800
 80041b8:	20000734 	.word	0x20000734
 80041bc:	40026428 	.word	0x40026428

080041c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041c6:	e003      	b.n	80041d0 <LoopCopyDataInit>

080041c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041ce:	3104      	adds	r1, #4

080041d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041d0:	480b      	ldr	r0, [pc, #44]	; (8004200 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041d2:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041d8:	d3f6      	bcc.n	80041c8 <CopyDataInit>
  ldr  r2, =_sbss
 80041da:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80041dc:	e002      	b.n	80041e4 <LoopFillZerobss>

080041de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80041de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80041e0:	f842 3b04 	str.w	r3, [r2], #4

080041e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80041e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80041e8:	d3f9      	bcc.n	80041de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80041ea:	f7ff f8a3 	bl	8003334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041ee:	f003 fad9 	bl	80077a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041f2:	f7fd f9b3 	bl	800155c <main>
  bx  lr    
 80041f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80041fc:	080094c0 	.word	0x080094c0
  ldr  r0, =_sdata
 8004200:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004204:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8004208:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 800420c:	2000085c 	.word	0x2000085c

08004210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004210:	e7fe      	b.n	8004210 <ADC_IRQHandler>
	...

08004214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <HAL_Init+0x40>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a0d      	ldr	r2, [pc, #52]	; (8004254 <HAL_Init+0x40>)
 800421e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_Init+0x40>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <HAL_Init+0x40>)
 800422a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800422e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004230:	4b08      	ldr	r3, [pc, #32]	; (8004254 <HAL_Init+0x40>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a07      	ldr	r2, [pc, #28]	; (8004254 <HAL_Init+0x40>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800423c:	2003      	movs	r0, #3
 800423e:	f000 f917 	bl	8004470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004242:	2000      	movs	r0, #0
 8004244:	f000 f808 	bl	8004258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004248:	f7fe ffa6 	bl	8003198 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023c00 	.word	0x40023c00

08004258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_InitTick+0x54>)
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b12      	ldr	r3, [pc, #72]	; (80042b0 <HAL_InitTick+0x58>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	4619      	mov	r1, r3
 800426a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800426e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f92f 	bl	80044da <HAL_SYSTICK_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e00e      	b.n	80042a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b0f      	cmp	r3, #15
 800428a:	d80a      	bhi.n	80042a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800428c:	2200      	movs	r2, #0
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	f04f 30ff 	mov.w	r0, #4294967295
 8004294:	f000 f8f7 	bl	8004486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004298:	4a06      	ldr	r2, [pc, #24]	; (80042b4 <HAL_InitTick+0x5c>)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000028 	.word	0x20000028
 80042b0:	20000030 	.word	0x20000030
 80042b4:	2000002c 	.word	0x2000002c

080042b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return uwTick;
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_GetTick+0x14>)
 80042be:	681b      	ldr	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000854 	.word	0x20000854

080042d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <__NVIC_SetPriorityGrouping+0x44>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042ec:	4013      	ands	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004302:	4a04      	ldr	r2, [pc, #16]	; (8004314 <__NVIC_SetPriorityGrouping+0x44>)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	60d3      	str	r3, [r2, #12]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <__NVIC_GetPriorityGrouping+0x18>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	0a1b      	lsrs	r3, r3, #8
 8004322:	f003 0307 	and.w	r3, r3, #7
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	2b00      	cmp	r3, #0
 8004344:	db0b      	blt.n	800435e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	4907      	ldr	r1, [pc, #28]	; (800436c <__NVIC_EnableIRQ+0x38>)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2001      	movs	r0, #1
 8004356:	fa00 f202 	lsl.w	r2, r0, r2
 800435a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000e100 	.word	0xe000e100

08004370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	6039      	str	r1, [r7, #0]
 800437a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004380:	2b00      	cmp	r3, #0
 8004382:	db0a      	blt.n	800439a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	490c      	ldr	r1, [pc, #48]	; (80043bc <__NVIC_SetPriority+0x4c>)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	0112      	lsls	r2, r2, #4
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	440b      	add	r3, r1
 8004394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004398:	e00a      	b.n	80043b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4908      	ldr	r1, [pc, #32]	; (80043c0 <__NVIC_SetPriority+0x50>)
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	3b04      	subs	r3, #4
 80043a8:	0112      	lsls	r2, r2, #4
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	440b      	add	r3, r1
 80043ae:	761a      	strb	r2, [r3, #24]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000e100 	.word	0xe000e100
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f1c3 0307 	rsb	r3, r3, #7
 80043de:	2b04      	cmp	r3, #4
 80043e0:	bf28      	it	cs
 80043e2:	2304      	movcs	r3, #4
 80043e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2b06      	cmp	r3, #6
 80043ec:	d902      	bls.n	80043f4 <NVIC_EncodePriority+0x30>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3b03      	subs	r3, #3
 80043f2:	e000      	b.n	80043f6 <NVIC_EncodePriority+0x32>
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	401a      	ands	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800440c:	f04f 31ff 	mov.w	r1, #4294967295
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	43d9      	mvns	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	4313      	orrs	r3, r2
         );
}
 800441e:	4618      	mov	r0, r3
 8004420:	3724      	adds	r7, #36	; 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3b01      	subs	r3, #1
 8004438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800443c:	d301      	bcc.n	8004442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800443e:	2301      	movs	r3, #1
 8004440:	e00f      	b.n	8004462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004442:	4a0a      	ldr	r2, [pc, #40]	; (800446c <SysTick_Config+0x40>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3b01      	subs	r3, #1
 8004448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800444a:	210f      	movs	r1, #15
 800444c:	f04f 30ff 	mov.w	r0, #4294967295
 8004450:	f7ff ff8e 	bl	8004370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <SysTick_Config+0x40>)
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <SysTick_Config+0x40>)
 800445c:	2207      	movs	r2, #7
 800445e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	e000e010 	.word	0xe000e010

08004470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff29 	bl	80042d0 <__NVIC_SetPriorityGrouping>
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004498:	f7ff ff3e 	bl	8004318 <__NVIC_GetPriorityGrouping>
 800449c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	6978      	ldr	r0, [r7, #20]
 80044a4:	f7ff ff8e 	bl	80043c4 <NVIC_EncodePriority>
 80044a8:	4602      	mov	r2, r0
 80044aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff5d 	bl	8004370 <__NVIC_SetPriority>
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	4603      	mov	r3, r0
 80044c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff ff31 	bl	8004334 <__NVIC_EnableIRQ>
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff ffa2 	bl	800442c <SysTick_Config>
 80044e8:	4603      	mov	r3, r0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004500:	f7ff feda 	bl	80042b8 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e099      	b.n	8004644 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004530:	e00f      	b.n	8004552 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004532:	f7ff fec1 	bl	80042b8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b05      	cmp	r3, #5
 800453e:	d908      	bls.n	8004552 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e078      	b.n	8004644 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e8      	bne.n	8004532 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4b38      	ldr	r3, [pc, #224]	; (800464c <HAL_DMA_Init+0x158>)
 800456c:	4013      	ands	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800457e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d107      	bne.n	80045bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	4313      	orrs	r3, r2
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0307 	bic.w	r3, r3, #7
 80045d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d117      	bne.n	8004616 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00e      	beq.n	8004616 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fa91 	bl	8004b20 <DMA_CheckFifoParam>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2240      	movs	r2, #64	; 0x40
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004612:	2301      	movs	r3, #1
 8004614:	e016      	b.n	8004644 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa48 	bl	8004ab4 <DMA_CalcBaseAndBitshift>
 8004624:	4603      	mov	r3, r0
 8004626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	223f      	movs	r2, #63	; 0x3f
 800462e:	409a      	lsls	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	f010803f 	.word	0xf010803f

08004650 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_DMA_Start_IT+0x26>
 8004672:	2302      	movs	r3, #2
 8004674:	e040      	b.n	80046f8 <HAL_DMA_Start_IT+0xa8>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d12f      	bne.n	80046ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f9da 	bl	8004a58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a8:	223f      	movs	r2, #63	; 0x3f
 80046aa:	409a      	lsls	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0216 	orr.w	r2, r2, #22
 80046be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e005      	b.n	80046f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
 80046f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d004      	beq.n	800471e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2280      	movs	r2, #128	; 0x80
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e00c      	b.n	8004738 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2205      	movs	r2, #5
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004750:	4b92      	ldr	r3, [pc, #584]	; (800499c <HAL_DMA_IRQHandler+0x258>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a92      	ldr	r2, [pc, #584]	; (80049a0 <HAL_DMA_IRQHandler+0x25c>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	0a9b      	lsrs	r3, r3, #10
 800475c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476e:	2208      	movs	r2, #8
 8004770:	409a      	lsls	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4013      	ands	r3, r2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01a      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d013      	beq.n	80047b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479c:	2208      	movs	r2, #8
 800479e:	409a      	lsls	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	f043 0201 	orr.w	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b4:	2201      	movs	r2, #1
 80047b6:	409a      	lsls	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d012      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	2201      	movs	r2, #1
 80047d4:	409a      	lsls	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	f043 0202 	orr.w	r2, r3, #2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ea:	2204      	movs	r2, #4
 80047ec:	409a      	lsls	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d012      	beq.n	800481c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	2204      	movs	r2, #4
 800480a:	409a      	lsls	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	f043 0204 	orr.w	r2, r3, #4
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004820:	2210      	movs	r2, #16
 8004822:	409a      	lsls	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d043      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d03c      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	2210      	movs	r2, #16
 8004840:	409a      	lsls	r2, r3
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d018      	beq.n	8004886 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d024      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	4798      	blx	r3
 8004872:	e01f      	b.n	80048b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01b      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
 8004884:	e016      	b.n	80048b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d107      	bne.n	80048a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0208 	bic.w	r2, r2, #8
 80048a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b8:	2220      	movs	r2, #32
 80048ba:	409a      	lsls	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 808e 	beq.w	80049e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 8086 	beq.w	80049e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	2220      	movs	r2, #32
 80048dc:	409a      	lsls	r2, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b05      	cmp	r3, #5
 80048ec:	d136      	bne.n	800495c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0216 	bic.w	r2, r2, #22
 80048fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695a      	ldr	r2, [r3, #20]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800490c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d103      	bne.n	800491e <HAL_DMA_IRQHandler+0x1da>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0208 	bic.w	r2, r2, #8
 800492c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	223f      	movs	r2, #63	; 0x3f
 8004934:	409a      	lsls	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800494e:	2b00      	cmp	r3, #0
 8004950:	d07d      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
        }
        return;
 800495a:	e078      	b.n	8004a4e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d01c      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d108      	bne.n	800498a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497c:	2b00      	cmp	r3, #0
 800497e:	d030      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	4798      	blx	r3
 8004988:	e02b      	b.n	80049e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d027      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
 800499a:	e022      	b.n	80049e2 <HAL_DMA_IRQHandler+0x29e>
 800499c:	20000028 	.word	0x20000028
 80049a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0210 	bic.w	r2, r2, #16
 80049c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d032      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d022      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2205      	movs	r2, #5
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	3301      	adds	r3, #1
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d307      	bcc.n	8004a2a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f2      	bne.n	8004a0e <HAL_DMA_IRQHandler+0x2ca>
 8004a28:	e000      	b.n	8004a2c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a2a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
 8004a4c:	e000      	b.n	8004a50 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a4e:	bf00      	nop
    }
  }
}
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop

08004a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b40      	cmp	r3, #64	; 0x40
 8004a84:	d108      	bne.n	8004a98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a96:	e007      	b.n	8004aa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	60da      	str	r2, [r3, #12]
}
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	3b10      	subs	r3, #16
 8004ac4:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <DMA_CalcBaseAndBitshift+0x64>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ace:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <DMA_CalcBaseAndBitshift+0x68>)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d909      	bls.n	8004af6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004aea:	f023 0303 	bic.w	r3, r3, #3
 8004aee:	1d1a      	adds	r2, r3, #4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	659a      	str	r2, [r3, #88]	; 0x58
 8004af4:	e007      	b.n	8004b06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	aaaaaaab 	.word	0xaaaaaaab
 8004b1c:	0800927c 	.word	0x0800927c

08004b20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d11f      	bne.n	8004b7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d855      	bhi.n	8004bec <DMA_CheckFifoParam+0xcc>
 8004b40:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <DMA_CheckFifoParam+0x28>)
 8004b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b46:	bf00      	nop
 8004b48:	08004b59 	.word	0x08004b59
 8004b4c:	08004b6b 	.word	0x08004b6b
 8004b50:	08004b59 	.word	0x08004b59
 8004b54:	08004bed 	.word	0x08004bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d045      	beq.n	8004bf0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b68:	e042      	b.n	8004bf0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b72:	d13f      	bne.n	8004bf4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b78:	e03c      	b.n	8004bf4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b82:	d121      	bne.n	8004bc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d836      	bhi.n	8004bf8 <DMA_CheckFifoParam+0xd8>
 8004b8a:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <DMA_CheckFifoParam+0x70>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004ba7 	.word	0x08004ba7
 8004b98:	08004ba1 	.word	0x08004ba1
 8004b9c:	08004bb9 	.word	0x08004bb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba4:	e02f      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d024      	beq.n	8004bfc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb6:	e021      	b.n	8004bfc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bc0:	d11e      	bne.n	8004c00 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bc6:	e01b      	b.n	8004c00 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d902      	bls.n	8004bd4 <DMA_CheckFifoParam+0xb4>
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d003      	beq.n	8004bda <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bd2:	e018      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd8:	e015      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00e      	beq.n	8004c04 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	73fb      	strb	r3, [r7, #15]
      break;
 8004bea:	e00b      	b.n	8004c04 <DMA_CheckFifoParam+0xe4>
      break;
 8004bec:	bf00      	nop
 8004bee:	e00a      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
      break;
 8004bf0:	bf00      	nop
 8004bf2:	e008      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
      break;
 8004bf4:	bf00      	nop
 8004bf6:	e006      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
      break;
 8004bf8:	bf00      	nop
 8004bfa:	e004      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
      break;
 8004bfc:	bf00      	nop
 8004bfe:	e002      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
      break;   
 8004c00:	bf00      	nop
 8004c02:	e000      	b.n	8004c06 <DMA_CheckFifoParam+0xe6>
      break;
 8004c04:	bf00      	nop
    }
  } 
  
  return status; 
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	e16b      	b.n	8004f08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c30:	2201      	movs	r2, #1
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	f040 815a 	bne.w	8004f02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d00b      	beq.n	8004c6e <HAL_GPIO_Init+0x5a>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d007      	beq.n	8004c6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c62:	2b11      	cmp	r3, #17
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b12      	cmp	r3, #18
 8004c6c:	d130      	bne.n	8004cd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	43db      	mvns	r3, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 0201 	and.w	r2, r3, #1
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	2203      	movs	r2, #3
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d003      	beq.n	8004d10 <HAL_GPIO_Init+0xfc>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b12      	cmp	r3, #18
 8004d0e:	d123      	bne.n	8004d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	08da      	lsrs	r2, r3, #3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3208      	adds	r2, #8
 8004d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	220f      	movs	r2, #15
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	08da      	lsrs	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	3208      	adds	r2, #8
 8004d52:	69b9      	ldr	r1, [r7, #24]
 8004d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	2203      	movs	r2, #3
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0203 	and.w	r2, r3, #3
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80b4 	beq.w	8004f02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	4b5f      	ldr	r3, [pc, #380]	; (8004f1c <HAL_GPIO_Init+0x308>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	4a5e      	ldr	r2, [pc, #376]	; (8004f1c <HAL_GPIO_Init+0x308>)
 8004da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004da8:	6453      	str	r3, [r2, #68]	; 0x44
 8004daa:	4b5c      	ldr	r3, [pc, #368]	; (8004f1c <HAL_GPIO_Init+0x308>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004db6:	4a5a      	ldr	r2, [pc, #360]	; (8004f20 <HAL_GPIO_Init+0x30c>)
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	089b      	lsrs	r3, r3, #2
 8004dbc:	3302      	adds	r3, #2
 8004dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	220f      	movs	r2, #15
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a51      	ldr	r2, [pc, #324]	; (8004f24 <HAL_GPIO_Init+0x310>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d02b      	beq.n	8004e3a <HAL_GPIO_Init+0x226>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a50      	ldr	r2, [pc, #320]	; (8004f28 <HAL_GPIO_Init+0x314>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d025      	beq.n	8004e36 <HAL_GPIO_Init+0x222>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a4f      	ldr	r2, [pc, #316]	; (8004f2c <HAL_GPIO_Init+0x318>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01f      	beq.n	8004e32 <HAL_GPIO_Init+0x21e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a4e      	ldr	r2, [pc, #312]	; (8004f30 <HAL_GPIO_Init+0x31c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d019      	beq.n	8004e2e <HAL_GPIO_Init+0x21a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a4d      	ldr	r2, [pc, #308]	; (8004f34 <HAL_GPIO_Init+0x320>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_GPIO_Init+0x216>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a4c      	ldr	r2, [pc, #304]	; (8004f38 <HAL_GPIO_Init+0x324>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00d      	beq.n	8004e26 <HAL_GPIO_Init+0x212>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a4b      	ldr	r2, [pc, #300]	; (8004f3c <HAL_GPIO_Init+0x328>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <HAL_GPIO_Init+0x20e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a4a      	ldr	r2, [pc, #296]	; (8004f40 <HAL_GPIO_Init+0x32c>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d101      	bne.n	8004e1e <HAL_GPIO_Init+0x20a>
 8004e1a:	2307      	movs	r3, #7
 8004e1c:	e00e      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e1e:	2308      	movs	r3, #8
 8004e20:	e00c      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e22:	2306      	movs	r3, #6
 8004e24:	e00a      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e26:	2305      	movs	r3, #5
 8004e28:	e008      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	e006      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e004      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e002      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_GPIO_Init+0x228>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	69fa      	ldr	r2, [r7, #28]
 8004e3e:	f002 0203 	and.w	r2, r2, #3
 8004e42:	0092      	lsls	r2, r2, #2
 8004e44:	4093      	lsls	r3, r2
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e4c:	4934      	ldr	r1, [pc, #208]	; (8004f20 <HAL_GPIO_Init+0x30c>)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	089b      	lsrs	r3, r3, #2
 8004e52:	3302      	adds	r3, #2
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e5a:	4b3a      	ldr	r3, [pc, #232]	; (8004f44 <HAL_GPIO_Init+0x330>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	43db      	mvns	r3, r3
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	4013      	ands	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e7e:	4a31      	ldr	r2, [pc, #196]	; (8004f44 <HAL_GPIO_Init+0x330>)
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e84:	4b2f      	ldr	r3, [pc, #188]	; (8004f44 <HAL_GPIO_Init+0x330>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4013      	ands	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ea8:	4a26      	ldr	r2, [pc, #152]	; (8004f44 <HAL_GPIO_Init+0x330>)
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eae:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <HAL_GPIO_Init+0x330>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ed2:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <HAL_GPIO_Init+0x330>)
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ed8:	4b1a      	ldr	r3, [pc, #104]	; (8004f44 <HAL_GPIO_Init+0x330>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004efc:	4a11      	ldr	r2, [pc, #68]	; (8004f44 <HAL_GPIO_Init+0x330>)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	3301      	adds	r3, #1
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b0f      	cmp	r3, #15
 8004f0c:	f67f ae90 	bls.w	8004c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f10:	bf00      	nop
 8004f12:	3724      	adds	r7, #36	; 0x24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	40013800 	.word	0x40013800
 8004f24:	40020000 	.word	0x40020000
 8004f28:	40020400 	.word	0x40020400
 8004f2c:	40020800 	.word	0x40020800
 8004f30:	40020c00 	.word	0x40020c00
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40021400 	.word	0x40021400
 8004f3c:	40021800 	.word	0x40021800
 8004f40:	40021c00 	.word	0x40021c00
 8004f44:	40013c00 	.word	0x40013c00

08004f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	887b      	ldrh	r3, [r7, #2]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
 8004f64:	e001      	b.n	8004f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f66:	2300      	movs	r3, #0
 8004f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	807b      	strh	r3, [r7, #2]
 8004f84:	4613      	mov	r3, r2
 8004f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f88:	787b      	ldrb	r3, [r7, #1]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f94:	e003      	b.n	8004f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f96:	887b      	ldrh	r3, [r7, #2]
 8004f98:	041a      	lsls	r2, r3, #16
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	619a      	str	r2, [r3, #24]
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e25b      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d075      	beq.n	80050b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fca:	4ba3      	ldr	r3, [pc, #652]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fd6:	4ba0      	ldr	r3, [pc, #640]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d112      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe2:	4b9d      	ldr	r3, [pc, #628]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fee:	d10b      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	4b99      	ldr	r3, [pc, #612]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d05b      	beq.n	80050b4 <HAL_RCC_OscConfig+0x108>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d157      	bne.n	80050b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e236      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d106      	bne.n	8005020 <HAL_RCC_OscConfig+0x74>
 8005012:	4b91      	ldr	r3, [pc, #580]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a90      	ldr	r2, [pc, #576]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e01d      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x98>
 800502a:	4b8b      	ldr	r3, [pc, #556]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a8a      	ldr	r2, [pc, #552]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b88      	ldr	r3, [pc, #544]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a87      	ldr	r2, [pc, #540]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005044:	4b84      	ldr	r3, [pc, #528]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a83      	ldr	r2, [pc, #524]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800504a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b81      	ldr	r3, [pc, #516]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a80      	ldr	r2, [pc, #512]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7ff f928 	bl	80042b8 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800506c:	f7ff f924 	bl	80042b8 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	; 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e1fb      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507e:	4b76      	ldr	r3, [pc, #472]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0xc0>
 800508a:	e014      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7ff f914 	bl	80042b8 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005094:	f7ff f910 	bl	80042b8 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1e7      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a6:	4b6c      	ldr	r3, [pc, #432]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0xe8>
 80050b2:	e000      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d063      	beq.n	800518a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050c2:	4b65      	ldr	r3, [pc, #404]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ce:	4b62      	ldr	r3, [pc, #392]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d11c      	bne.n	8005114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050da:	4b5f      	ldr	r3, [pc, #380]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d116      	bne.n	8005114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	4b5c      	ldr	r3, [pc, #368]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_RCC_OscConfig+0x152>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e1bb      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fe:	4b56      	ldr	r3, [pc, #344]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4952      	ldr	r1, [pc, #328]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	e03a      	b.n	800518a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800511c:	4b4f      	ldr	r3, [pc, #316]	; (800525c <HAL_RCC_OscConfig+0x2b0>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005122:	f7ff f8c9 	bl	80042b8 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800512a:	f7ff f8c5 	bl	80042b8 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e19c      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513c:	4b46      	ldr	r3, [pc, #280]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b43      	ldr	r3, [pc, #268]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4940      	ldr	r1, [pc, #256]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]
 800515c:	e015      	b.n	800518a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800515e:	4b3f      	ldr	r3, [pc, #252]	; (800525c <HAL_RCC_OscConfig+0x2b0>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7ff f8a8 	bl	80042b8 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800516c:	f7ff f8a4 	bl	80042b8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e17b      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517e:	4b36      	ldr	r3, [pc, #216]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d030      	beq.n	80051f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800519e:	4b30      	ldr	r3, [pc, #192]	; (8005260 <HAL_RCC_OscConfig+0x2b4>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7ff f888 	bl	80042b8 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ac:	f7ff f884 	bl	80042b8 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e15b      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80051c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x200>
 80051ca:	e015      	b.n	80051f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051cc:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_RCC_OscConfig+0x2b4>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d2:	f7ff f871 	bl	80042b8 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051da:	f7ff f86d 	bl	80042b8 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e144      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f0      	bne.n	80051da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80a0 	beq.w	8005346 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005206:	2300      	movs	r3, #0
 8005208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	4a0e      	ldr	r2, [pc, #56]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005224:	6413      	str	r3, [r2, #64]	; 0x40
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCC_OscConfig+0x2b8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d121      	bne.n	8005286 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <HAL_RCC_OscConfig+0x2b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a07      	ldr	r2, [pc, #28]	; (8005264 <HAL_RCC_OscConfig+0x2b8>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800524e:	f7ff f833 	bl	80042b8 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	e011      	b.n	800527a <HAL_RCC_OscConfig+0x2ce>
 8005256:	bf00      	nop
 8005258:	40023800 	.word	0x40023800
 800525c:	42470000 	.word	0x42470000
 8005260:	42470e80 	.word	0x42470e80
 8005264:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005268:	f7ff f826 	bl	80042b8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e0fd      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527a:	4b81      	ldr	r3, [pc, #516]	; (8005480 <HAL_RCC_OscConfig+0x4d4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d106      	bne.n	800529c <HAL_RCC_OscConfig+0x2f0>
 800528e:	4b7d      	ldr	r3, [pc, #500]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	4a7c      	ldr	r2, [pc, #496]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	6713      	str	r3, [r2, #112]	; 0x70
 800529a:	e01c      	b.n	80052d6 <HAL_RCC_OscConfig+0x32a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d10c      	bne.n	80052be <HAL_RCC_OscConfig+0x312>
 80052a4:	4b77      	ldr	r3, [pc, #476]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4a76      	ldr	r2, [pc, #472]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80052aa:	f043 0304 	orr.w	r3, r3, #4
 80052ae:	6713      	str	r3, [r2, #112]	; 0x70
 80052b0:	4b74      	ldr	r3, [pc, #464]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	4a73      	ldr	r2, [pc, #460]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	6713      	str	r3, [r2, #112]	; 0x70
 80052bc:	e00b      	b.n	80052d6 <HAL_RCC_OscConfig+0x32a>
 80052be:	4b71      	ldr	r3, [pc, #452]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4a70      	ldr	r2, [pc, #448]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ca:	4b6e      	ldr	r3, [pc, #440]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	4a6d      	ldr	r2, [pc, #436]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d015      	beq.n	800530a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052de:	f7fe ffeb 	bl	80042b8 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7fe ffe7 	bl	80042b8 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e0bc      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fc:	4b61      	ldr	r3, [pc, #388]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0ee      	beq.n	80052e6 <HAL_RCC_OscConfig+0x33a>
 8005308:	e014      	b.n	8005334 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530a:	f7fe ffd5 	bl	80042b8 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005310:	e00a      	b.n	8005328 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005312:	f7fe ffd1 	bl	80042b8 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0a6      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005328:	4b56      	ldr	r3, [pc, #344]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ee      	bne.n	8005312 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4b52      	ldr	r3, [pc, #328]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4a51      	ldr	r2, [pc, #324]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005344:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8092 	beq.w	8005474 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005350:	4b4c      	ldr	r3, [pc, #304]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b08      	cmp	r3, #8
 800535a:	d05c      	beq.n	8005416 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d141      	bne.n	80053e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005364:	4b48      	ldr	r3, [pc, #288]	; (8005488 <HAL_RCC_OscConfig+0x4dc>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536a:	f7fe ffa5 	bl	80042b8 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005372:	f7fe ffa1 	bl	80042b8 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e078      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005384:	4b3f      	ldr	r3, [pc, #252]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f0      	bne.n	8005372 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	019b      	lsls	r3, r3, #6
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	3b01      	subs	r3, #1
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	4933      	ldr	r1, [pc, #204]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ba:	4b33      	ldr	r3, [pc, #204]	; (8005488 <HAL_RCC_OscConfig+0x4dc>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c0:	f7fe ff7a 	bl	80042b8 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c8:	f7fe ff76 	bl	80042b8 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e04d      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053da:	4b2a      	ldr	r3, [pc, #168]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0x41c>
 80053e6:	e045      	b.n	8005474 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e8:	4b27      	ldr	r3, [pc, #156]	; (8005488 <HAL_RCC_OscConfig+0x4dc>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ee:	f7fe ff63 	bl	80042b8 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fe ff5f 	bl	80042b8 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e036      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005408:	4b1e      	ldr	r3, [pc, #120]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <HAL_RCC_OscConfig+0x44a>
 8005414:	e02e      	b.n	8005474 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e029      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005422:	4b18      	ldr	r3, [pc, #96]	; (8005484 <HAL_RCC_OscConfig+0x4d8>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	429a      	cmp	r2, r3
 8005434:	d11c      	bne.n	8005470 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d115      	bne.n	8005470 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800544a:	4013      	ands	r3, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005450:	4293      	cmp	r3, r2
 8005452:	d10d      	bne.n	8005470 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d106      	bne.n	8005470 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40007000 	.word	0x40007000
 8005484:	40023800 	.word	0x40023800
 8005488:	42470060 	.word	0x42470060

0800548c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e0cc      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054a0:	4b68      	ldr	r3, [pc, #416]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d90c      	bls.n	80054c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b65      	ldr	r3, [pc, #404]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b63      	ldr	r3, [pc, #396]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0b8      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d020      	beq.n	8005516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054e0:	4b59      	ldr	r3, [pc, #356]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4a58      	ldr	r2, [pc, #352]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054f8:	4b53      	ldr	r3, [pc, #332]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	4a52      	ldr	r2, [pc, #328]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80054fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005504:	4b50      	ldr	r3, [pc, #320]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	494d      	ldr	r1, [pc, #308]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 8005512:	4313      	orrs	r3, r2
 8005514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d044      	beq.n	80055ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d107      	bne.n	800553a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552a:	4b47      	ldr	r3, [pc, #284]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d119      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e07f      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d003      	beq.n	800554a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005546:	2b03      	cmp	r3, #3
 8005548:	d107      	bne.n	800555a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800554a:	4b3f      	ldr	r3, [pc, #252]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e06f      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555a:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e067      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800556a:	4b37      	ldr	r3, [pc, #220]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f023 0203 	bic.w	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4934      	ldr	r1, [pc, #208]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 8005578:	4313      	orrs	r3, r2
 800557a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800557c:	f7fe fe9c 	bl	80042b8 <HAL_GetTick>
 8005580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005582:	e00a      	b.n	800559a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005584:	f7fe fe98 	bl	80042b8 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e04f      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559a:	4b2b      	ldr	r3, [pc, #172]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 020c 	and.w	r2, r3, #12
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d1eb      	bne.n	8005584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d20c      	bcs.n	80055d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ba:	4b22      	ldr	r3, [pc, #136]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c2:	4b20      	ldr	r3, [pc, #128]	; (8005644 <HAL_RCC_ClockConfig+0x1b8>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e032      	b.n	800563a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d008      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055e0:	4b19      	ldr	r3, [pc, #100]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	4916      	ldr	r1, [pc, #88]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055fe:	4b12      	ldr	r3, [pc, #72]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	490e      	ldr	r1, [pc, #56]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	4313      	orrs	r3, r2
 8005610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005612:	f000 f821 	bl	8005658 <HAL_RCC_GetSysClockFreq>
 8005616:	4601      	mov	r1, r0
 8005618:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	4a0a      	ldr	r2, [pc, #40]	; (800564c <HAL_RCC_ClockConfig+0x1c0>)
 8005624:	5cd3      	ldrb	r3, [r2, r3]
 8005626:	fa21 f303 	lsr.w	r3, r1, r3
 800562a:	4a09      	ldr	r2, [pc, #36]	; (8005650 <HAL_RCC_ClockConfig+0x1c4>)
 800562c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800562e:	4b09      	ldr	r3, [pc, #36]	; (8005654 <HAL_RCC_ClockConfig+0x1c8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe fe10 	bl	8004258 <HAL_InitTick>

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40023c00 	.word	0x40023c00
 8005648:	40023800 	.word	0x40023800
 800564c:	08009264 	.word	0x08009264
 8005650:	20000028 	.word	0x20000028
 8005654:	2000002c 	.word	0x2000002c

08005658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	2300      	movs	r3, #0
 8005668:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800566e:	4b50      	ldr	r3, [pc, #320]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b04      	cmp	r3, #4
 8005678:	d007      	beq.n	800568a <HAL_RCC_GetSysClockFreq+0x32>
 800567a:	2b08      	cmp	r3, #8
 800567c:	d008      	beq.n	8005690 <HAL_RCC_GetSysClockFreq+0x38>
 800567e:	2b00      	cmp	r3, #0
 8005680:	f040 808d 	bne.w	800579e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005684:	4b4b      	ldr	r3, [pc, #300]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005686:	60bb      	str	r3, [r7, #8]
       break;
 8005688:	e08c      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800568a:	4b4b      	ldr	r3, [pc, #300]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x160>)
 800568c:	60bb      	str	r3, [r7, #8]
      break;
 800568e:	e089      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005690:	4b47      	ldr	r3, [pc, #284]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005698:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800569a:	4b45      	ldr	r3, [pc, #276]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x158>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d023      	beq.n	80056ee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a6:	4b42      	ldr	r3, [pc, #264]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	099b      	lsrs	r3, r3, #6
 80056ac:	f04f 0400 	mov.w	r4, #0
 80056b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	ea03 0501 	and.w	r5, r3, r1
 80056bc:	ea04 0602 	and.w	r6, r4, r2
 80056c0:	4a3d      	ldr	r2, [pc, #244]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80056c2:	fb02 f106 	mul.w	r1, r2, r6
 80056c6:	2200      	movs	r2, #0
 80056c8:	fb02 f205 	mul.w	r2, r2, r5
 80056cc:	440a      	add	r2, r1
 80056ce:	493a      	ldr	r1, [pc, #232]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x160>)
 80056d0:	fba5 0101 	umull	r0, r1, r5, r1
 80056d4:	1853      	adds	r3, r2, r1
 80056d6:	4619      	mov	r1, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f04f 0400 	mov.w	r4, #0
 80056de:	461a      	mov	r2, r3
 80056e0:	4623      	mov	r3, r4
 80056e2:	f7fb fa5d 	bl	8000ba0 <__aeabi_uldivmod>
 80056e6:	4603      	mov	r3, r0
 80056e8:	460c      	mov	r4, r1
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e049      	b.n	8005782 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ee:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x158>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	099b      	lsrs	r3, r3, #6
 80056f4:	f04f 0400 	mov.w	r4, #0
 80056f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	ea03 0501 	and.w	r5, r3, r1
 8005704:	ea04 0602 	and.w	r6, r4, r2
 8005708:	4629      	mov	r1, r5
 800570a:	4632      	mov	r2, r6
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	f04f 0400 	mov.w	r4, #0
 8005714:	0154      	lsls	r4, r2, #5
 8005716:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800571a:	014b      	lsls	r3, r1, #5
 800571c:	4619      	mov	r1, r3
 800571e:	4622      	mov	r2, r4
 8005720:	1b49      	subs	r1, r1, r5
 8005722:	eb62 0206 	sbc.w	r2, r2, r6
 8005726:	f04f 0300 	mov.w	r3, #0
 800572a:	f04f 0400 	mov.w	r4, #0
 800572e:	0194      	lsls	r4, r2, #6
 8005730:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005734:	018b      	lsls	r3, r1, #6
 8005736:	1a5b      	subs	r3, r3, r1
 8005738:	eb64 0402 	sbc.w	r4, r4, r2
 800573c:	f04f 0100 	mov.w	r1, #0
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	00e2      	lsls	r2, r4, #3
 8005746:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800574a:	00d9      	lsls	r1, r3, #3
 800574c:	460b      	mov	r3, r1
 800574e:	4614      	mov	r4, r2
 8005750:	195b      	adds	r3, r3, r5
 8005752:	eb44 0406 	adc.w	r4, r4, r6
 8005756:	f04f 0100 	mov.w	r1, #0
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	02a2      	lsls	r2, r4, #10
 8005760:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005764:	0299      	lsls	r1, r3, #10
 8005766:	460b      	mov	r3, r1
 8005768:	4614      	mov	r4, r2
 800576a:	4618      	mov	r0, r3
 800576c:	4621      	mov	r1, r4
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f04f 0400 	mov.w	r4, #0
 8005774:	461a      	mov	r2, r3
 8005776:	4623      	mov	r3, r4
 8005778:	f7fb fa12 	bl	8000ba0 <__aeabi_uldivmod>
 800577c:	4603      	mov	r3, r0
 800577e:	460c      	mov	r4, r1
 8005780:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	0c1b      	lsrs	r3, r3, #16
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	3301      	adds	r3, #1
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	fbb2 f3f3 	udiv	r3, r2, r3
 800579a:	60bb      	str	r3, [r7, #8]
      break;
 800579c:	e002      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80057a0:	60bb      	str	r3, [r7, #8]
      break;
 80057a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057a4:	68bb      	ldr	r3, [r7, #8]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40023800 	.word	0x40023800
 80057b4:	00f42400 	.word	0x00f42400
 80057b8:	017d7840 	.word	0x017d7840

080057bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057c2:	681b      	ldr	r3, [r3, #0]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000028 	.word	0x20000028

080057d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057d8:	f7ff fff0 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 80057dc:	4601      	mov	r1, r0
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	0a9b      	lsrs	r3, r3, #10
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	4a03      	ldr	r2, [pc, #12]	; (80057f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ea:	5cd3      	ldrb	r3, [r2, r3]
 80057ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40023800 	.word	0x40023800
 80057f8:	08009274 	.word	0x08009274

080057fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005800:	f7ff ffdc 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 8005804:	4601      	mov	r1, r0
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	0b5b      	lsrs	r3, r3, #13
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	4a03      	ldr	r2, [pc, #12]	; (8005820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005812:	5cd3      	ldrb	r3, [r2, r3]
 8005814:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40023800 	.word	0x40023800
 8005820:	08009274 	.word	0x08009274

08005824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e056      	b.n	80058e4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7fd fbb9 	bl	8002fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	ea42 0103 	orr.w	r1, r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	0c1b      	lsrs	r3, r3, #16
 80058b4:	f003 0104 	and.w	r1, r3, #4
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69da      	ldr	r2, [r3, #28]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e01d      	b.n	800593a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fe f874 	bl	8003a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f000 fc5e 	bl	80061ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3708      	adds	r7, #8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b06      	cmp	r3, #6
 800596a:	d007      	beq.n	800597c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b082      	sub	sp, #8
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e01d      	b.n	80059d8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d106      	bne.n	80059b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f815 	bl	80059e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4619      	mov	r1, r3
 80059c8:	4610      	mov	r0, r2
 80059ca:	f000 fc0f 	bl	80061ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2201      	movs	r2, #1
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 feda 	bl	80067c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <HAL_TIM_PWM_Start+0x74>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_TIM_PWM_Start+0x2c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a14      	ldr	r2, [pc, #80]	; (8005a6c <HAL_TIM_PWM_Start+0x78>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d101      	bne.n	8005a24 <HAL_TIM_PWM_Start+0x30>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <HAL_TIM_PWM_Start+0x32>
 8005a24:	2300      	movs	r3, #0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	d007      	beq.n	8005a5c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0201 	orr.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40010400 	.word	0x40010400

08005a70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e083      	b.n	8005b8c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7fe f865 	bl	8003b68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab4:	f023 0307 	bic.w	r3, r3, #7
 8005ab8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f000 fb91 	bl	80061ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	4313      	orrs	r3, r2
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b10:	f023 030c 	bic.w	r3, r3, #12
 8005b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	011a      	lsls	r2, r3, #4
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	031b      	lsls	r3, r3, #12
 8005b40:	4313      	orrs	r3, r2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005b4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	4313      	orrs	r3, r2
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <HAL_TIM_Encoder_Start+0x16>
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d008      	beq.n	8005bba <HAL_TIM_Encoder_Start+0x26>
 8005ba8:	e00f      	b.n	8005bca <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fe04 	bl	80067c0 <TIM_CCxChannelCmd>
      break;
 8005bb8:	e016      	b.n	8005be8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	2104      	movs	r1, #4
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fdfc 	bl	80067c0 <TIM_CCxChannelCmd>
      break;
 8005bc8:	e00e      	b.n	8005be8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fdf4 	bl	80067c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	2104      	movs	r1, #4
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fded 	bl	80067c0 <TIM_CCxChannelCmd>
      break;
 8005be6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <HAL_TIM_Encoder_Stop+0x16>
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d008      	beq.n	8005c28 <HAL_TIM_Encoder_Stop+0x26>
 8005c16:	e00f      	b.n	8005c38 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fdcd 	bl	80067c0 <TIM_CCxChannelCmd>
      break;
 8005c26:	e016      	b.n	8005c56 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2104      	movs	r1, #4
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fdc5 	bl	80067c0 <TIM_CCxChannelCmd>
      break;
 8005c36:	e00e      	b.n	8005c56 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2100      	movs	r1, #0
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fdbd 	bl	80067c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2104      	movs	r1, #4
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 fdb6 	bl	80067c0 <TIM_CCxChannelCmd>
      break;
 8005c54:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6a1a      	ldr	r2, [r3, #32]
 8005c5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10f      	bne.n	8005c86 <HAL_TIM_Encoder_Stop+0x84>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	f240 4344 	movw	r3, #1092	; 0x444
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d107      	bne.n	8005c86 <HAL_TIM_Encoder_Stop+0x84>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0201 	bic.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d122      	bne.n	8005cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d11b      	bne.n	8005cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0202 	mvn.w	r2, #2
 8005cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa6b 	bl	80061ae <HAL_TIM_IC_CaptureCallback>
 8005cd8:	e005      	b.n	8005ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fa5d 	bl	800619a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fa6e 	bl	80061c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d122      	bne.n	8005d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d11b      	bne.n	8005d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0204 	mvn.w	r2, #4
 8005d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fa41 	bl	80061ae <HAL_TIM_IC_CaptureCallback>
 8005d2c:	e005      	b.n	8005d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fa33 	bl	800619a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fa44 	bl	80061c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d122      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d11b      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f06f 0208 	mvn.w	r2, #8
 8005d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2204      	movs	r2, #4
 8005d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fa17 	bl	80061ae <HAL_TIM_IC_CaptureCallback>
 8005d80:	e005      	b.n	8005d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa09 	bl	800619a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fa1a 	bl	80061c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b10      	cmp	r3, #16
 8005da0:	d122      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0310 	and.w	r3, r3, #16
 8005dac:	2b10      	cmp	r3, #16
 8005dae:	d11b      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0210 	mvn.w	r2, #16
 8005db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f9ed 	bl	80061ae <HAL_TIM_IC_CaptureCallback>
 8005dd4:	e005      	b.n	8005de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f9df 	bl	800619a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f9f0 	bl	80061c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d10e      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d107      	bne.n	8005e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0201 	mvn.w	r2, #1
 8005e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fb fc50 	bl	80016b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b80      	cmp	r3, #128	; 0x80
 8005e20:	d10e      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2c:	2b80      	cmp	r3, #128	; 0x80
 8005e2e:	d107      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fd6c 	bl	8006918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d10e      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b40      	cmp	r3, #64	; 0x40
 8005e5a:	d107      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f9b5 	bl	80061d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d10e      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d107      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0220 	mvn.w	r2, #32
 8005e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fd36 	bl	8006904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e0b4      	b.n	8006024 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b0c      	cmp	r3, #12
 8005ece:	f200 809f 	bhi.w	8006010 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005ed2:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005f0d 	.word	0x08005f0d
 8005edc:	08006011 	.word	0x08006011
 8005ee0:	08006011 	.word	0x08006011
 8005ee4:	08006011 	.word	0x08006011
 8005ee8:	08005f4d 	.word	0x08005f4d
 8005eec:	08006011 	.word	0x08006011
 8005ef0:	08006011 	.word	0x08006011
 8005ef4:	08006011 	.word	0x08006011
 8005ef8:	08005f8f 	.word	0x08005f8f
 8005efc:	08006011 	.word	0x08006011
 8005f00:	08006011 	.word	0x08006011
 8005f04:	08006011 	.word	0x08006011
 8005f08:	08005fcf 	.word	0x08005fcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fa0a 	bl	800632c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0208 	orr.w	r2, r2, #8
 8005f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0204 	bic.w	r2, r2, #4
 8005f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	619a      	str	r2, [r3, #24]
      break;
 8005f4a:	e062      	b.n	8006012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fa5a 	bl	800640c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6999      	ldr	r1, [r3, #24]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	021a      	lsls	r2, r3, #8
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	619a      	str	r2, [r3, #24]
      break;
 8005f8c:	e041      	b.n	8006012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 faaf 	bl	80064f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0208 	orr.w	r2, r2, #8
 8005fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0204 	bic.w	r2, r2, #4
 8005fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69d9      	ldr	r1, [r3, #28]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	61da      	str	r2, [r3, #28]
      break;
 8005fcc:	e021      	b.n	8006012 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fb03 	bl	80065e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69d9      	ldr	r1, [r3, #28]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	021a      	lsls	r2, r3, #8
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	61da      	str	r2, [r3, #28]
      break;
 800600e:	e000      	b.n	8006012 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006010:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_TIM_ConfigClockSource+0x18>
 8006040:	2302      	movs	r3, #2
 8006042:	e0a6      	b.n	8006192 <HAL_TIM_ConfigClockSource+0x166>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006062:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800606a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d067      	beq.n	800614c <HAL_TIM_ConfigClockSource+0x120>
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d80b      	bhi.n	8006098 <HAL_TIM_ConfigClockSource+0x6c>
 8006080:	2b10      	cmp	r3, #16
 8006082:	d073      	beq.n	800616c <HAL_TIM_ConfigClockSource+0x140>
 8006084:	2b10      	cmp	r3, #16
 8006086:	d802      	bhi.n	800608e <HAL_TIM_ConfigClockSource+0x62>
 8006088:	2b00      	cmp	r3, #0
 800608a:	d06f      	beq.n	800616c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800608c:	e078      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800608e:	2b20      	cmp	r3, #32
 8006090:	d06c      	beq.n	800616c <HAL_TIM_ConfigClockSource+0x140>
 8006092:	2b30      	cmp	r3, #48	; 0x30
 8006094:	d06a      	beq.n	800616c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006096:	e073      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006098:	2b70      	cmp	r3, #112	; 0x70
 800609a:	d00d      	beq.n	80060b8 <HAL_TIM_ConfigClockSource+0x8c>
 800609c:	2b70      	cmp	r3, #112	; 0x70
 800609e:	d804      	bhi.n	80060aa <HAL_TIM_ConfigClockSource+0x7e>
 80060a0:	2b50      	cmp	r3, #80	; 0x50
 80060a2:	d033      	beq.n	800610c <HAL_TIM_ConfigClockSource+0xe0>
 80060a4:	2b60      	cmp	r3, #96	; 0x60
 80060a6:	d041      	beq.n	800612c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060a8:	e06a      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ae:	d066      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x152>
 80060b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b4:	d017      	beq.n	80060e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80060b6:	e063      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	6899      	ldr	r1, [r3, #8]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f000 fb5a 	bl	8006780 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	609a      	str	r2, [r3, #8]
      break;
 80060e4:	e04c      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6899      	ldr	r1, [r3, #8]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f000 fb43 	bl	8006780 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006108:	609a      	str	r2, [r3, #8]
      break;
 800610a:	e039      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	6859      	ldr	r1, [r3, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	461a      	mov	r2, r3
 800611a:	f000 fab7 	bl	800668c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2150      	movs	r1, #80	; 0x50
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fb10 	bl	800674a <TIM_ITRx_SetConfig>
      break;
 800612a:	e029      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	6859      	ldr	r1, [r3, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	461a      	mov	r2, r3
 800613a:	f000 fad6 	bl	80066ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2160      	movs	r1, #96	; 0x60
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fb00 	bl	800674a <TIM_ITRx_SetConfig>
      break;
 800614a:	e019      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	6859      	ldr	r1, [r3, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	461a      	mov	r2, r3
 800615a:	f000 fa97 	bl	800668c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2140      	movs	r1, #64	; 0x40
 8006164:	4618      	mov	r0, r3
 8006166:	f000 faf0 	bl	800674a <TIM_ITRx_SetConfig>
      break;
 800616a:	e009      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f000 fae7 	bl	800674a <TIM_ITRx_SetConfig>
      break;
 800617c:	e000      	b.n	8006180 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800617e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a40      	ldr	r2, [pc, #256]	; (8006300 <TIM_Base_SetConfig+0x114>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d013      	beq.n	800622c <TIM_Base_SetConfig+0x40>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800620a:	d00f      	beq.n	800622c <TIM_Base_SetConfig+0x40>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a3d      	ldr	r2, [pc, #244]	; (8006304 <TIM_Base_SetConfig+0x118>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00b      	beq.n	800622c <TIM_Base_SetConfig+0x40>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a3c      	ldr	r2, [pc, #240]	; (8006308 <TIM_Base_SetConfig+0x11c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d007      	beq.n	800622c <TIM_Base_SetConfig+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a3b      	ldr	r2, [pc, #236]	; (800630c <TIM_Base_SetConfig+0x120>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a3a      	ldr	r2, [pc, #232]	; (8006310 <TIM_Base_SetConfig+0x124>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d108      	bne.n	800623e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a2f      	ldr	r2, [pc, #188]	; (8006300 <TIM_Base_SetConfig+0x114>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d02b      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624c:	d027      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a2c      	ldr	r2, [pc, #176]	; (8006304 <TIM_Base_SetConfig+0x118>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d023      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2b      	ldr	r2, [pc, #172]	; (8006308 <TIM_Base_SetConfig+0x11c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01f      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2a      	ldr	r2, [pc, #168]	; (800630c <TIM_Base_SetConfig+0x120>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01b      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a29      	ldr	r2, [pc, #164]	; (8006310 <TIM_Base_SetConfig+0x124>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d017      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a28      	ldr	r2, [pc, #160]	; (8006314 <TIM_Base_SetConfig+0x128>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a27      	ldr	r2, [pc, #156]	; (8006318 <TIM_Base_SetConfig+0x12c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00f      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a26      	ldr	r2, [pc, #152]	; (800631c <TIM_Base_SetConfig+0x130>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00b      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a25      	ldr	r2, [pc, #148]	; (8006320 <TIM_Base_SetConfig+0x134>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a24      	ldr	r2, [pc, #144]	; (8006324 <TIM_Base_SetConfig+0x138>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a23      	ldr	r2, [pc, #140]	; (8006328 <TIM_Base_SetConfig+0x13c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d108      	bne.n	80062b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a0a      	ldr	r2, [pc, #40]	; (8006300 <TIM_Base_SetConfig+0x114>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_Base_SetConfig+0xf8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a0c      	ldr	r2, [pc, #48]	; (8006310 <TIM_Base_SetConfig+0x124>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d103      	bne.n	80062ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	615a      	str	r2, [r3, #20]
}
 80062f2:	bf00      	nop
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40010000 	.word	0x40010000
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40010400 	.word	0x40010400
 8006314:	40014000 	.word	0x40014000
 8006318:	40014400 	.word	0x40014400
 800631c:	40014800 	.word	0x40014800
 8006320:	40001800 	.word	0x40001800
 8006324:	40001c00 	.word	0x40001c00
 8006328:	40002000 	.word	0x40002000

0800632c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800632c:	b480      	push	{r7}
 800632e:	b087      	sub	sp, #28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f023 0201 	bic.w	r2, r3, #1
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0303 	bic.w	r3, r3, #3
 8006362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f023 0302 	bic.w	r3, r3, #2
 8006374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a20      	ldr	r2, [pc, #128]	; (8006404 <TIM_OC1_SetConfig+0xd8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d003      	beq.n	8006390 <TIM_OC1_SetConfig+0x64>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a1f      	ldr	r2, [pc, #124]	; (8006408 <TIM_OC1_SetConfig+0xdc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d10c      	bne.n	80063aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f023 0308 	bic.w	r3, r3, #8
 8006396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f023 0304 	bic.w	r3, r3, #4
 80063a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a15      	ldr	r2, [pc, #84]	; (8006404 <TIM_OC1_SetConfig+0xd8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_OC1_SetConfig+0x8e>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a14      	ldr	r2, [pc, #80]	; (8006408 <TIM_OC1_SetConfig+0xdc>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d111      	bne.n	80063de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	621a      	str	r2, [r3, #32]
}
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	40010000 	.word	0x40010000
 8006408:	40010400 	.word	0x40010400

0800640c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	f023 0210 	bic.w	r2, r3, #16
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f023 0320 	bic.w	r3, r3, #32
 8006456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a22      	ldr	r2, [pc, #136]	; (80064f0 <TIM_OC2_SetConfig+0xe4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_OC2_SetConfig+0x68>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a21      	ldr	r2, [pc, #132]	; (80064f4 <TIM_OC2_SetConfig+0xe8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d10d      	bne.n	8006490 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800647a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800648e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a17      	ldr	r2, [pc, #92]	; (80064f0 <TIM_OC2_SetConfig+0xe4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d003      	beq.n	80064a0 <TIM_OC2_SetConfig+0x94>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <TIM_OC2_SetConfig+0xe8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d113      	bne.n	80064c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40010400 	.word	0x40010400

080064f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0303 	bic.w	r3, r3, #3
 800652e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	021b      	lsls	r3, r3, #8
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a21      	ldr	r2, [pc, #132]	; (80065d8 <TIM_OC3_SetConfig+0xe0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_OC3_SetConfig+0x66>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a20      	ldr	r2, [pc, #128]	; (80065dc <TIM_OC3_SetConfig+0xe4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d10d      	bne.n	800657a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a16      	ldr	r2, [pc, #88]	; (80065d8 <TIM_OC3_SetConfig+0xe0>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d003      	beq.n	800658a <TIM_OC3_SetConfig+0x92>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a15      	ldr	r2, [pc, #84]	; (80065dc <TIM_OC3_SetConfig+0xe4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d113      	bne.n	80065b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	621a      	str	r2, [r3, #32]
}
 80065cc:	bf00      	nop
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	40010000 	.word	0x40010000
 80065dc:	40010400 	.word	0x40010400

080065e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800662a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	031b      	lsls	r3, r3, #12
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a12      	ldr	r2, [pc, #72]	; (8006684 <TIM_OC4_SetConfig+0xa4>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_OC4_SetConfig+0x68>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a11      	ldr	r2, [pc, #68]	; (8006688 <TIM_OC4_SetConfig+0xa8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d109      	bne.n	800665c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800664e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	019b      	lsls	r3, r3, #6
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	40010000 	.word	0x40010000
 8006688:	40010400 	.word	0x40010400

0800668c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f023 0201 	bic.w	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f023 030a 	bic.w	r3, r3, #10
 80066c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b087      	sub	sp, #28
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	f023 0210 	bic.w	r2, r3, #16
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006714:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	031b      	lsls	r3, r3, #12
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	4313      	orrs	r3, r2
 800671e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006726:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	011b      	lsls	r3, r3, #4
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	f043 0307 	orr.w	r3, r3, #7
 800676c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	609a      	str	r2, [r3, #8]
}
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800679a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	609a      	str	r2, [r3, #8]
}
 80067b4:	bf00      	nop
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2201      	movs	r2, #1
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1a      	ldr	r2, [r3, #32]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	43db      	mvns	r3, r3
 80067e2:	401a      	ands	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a1a      	ldr	r2, [r3, #32]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	fa01 f303 	lsl.w	r3, r1, r3
 80067f8:	431a      	orrs	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
	...

0800680c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006820:	2302      	movs	r3, #2
 8006822:	e05a      	b.n	80068da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a21      	ldr	r2, [pc, #132]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d022      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006870:	d01d      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1d      	ldr	r2, [pc, #116]	; (80068ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d018      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1b      	ldr	r2, [pc, #108]	; (80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1a      	ldr	r2, [pc, #104]	; (80068f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a18      	ldr	r2, [pc, #96]	; (80068f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d009      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a17      	ldr	r2, [pc, #92]	; (80068fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a15      	ldr	r2, [pc, #84]	; (8006900 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d10c      	bne.n	80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	40010000 	.word	0x40010000
 80068ec:	40000400 	.word	0x40000400
 80068f0:	40000800 	.word	0x40000800
 80068f4:	40000c00 	.word	0x40000c00
 80068f8:	40010400 	.word	0x40010400
 80068fc:	40014000 	.word	0x40014000
 8006900:	40001800 	.word	0x40001800

08006904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e03f      	b.n	80069be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fd fb12 	bl	8003f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2224      	movs	r2, #36	; 0x24
 800695c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800696e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fb95 	bl	80070a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695a      	ldr	r2, [r3, #20]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	4613      	mov	r3, r2
 80069d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d166      	bne.n	8006ab0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <HAL_UART_Receive_DMA+0x26>
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e05f      	b.n	8006ab2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_UART_Receive_DMA+0x38>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e058      	b.n	8006ab2 <HAL_UART_Receive_DMA+0xea>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	88fa      	ldrh	r2, [r7, #6]
 8006a12:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2222      	movs	r2, #34	; 0x22
 8006a1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a26:	4a25      	ldr	r2, [pc, #148]	; (8006abc <HAL_UART_Receive_DMA+0xf4>)
 8006a28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2e:	4a24      	ldr	r2, [pc, #144]	; (8006ac0 <HAL_UART_Receive_DMA+0xf8>)
 8006a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a36:	4a23      	ldr	r2, [pc, #140]	; (8006ac4 <HAL_UART_Receive_DMA+0xfc>)
 8006a38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3e:	2200      	movs	r2, #0
 8006a40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006a42:	f107 0308 	add.w	r3, r7, #8
 8006a46:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3304      	adds	r3, #4
 8006a52:	4619      	mov	r1, r3
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	88fb      	ldrh	r3, [r7, #6]
 8006a5a:	f7fd fdf9 	bl	8004650 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006a5e:	2300      	movs	r3, #0
 8006a60:	613b      	str	r3, [r7, #16]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68da      	ldr	r2, [r3, #12]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a8a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695a      	ldr	r2, [r3, #20]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f042 0201 	orr.w	r2, r2, #1
 8006a9a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695a      	ldr	r2, [r3, #20]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aaa:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	e000      	b.n	8006ab2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
  }
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	08006d19 	.word	0x08006d19
 8006ac0:	08006d81 	.word	0x08006d81
 8006ac4:	08006d9d 	.word	0x08006d9d

08006ac8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10d      	bne.n	8006b1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d008      	beq.n	8006b1a <HAL_UART_IRQHandler+0x52>
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa42 	bl	8006f9c <UART_Receive_IT>
      return;
 8006b18:	e0d1      	b.n	8006cbe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80b0 	beq.w	8006c82 <HAL_UART_IRQHandler+0x1ba>
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <HAL_UART_IRQHandler+0x70>
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 80a5 	beq.w	8006c82 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <HAL_UART_IRQHandler+0x90>
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	f043 0201 	orr.w	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <HAL_UART_IRQHandler+0xb0>
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	f043 0202 	orr.w	r2, r3, #2
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <HAL_UART_IRQHandler+0xd0>
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	f043 0204 	orr.w	r2, r3, #4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00f      	beq.n	8006bc2 <HAL_UART_IRQHandler+0xfa>
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_UART_IRQHandler+0xee>
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bba:	f043 0208 	orr.w	r2, r3, #8
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d078      	beq.n	8006cbc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d007      	beq.n	8006be4 <HAL_UART_IRQHandler+0x11c>
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f9dc 	bl	8006f9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	bf0c      	ite	eq
 8006bf2:	2301      	moveq	r3, #1
 8006bf4:	2300      	movne	r3, #0
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d102      	bne.n	8006c0c <HAL_UART_IRQHandler+0x144>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d031      	beq.n	8006c70 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f925 	bl	8006e5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1c:	2b40      	cmp	r3, #64	; 0x40
 8006c1e:	d123      	bne.n	8006c68 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d013      	beq.n	8006c60 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3c:	4a21      	ldr	r2, [pc, #132]	; (8006cc4 <HAL_UART_IRQHandler+0x1fc>)
 8006c3e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fd fd5b 	bl	8004700 <HAL_DMA_Abort_IT>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d016      	beq.n	8006c7e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5e:	e00e      	b.n	8006c7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f84f 	bl	8006d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c66:	e00a      	b.n	8006c7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f84b 	bl	8006d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6e:	e006      	b.n	8006c7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f847 	bl	8006d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006c7c:	e01e      	b.n	8006cbc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c7e:	bf00      	nop
    return;
 8006c80:	e01c      	b.n	8006cbc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d008      	beq.n	8006c9e <HAL_UART_IRQHandler+0x1d6>
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d003      	beq.n	8006c9e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f912 	bl	8006ec0 <UART_Transmit_IT>
    return;
 8006c9c:	e00f      	b.n	8006cbe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <HAL_UART_IRQHandler+0x1f6>
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d005      	beq.n	8006cbe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f95a 	bl	8006f6c <UART_EndTransmit_IT>
    return;
 8006cb8:	bf00      	nop
 8006cba:	e000      	b.n	8006cbe <HAL_UART_IRQHandler+0x1f6>
    return;
 8006cbc:	bf00      	nop
  }
}
 8006cbe:	3720      	adds	r7, #32
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	08006e99 	.word	0x08006e99

08006cc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d11e      	bne.n	8006d72 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d48:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695a      	ldr	r2, [r3, #20]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0201 	bic.w	r2, r2, #1
 8006d58:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695a      	ldr	r2, [r3, #20]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d68:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff ffb2 	bl	8006cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff ffae 	bl	8006cf0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	bf0c      	ite	eq
 8006dbc:	2301      	moveq	r3, #1
 8006dbe:	2300      	movne	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b21      	cmp	r3, #33	; 0x21
 8006dce:	d108      	bne.n	8006de2 <UART_DMAError+0x46>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006ddc:	68b8      	ldr	r0, [r7, #8]
 8006dde:	f000 f827 	bl	8006e30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dec:	2b40      	cmp	r3, #64	; 0x40
 8006dee:	bf0c      	ite	eq
 8006df0:	2301      	moveq	r3, #1
 8006df2:	2300      	movne	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b22      	cmp	r3, #34	; 0x22
 8006e02:	d108      	bne.n	8006e16 <UART_DMAError+0x7a>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006e10:	68b8      	ldr	r0, [r7, #8]
 8006e12:	f000 f823 	bl	8006e5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1a:	f043 0210 	orr.w	r2, r3, #16
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e22:	68b8      	ldr	r0, [r7, #8]
 8006e24:	f7ff ff6e 	bl	8006d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006e46:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0201 	bic.w	r2, r2, #1
 8006e82:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f7ff ff26 	bl	8006d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b21      	cmp	r3, #33	; 0x21
 8006ed2:	d144      	bne.n	8006f5e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006edc:	d11a      	bne.n	8006f14 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d105      	bne.n	8006f08 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	1c9a      	adds	r2, r3, #2
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	621a      	str	r2, [r3, #32]
 8006f06:	e00e      	b.n	8006f26 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	621a      	str	r2, [r3, #32]
 8006f12:	e008      	b.n	8006f26 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	1c59      	adds	r1, r3, #1
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6211      	str	r1, [r2, #32]
 8006f1e:	781a      	ldrb	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	4619      	mov	r1, r3
 8006f34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10f      	bne.n	8006f5a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68da      	ldr	r2, [r3, #12]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e000      	b.n	8006f60 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f5e:	2302      	movs	r3, #2
  }
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fe9b 	bl	8006cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b22      	cmp	r3, #34	; 0x22
 8006fae:	d171      	bne.n	8007094 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb8:	d123      	bne.n	8007002 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10e      	bne.n	8006fe6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	1c9a      	adds	r2, r3, #2
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8006fe4:	e029      	b.n	800703a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8007000:	e01b      	b.n	800703a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6858      	ldr	r0, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	1c59      	adds	r1, r3, #1
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	6291      	str	r1, [r2, #40]	; 0x28
 800701a:	b2c2      	uxtb	r2, r0
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e00c      	b.n	800703a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	b2da      	uxtb	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702c:	1c58      	adds	r0, r3, #1
 800702e:	6879      	ldr	r1, [r7, #4]
 8007030:	6288      	str	r0, [r1, #40]	; 0x28
 8007032:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800703e:	b29b      	uxth	r3, r3
 8007040:	3b01      	subs	r3, #1
 8007042:	b29b      	uxth	r3, r3
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4619      	mov	r1, r3
 8007048:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800704a:	2b00      	cmp	r3, #0
 800704c:	d120      	bne.n	8007090 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0220 	bic.w	r2, r2, #32
 800705c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800706c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695a      	ldr	r2, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0201 	bic.w	r2, r2, #1
 800707c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff fe28 	bl	8006cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	e002      	b.n	8007096 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	e000      	b.n	8007096 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007094:	2302      	movs	r3, #2
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80070e2:	f023 030c 	bic.w	r3, r3, #12
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6812      	ldr	r2, [r2, #0]
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	430b      	orrs	r3, r1
 80070ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699a      	ldr	r2, [r3, #24]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800710e:	f040 818b 	bne.w	8007428 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4ac1      	ldr	r2, [pc, #772]	; (800741c <UART_SetConfig+0x37c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d005      	beq.n	8007128 <UART_SetConfig+0x88>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4abf      	ldr	r2, [pc, #764]	; (8007420 <UART_SetConfig+0x380>)
 8007122:	4293      	cmp	r3, r2
 8007124:	f040 80bd 	bne.w	80072a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007128:	f7fe fb68 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 800712c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	461d      	mov	r5, r3
 8007132:	f04f 0600 	mov.w	r6, #0
 8007136:	46a8      	mov	r8, r5
 8007138:	46b1      	mov	r9, r6
 800713a:	eb18 0308 	adds.w	r3, r8, r8
 800713e:	eb49 0409 	adc.w	r4, r9, r9
 8007142:	4698      	mov	r8, r3
 8007144:	46a1      	mov	r9, r4
 8007146:	eb18 0805 	adds.w	r8, r8, r5
 800714a:	eb49 0906 	adc.w	r9, r9, r6
 800714e:	f04f 0100 	mov.w	r1, #0
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800715a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800715e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007162:	4688      	mov	r8, r1
 8007164:	4691      	mov	r9, r2
 8007166:	eb18 0005 	adds.w	r0, r8, r5
 800716a:	eb49 0106 	adc.w	r1, r9, r6
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	461d      	mov	r5, r3
 8007174:	f04f 0600 	mov.w	r6, #0
 8007178:	196b      	adds	r3, r5, r5
 800717a:	eb46 0406 	adc.w	r4, r6, r6
 800717e:	461a      	mov	r2, r3
 8007180:	4623      	mov	r3, r4
 8007182:	f7f9 fd0d 	bl	8000ba0 <__aeabi_uldivmod>
 8007186:	4603      	mov	r3, r0
 8007188:	460c      	mov	r4, r1
 800718a:	461a      	mov	r2, r3
 800718c:	4ba5      	ldr	r3, [pc, #660]	; (8007424 <UART_SetConfig+0x384>)
 800718e:	fba3 2302 	umull	r2, r3, r3, r2
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	461d      	mov	r5, r3
 800719c:	f04f 0600 	mov.w	r6, #0
 80071a0:	46a9      	mov	r9, r5
 80071a2:	46b2      	mov	sl, r6
 80071a4:	eb19 0309 	adds.w	r3, r9, r9
 80071a8:	eb4a 040a 	adc.w	r4, sl, sl
 80071ac:	4699      	mov	r9, r3
 80071ae:	46a2      	mov	sl, r4
 80071b0:	eb19 0905 	adds.w	r9, r9, r5
 80071b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80071b8:	f04f 0100 	mov.w	r1, #0
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071cc:	4689      	mov	r9, r1
 80071ce:	4692      	mov	sl, r2
 80071d0:	eb19 0005 	adds.w	r0, r9, r5
 80071d4:	eb4a 0106 	adc.w	r1, sl, r6
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	461d      	mov	r5, r3
 80071de:	f04f 0600 	mov.w	r6, #0
 80071e2:	196b      	adds	r3, r5, r5
 80071e4:	eb46 0406 	adc.w	r4, r6, r6
 80071e8:	461a      	mov	r2, r3
 80071ea:	4623      	mov	r3, r4
 80071ec:	f7f9 fcd8 	bl	8000ba0 <__aeabi_uldivmod>
 80071f0:	4603      	mov	r3, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	461a      	mov	r2, r3
 80071f6:	4b8b      	ldr	r3, [pc, #556]	; (8007424 <UART_SetConfig+0x384>)
 80071f8:	fba3 1302 	umull	r1, r3, r3, r2
 80071fc:	095b      	lsrs	r3, r3, #5
 80071fe:	2164      	movs	r1, #100	; 0x64
 8007200:	fb01 f303 	mul.w	r3, r1, r3
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	3332      	adds	r3, #50	; 0x32
 800720a:	4a86      	ldr	r2, [pc, #536]	; (8007424 <UART_SetConfig+0x384>)
 800720c:	fba2 2303 	umull	r2, r3, r2, r3
 8007210:	095b      	lsrs	r3, r3, #5
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007218:	4498      	add	r8, r3
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	461d      	mov	r5, r3
 800721e:	f04f 0600 	mov.w	r6, #0
 8007222:	46a9      	mov	r9, r5
 8007224:	46b2      	mov	sl, r6
 8007226:	eb19 0309 	adds.w	r3, r9, r9
 800722a:	eb4a 040a 	adc.w	r4, sl, sl
 800722e:	4699      	mov	r9, r3
 8007230:	46a2      	mov	sl, r4
 8007232:	eb19 0905 	adds.w	r9, r9, r5
 8007236:	eb4a 0a06 	adc.w	sl, sl, r6
 800723a:	f04f 0100 	mov.w	r1, #0
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007246:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800724a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800724e:	4689      	mov	r9, r1
 8007250:	4692      	mov	sl, r2
 8007252:	eb19 0005 	adds.w	r0, r9, r5
 8007256:	eb4a 0106 	adc.w	r1, sl, r6
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	461d      	mov	r5, r3
 8007260:	f04f 0600 	mov.w	r6, #0
 8007264:	196b      	adds	r3, r5, r5
 8007266:	eb46 0406 	adc.w	r4, r6, r6
 800726a:	461a      	mov	r2, r3
 800726c:	4623      	mov	r3, r4
 800726e:	f7f9 fc97 	bl	8000ba0 <__aeabi_uldivmod>
 8007272:	4603      	mov	r3, r0
 8007274:	460c      	mov	r4, r1
 8007276:	461a      	mov	r2, r3
 8007278:	4b6a      	ldr	r3, [pc, #424]	; (8007424 <UART_SetConfig+0x384>)
 800727a:	fba3 1302 	umull	r1, r3, r3, r2
 800727e:	095b      	lsrs	r3, r3, #5
 8007280:	2164      	movs	r1, #100	; 0x64
 8007282:	fb01 f303 	mul.w	r3, r1, r3
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	3332      	adds	r3, #50	; 0x32
 800728c:	4a65      	ldr	r2, [pc, #404]	; (8007424 <UART_SetConfig+0x384>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	f003 0207 	and.w	r2, r3, #7
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4442      	add	r2, r8
 800729e:	609a      	str	r2, [r3, #8]
 80072a0:	e26f      	b.n	8007782 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072a2:	f7fe fa97 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 80072a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	461d      	mov	r5, r3
 80072ac:	f04f 0600 	mov.w	r6, #0
 80072b0:	46a8      	mov	r8, r5
 80072b2:	46b1      	mov	r9, r6
 80072b4:	eb18 0308 	adds.w	r3, r8, r8
 80072b8:	eb49 0409 	adc.w	r4, r9, r9
 80072bc:	4698      	mov	r8, r3
 80072be:	46a1      	mov	r9, r4
 80072c0:	eb18 0805 	adds.w	r8, r8, r5
 80072c4:	eb49 0906 	adc.w	r9, r9, r6
 80072c8:	f04f 0100 	mov.w	r1, #0
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80072d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80072d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072dc:	4688      	mov	r8, r1
 80072de:	4691      	mov	r9, r2
 80072e0:	eb18 0005 	adds.w	r0, r8, r5
 80072e4:	eb49 0106 	adc.w	r1, r9, r6
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	461d      	mov	r5, r3
 80072ee:	f04f 0600 	mov.w	r6, #0
 80072f2:	196b      	adds	r3, r5, r5
 80072f4:	eb46 0406 	adc.w	r4, r6, r6
 80072f8:	461a      	mov	r2, r3
 80072fa:	4623      	mov	r3, r4
 80072fc:	f7f9 fc50 	bl	8000ba0 <__aeabi_uldivmod>
 8007300:	4603      	mov	r3, r0
 8007302:	460c      	mov	r4, r1
 8007304:	461a      	mov	r2, r3
 8007306:	4b47      	ldr	r3, [pc, #284]	; (8007424 <UART_SetConfig+0x384>)
 8007308:	fba3 2302 	umull	r2, r3, r3, r2
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	461d      	mov	r5, r3
 8007316:	f04f 0600 	mov.w	r6, #0
 800731a:	46a9      	mov	r9, r5
 800731c:	46b2      	mov	sl, r6
 800731e:	eb19 0309 	adds.w	r3, r9, r9
 8007322:	eb4a 040a 	adc.w	r4, sl, sl
 8007326:	4699      	mov	r9, r3
 8007328:	46a2      	mov	sl, r4
 800732a:	eb19 0905 	adds.w	r9, r9, r5
 800732e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007332:	f04f 0100 	mov.w	r1, #0
 8007336:	f04f 0200 	mov.w	r2, #0
 800733a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800733e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007346:	4689      	mov	r9, r1
 8007348:	4692      	mov	sl, r2
 800734a:	eb19 0005 	adds.w	r0, r9, r5
 800734e:	eb4a 0106 	adc.w	r1, sl, r6
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	461d      	mov	r5, r3
 8007358:	f04f 0600 	mov.w	r6, #0
 800735c:	196b      	adds	r3, r5, r5
 800735e:	eb46 0406 	adc.w	r4, r6, r6
 8007362:	461a      	mov	r2, r3
 8007364:	4623      	mov	r3, r4
 8007366:	f7f9 fc1b 	bl	8000ba0 <__aeabi_uldivmod>
 800736a:	4603      	mov	r3, r0
 800736c:	460c      	mov	r4, r1
 800736e:	461a      	mov	r2, r3
 8007370:	4b2c      	ldr	r3, [pc, #176]	; (8007424 <UART_SetConfig+0x384>)
 8007372:	fba3 1302 	umull	r1, r3, r3, r2
 8007376:	095b      	lsrs	r3, r3, #5
 8007378:	2164      	movs	r1, #100	; 0x64
 800737a:	fb01 f303 	mul.w	r3, r1, r3
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	3332      	adds	r3, #50	; 0x32
 8007384:	4a27      	ldr	r2, [pc, #156]	; (8007424 <UART_SetConfig+0x384>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	095b      	lsrs	r3, r3, #5
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007392:	4498      	add	r8, r3
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	461d      	mov	r5, r3
 8007398:	f04f 0600 	mov.w	r6, #0
 800739c:	46a9      	mov	r9, r5
 800739e:	46b2      	mov	sl, r6
 80073a0:	eb19 0309 	adds.w	r3, r9, r9
 80073a4:	eb4a 040a 	adc.w	r4, sl, sl
 80073a8:	4699      	mov	r9, r3
 80073aa:	46a2      	mov	sl, r4
 80073ac:	eb19 0905 	adds.w	r9, r9, r5
 80073b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80073b4:	f04f 0100 	mov.w	r1, #0
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073c8:	4689      	mov	r9, r1
 80073ca:	4692      	mov	sl, r2
 80073cc:	eb19 0005 	adds.w	r0, r9, r5
 80073d0:	eb4a 0106 	adc.w	r1, sl, r6
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	461d      	mov	r5, r3
 80073da:	f04f 0600 	mov.w	r6, #0
 80073de:	196b      	adds	r3, r5, r5
 80073e0:	eb46 0406 	adc.w	r4, r6, r6
 80073e4:	461a      	mov	r2, r3
 80073e6:	4623      	mov	r3, r4
 80073e8:	f7f9 fbda 	bl	8000ba0 <__aeabi_uldivmod>
 80073ec:	4603      	mov	r3, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	461a      	mov	r2, r3
 80073f2:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <UART_SetConfig+0x384>)
 80073f4:	fba3 1302 	umull	r1, r3, r3, r2
 80073f8:	095b      	lsrs	r3, r3, #5
 80073fa:	2164      	movs	r1, #100	; 0x64
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	3332      	adds	r3, #50	; 0x32
 8007406:	4a07      	ldr	r2, [pc, #28]	; (8007424 <UART_SetConfig+0x384>)
 8007408:	fba2 2303 	umull	r2, r3, r2, r3
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	f003 0207 	and.w	r2, r3, #7
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4442      	add	r2, r8
 8007418:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800741a:	e1b2      	b.n	8007782 <UART_SetConfig+0x6e2>
 800741c:	40011000 	.word	0x40011000
 8007420:	40011400 	.word	0x40011400
 8007424:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4ad7      	ldr	r2, [pc, #860]	; (800778c <UART_SetConfig+0x6ec>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d005      	beq.n	800743e <UART_SetConfig+0x39e>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4ad6      	ldr	r2, [pc, #856]	; (8007790 <UART_SetConfig+0x6f0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	f040 80d1 	bne.w	80075e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800743e:	f7fe f9dd 	bl	80057fc <HAL_RCC_GetPCLK2Freq>
 8007442:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	469a      	mov	sl, r3
 8007448:	f04f 0b00 	mov.w	fp, #0
 800744c:	46d0      	mov	r8, sl
 800744e:	46d9      	mov	r9, fp
 8007450:	eb18 0308 	adds.w	r3, r8, r8
 8007454:	eb49 0409 	adc.w	r4, r9, r9
 8007458:	4698      	mov	r8, r3
 800745a:	46a1      	mov	r9, r4
 800745c:	eb18 080a 	adds.w	r8, r8, sl
 8007460:	eb49 090b 	adc.w	r9, r9, fp
 8007464:	f04f 0100 	mov.w	r1, #0
 8007468:	f04f 0200 	mov.w	r2, #0
 800746c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007470:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007474:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007478:	4688      	mov	r8, r1
 800747a:	4691      	mov	r9, r2
 800747c:	eb1a 0508 	adds.w	r5, sl, r8
 8007480:	eb4b 0609 	adc.w	r6, fp, r9
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	4619      	mov	r1, r3
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	f04f 0300 	mov.w	r3, #0
 8007492:	f04f 0400 	mov.w	r4, #0
 8007496:	0094      	lsls	r4, r2, #2
 8007498:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800749c:	008b      	lsls	r3, r1, #2
 800749e:	461a      	mov	r2, r3
 80074a0:	4623      	mov	r3, r4
 80074a2:	4628      	mov	r0, r5
 80074a4:	4631      	mov	r1, r6
 80074a6:	f7f9 fb7b 	bl	8000ba0 <__aeabi_uldivmod>
 80074aa:	4603      	mov	r3, r0
 80074ac:	460c      	mov	r4, r1
 80074ae:	461a      	mov	r2, r3
 80074b0:	4bb8      	ldr	r3, [pc, #736]	; (8007794 <UART_SetConfig+0x6f4>)
 80074b2:	fba3 2302 	umull	r2, r3, r3, r2
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	469b      	mov	fp, r3
 80074c0:	f04f 0c00 	mov.w	ip, #0
 80074c4:	46d9      	mov	r9, fp
 80074c6:	46e2      	mov	sl, ip
 80074c8:	eb19 0309 	adds.w	r3, r9, r9
 80074cc:	eb4a 040a 	adc.w	r4, sl, sl
 80074d0:	4699      	mov	r9, r3
 80074d2:	46a2      	mov	sl, r4
 80074d4:	eb19 090b 	adds.w	r9, r9, fp
 80074d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80074dc:	f04f 0100 	mov.w	r1, #0
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074f0:	4689      	mov	r9, r1
 80074f2:	4692      	mov	sl, r2
 80074f4:	eb1b 0509 	adds.w	r5, fp, r9
 80074f8:	eb4c 060a 	adc.w	r6, ip, sl
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	4619      	mov	r1, r3
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	f04f 0400 	mov.w	r4, #0
 800750e:	0094      	lsls	r4, r2, #2
 8007510:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007514:	008b      	lsls	r3, r1, #2
 8007516:	461a      	mov	r2, r3
 8007518:	4623      	mov	r3, r4
 800751a:	4628      	mov	r0, r5
 800751c:	4631      	mov	r1, r6
 800751e:	f7f9 fb3f 	bl	8000ba0 <__aeabi_uldivmod>
 8007522:	4603      	mov	r3, r0
 8007524:	460c      	mov	r4, r1
 8007526:	461a      	mov	r2, r3
 8007528:	4b9a      	ldr	r3, [pc, #616]	; (8007794 <UART_SetConfig+0x6f4>)
 800752a:	fba3 1302 	umull	r1, r3, r3, r2
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	2164      	movs	r1, #100	; 0x64
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	3332      	adds	r3, #50	; 0x32
 800753c:	4a95      	ldr	r2, [pc, #596]	; (8007794 <UART_SetConfig+0x6f4>)
 800753e:	fba2 2303 	umull	r2, r3, r2, r3
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007548:	4498      	add	r8, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	469b      	mov	fp, r3
 800754e:	f04f 0c00 	mov.w	ip, #0
 8007552:	46d9      	mov	r9, fp
 8007554:	46e2      	mov	sl, ip
 8007556:	eb19 0309 	adds.w	r3, r9, r9
 800755a:	eb4a 040a 	adc.w	r4, sl, sl
 800755e:	4699      	mov	r9, r3
 8007560:	46a2      	mov	sl, r4
 8007562:	eb19 090b 	adds.w	r9, r9, fp
 8007566:	eb4a 0a0c 	adc.w	sl, sl, ip
 800756a:	f04f 0100 	mov.w	r1, #0
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007576:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800757a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800757e:	4689      	mov	r9, r1
 8007580:	4692      	mov	sl, r2
 8007582:	eb1b 0509 	adds.w	r5, fp, r9
 8007586:	eb4c 060a 	adc.w	r6, ip, sl
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	4619      	mov	r1, r3
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	f04f 0400 	mov.w	r4, #0
 800759c:	0094      	lsls	r4, r2, #2
 800759e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075a2:	008b      	lsls	r3, r1, #2
 80075a4:	461a      	mov	r2, r3
 80075a6:	4623      	mov	r3, r4
 80075a8:	4628      	mov	r0, r5
 80075aa:	4631      	mov	r1, r6
 80075ac:	f7f9 faf8 	bl	8000ba0 <__aeabi_uldivmod>
 80075b0:	4603      	mov	r3, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	461a      	mov	r2, r3
 80075b6:	4b77      	ldr	r3, [pc, #476]	; (8007794 <UART_SetConfig+0x6f4>)
 80075b8:	fba3 1302 	umull	r1, r3, r3, r2
 80075bc:	095b      	lsrs	r3, r3, #5
 80075be:	2164      	movs	r1, #100	; 0x64
 80075c0:	fb01 f303 	mul.w	r3, r1, r3
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	3332      	adds	r3, #50	; 0x32
 80075ca:	4a72      	ldr	r2, [pc, #456]	; (8007794 <UART_SetConfig+0x6f4>)
 80075cc:	fba2 2303 	umull	r2, r3, r2, r3
 80075d0:	095b      	lsrs	r3, r3, #5
 80075d2:	f003 020f 	and.w	r2, r3, #15
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4442      	add	r2, r8
 80075dc:	609a      	str	r2, [r3, #8]
 80075de:	e0d0      	b.n	8007782 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80075e0:	f7fe f8f8 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 80075e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	469a      	mov	sl, r3
 80075ea:	f04f 0b00 	mov.w	fp, #0
 80075ee:	46d0      	mov	r8, sl
 80075f0:	46d9      	mov	r9, fp
 80075f2:	eb18 0308 	adds.w	r3, r8, r8
 80075f6:	eb49 0409 	adc.w	r4, r9, r9
 80075fa:	4698      	mov	r8, r3
 80075fc:	46a1      	mov	r9, r4
 80075fe:	eb18 080a 	adds.w	r8, r8, sl
 8007602:	eb49 090b 	adc.w	r9, r9, fp
 8007606:	f04f 0100 	mov.w	r1, #0
 800760a:	f04f 0200 	mov.w	r2, #0
 800760e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007612:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007616:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800761a:	4688      	mov	r8, r1
 800761c:	4691      	mov	r9, r2
 800761e:	eb1a 0508 	adds.w	r5, sl, r8
 8007622:	eb4b 0609 	adc.w	r6, fp, r9
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	4619      	mov	r1, r3
 800762c:	f04f 0200 	mov.w	r2, #0
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	f04f 0400 	mov.w	r4, #0
 8007638:	0094      	lsls	r4, r2, #2
 800763a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800763e:	008b      	lsls	r3, r1, #2
 8007640:	461a      	mov	r2, r3
 8007642:	4623      	mov	r3, r4
 8007644:	4628      	mov	r0, r5
 8007646:	4631      	mov	r1, r6
 8007648:	f7f9 faaa 	bl	8000ba0 <__aeabi_uldivmod>
 800764c:	4603      	mov	r3, r0
 800764e:	460c      	mov	r4, r1
 8007650:	461a      	mov	r2, r3
 8007652:	4b50      	ldr	r3, [pc, #320]	; (8007794 <UART_SetConfig+0x6f4>)
 8007654:	fba3 2302 	umull	r2, r3, r3, r2
 8007658:	095b      	lsrs	r3, r3, #5
 800765a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	469b      	mov	fp, r3
 8007662:	f04f 0c00 	mov.w	ip, #0
 8007666:	46d9      	mov	r9, fp
 8007668:	46e2      	mov	sl, ip
 800766a:	eb19 0309 	adds.w	r3, r9, r9
 800766e:	eb4a 040a 	adc.w	r4, sl, sl
 8007672:	4699      	mov	r9, r3
 8007674:	46a2      	mov	sl, r4
 8007676:	eb19 090b 	adds.w	r9, r9, fp
 800767a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800767e:	f04f 0100 	mov.w	r1, #0
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800768a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800768e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007692:	4689      	mov	r9, r1
 8007694:	4692      	mov	sl, r2
 8007696:	eb1b 0509 	adds.w	r5, fp, r9
 800769a:	eb4c 060a 	adc.w	r6, ip, sl
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	4619      	mov	r1, r3
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	f04f 0300 	mov.w	r3, #0
 80076ac:	f04f 0400 	mov.w	r4, #0
 80076b0:	0094      	lsls	r4, r2, #2
 80076b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076b6:	008b      	lsls	r3, r1, #2
 80076b8:	461a      	mov	r2, r3
 80076ba:	4623      	mov	r3, r4
 80076bc:	4628      	mov	r0, r5
 80076be:	4631      	mov	r1, r6
 80076c0:	f7f9 fa6e 	bl	8000ba0 <__aeabi_uldivmod>
 80076c4:	4603      	mov	r3, r0
 80076c6:	460c      	mov	r4, r1
 80076c8:	461a      	mov	r2, r3
 80076ca:	4b32      	ldr	r3, [pc, #200]	; (8007794 <UART_SetConfig+0x6f4>)
 80076cc:	fba3 1302 	umull	r1, r3, r3, r2
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	2164      	movs	r1, #100	; 0x64
 80076d4:	fb01 f303 	mul.w	r3, r1, r3
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	3332      	adds	r3, #50	; 0x32
 80076de:	4a2d      	ldr	r2, [pc, #180]	; (8007794 <UART_SetConfig+0x6f4>)
 80076e0:	fba2 2303 	umull	r2, r3, r2, r3
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076ea:	4498      	add	r8, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	469b      	mov	fp, r3
 80076f0:	f04f 0c00 	mov.w	ip, #0
 80076f4:	46d9      	mov	r9, fp
 80076f6:	46e2      	mov	sl, ip
 80076f8:	eb19 0309 	adds.w	r3, r9, r9
 80076fc:	eb4a 040a 	adc.w	r4, sl, sl
 8007700:	4699      	mov	r9, r3
 8007702:	46a2      	mov	sl, r4
 8007704:	eb19 090b 	adds.w	r9, r9, fp
 8007708:	eb4a 0a0c 	adc.w	sl, sl, ip
 800770c:	f04f 0100 	mov.w	r1, #0
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007718:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800771c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007720:	4689      	mov	r9, r1
 8007722:	4692      	mov	sl, r2
 8007724:	eb1b 0509 	adds.w	r5, fp, r9
 8007728:	eb4c 060a 	adc.w	r6, ip, sl
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	4619      	mov	r1, r3
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	f04f 0400 	mov.w	r4, #0
 800773e:	0094      	lsls	r4, r2, #2
 8007740:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007744:	008b      	lsls	r3, r1, #2
 8007746:	461a      	mov	r2, r3
 8007748:	4623      	mov	r3, r4
 800774a:	4628      	mov	r0, r5
 800774c:	4631      	mov	r1, r6
 800774e:	f7f9 fa27 	bl	8000ba0 <__aeabi_uldivmod>
 8007752:	4603      	mov	r3, r0
 8007754:	460c      	mov	r4, r1
 8007756:	461a      	mov	r2, r3
 8007758:	4b0e      	ldr	r3, [pc, #56]	; (8007794 <UART_SetConfig+0x6f4>)
 800775a:	fba3 1302 	umull	r1, r3, r3, r2
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	2164      	movs	r1, #100	; 0x64
 8007762:	fb01 f303 	mul.w	r3, r1, r3
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	3332      	adds	r3, #50	; 0x32
 800776c:	4a09      	ldr	r2, [pc, #36]	; (8007794 <UART_SetConfig+0x6f4>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	f003 020f 	and.w	r2, r3, #15
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4442      	add	r2, r8
 800777e:	609a      	str	r2, [r3, #8]
}
 8007780:	e7ff      	b.n	8007782 <UART_SetConfig+0x6e2>
 8007782:	bf00      	nop
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778c:	40011000 	.word	0x40011000
 8007790:	40011400 	.word	0x40011400
 8007794:	51eb851f 	.word	0x51eb851f

08007798 <__errno>:
 8007798:	4b01      	ldr	r3, [pc, #4]	; (80077a0 <__errno+0x8>)
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000034 	.word	0x20000034

080077a4 <__libc_init_array>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	4e0d      	ldr	r6, [pc, #52]	; (80077dc <__libc_init_array+0x38>)
 80077a8:	4c0d      	ldr	r4, [pc, #52]	; (80077e0 <__libc_init_array+0x3c>)
 80077aa:	1ba4      	subs	r4, r4, r6
 80077ac:	10a4      	asrs	r4, r4, #2
 80077ae:	2500      	movs	r5, #0
 80077b0:	42a5      	cmp	r5, r4
 80077b2:	d109      	bne.n	80077c8 <__libc_init_array+0x24>
 80077b4:	4e0b      	ldr	r6, [pc, #44]	; (80077e4 <__libc_init_array+0x40>)
 80077b6:	4c0c      	ldr	r4, [pc, #48]	; (80077e8 <__libc_init_array+0x44>)
 80077b8:	f001 fd44 	bl	8009244 <_init>
 80077bc:	1ba4      	subs	r4, r4, r6
 80077be:	10a4      	asrs	r4, r4, #2
 80077c0:	2500      	movs	r5, #0
 80077c2:	42a5      	cmp	r5, r4
 80077c4:	d105      	bne.n	80077d2 <__libc_init_array+0x2e>
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077cc:	4798      	blx	r3
 80077ce:	3501      	adds	r5, #1
 80077d0:	e7ee      	b.n	80077b0 <__libc_init_array+0xc>
 80077d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077d6:	4798      	blx	r3
 80077d8:	3501      	adds	r5, #1
 80077da:	e7f2      	b.n	80077c2 <__libc_init_array+0x1e>
 80077dc:	080094b8 	.word	0x080094b8
 80077e0:	080094b8 	.word	0x080094b8
 80077e4:	080094b8 	.word	0x080094b8
 80077e8:	080094bc 	.word	0x080094bc

080077ec <memset>:
 80077ec:	4402      	add	r2, r0
 80077ee:	4603      	mov	r3, r0
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d100      	bne.n	80077f6 <memset+0xa>
 80077f4:	4770      	bx	lr
 80077f6:	f803 1b01 	strb.w	r1, [r3], #1
 80077fa:	e7f9      	b.n	80077f0 <memset+0x4>

080077fc <__cvt>:
 80077fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007800:	ec55 4b10 	vmov	r4, r5, d0
 8007804:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007806:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800780a:	2d00      	cmp	r5, #0
 800780c:	460e      	mov	r6, r1
 800780e:	4691      	mov	r9, r2
 8007810:	4619      	mov	r1, r3
 8007812:	bfb8      	it	lt
 8007814:	4622      	movlt	r2, r4
 8007816:	462b      	mov	r3, r5
 8007818:	f027 0720 	bic.w	r7, r7, #32
 800781c:	bfbb      	ittet	lt
 800781e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007822:	461d      	movlt	r5, r3
 8007824:	2300      	movge	r3, #0
 8007826:	232d      	movlt	r3, #45	; 0x2d
 8007828:	bfb8      	it	lt
 800782a:	4614      	movlt	r4, r2
 800782c:	2f46      	cmp	r7, #70	; 0x46
 800782e:	700b      	strb	r3, [r1, #0]
 8007830:	d004      	beq.n	800783c <__cvt+0x40>
 8007832:	2f45      	cmp	r7, #69	; 0x45
 8007834:	d100      	bne.n	8007838 <__cvt+0x3c>
 8007836:	3601      	adds	r6, #1
 8007838:	2102      	movs	r1, #2
 800783a:	e000      	b.n	800783e <__cvt+0x42>
 800783c:	2103      	movs	r1, #3
 800783e:	ab03      	add	r3, sp, #12
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	ab02      	add	r3, sp, #8
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4632      	mov	r2, r6
 8007848:	4653      	mov	r3, sl
 800784a:	ec45 4b10 	vmov	d0, r4, r5
 800784e:	f000 fbab 	bl	8007fa8 <_dtoa_r>
 8007852:	2f47      	cmp	r7, #71	; 0x47
 8007854:	4680      	mov	r8, r0
 8007856:	d102      	bne.n	800785e <__cvt+0x62>
 8007858:	f019 0f01 	tst.w	r9, #1
 800785c:	d026      	beq.n	80078ac <__cvt+0xb0>
 800785e:	2f46      	cmp	r7, #70	; 0x46
 8007860:	eb08 0906 	add.w	r9, r8, r6
 8007864:	d111      	bne.n	800788a <__cvt+0x8e>
 8007866:	f898 3000 	ldrb.w	r3, [r8]
 800786a:	2b30      	cmp	r3, #48	; 0x30
 800786c:	d10a      	bne.n	8007884 <__cvt+0x88>
 800786e:	2200      	movs	r2, #0
 8007870:	2300      	movs	r3, #0
 8007872:	4620      	mov	r0, r4
 8007874:	4629      	mov	r1, r5
 8007876:	f7f9 f8d3 	bl	8000a20 <__aeabi_dcmpeq>
 800787a:	b918      	cbnz	r0, 8007884 <__cvt+0x88>
 800787c:	f1c6 0601 	rsb	r6, r6, #1
 8007880:	f8ca 6000 	str.w	r6, [sl]
 8007884:	f8da 3000 	ldr.w	r3, [sl]
 8007888:	4499      	add	r9, r3
 800788a:	2200      	movs	r2, #0
 800788c:	2300      	movs	r3, #0
 800788e:	4620      	mov	r0, r4
 8007890:	4629      	mov	r1, r5
 8007892:	f7f9 f8c5 	bl	8000a20 <__aeabi_dcmpeq>
 8007896:	b938      	cbnz	r0, 80078a8 <__cvt+0xac>
 8007898:	2230      	movs	r2, #48	; 0x30
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	454b      	cmp	r3, r9
 800789e:	d205      	bcs.n	80078ac <__cvt+0xb0>
 80078a0:	1c59      	adds	r1, r3, #1
 80078a2:	9103      	str	r1, [sp, #12]
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	e7f8      	b.n	800789a <__cvt+0x9e>
 80078a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078b0:	eba3 0308 	sub.w	r3, r3, r8
 80078b4:	4640      	mov	r0, r8
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	b004      	add	sp, #16
 80078ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080078be <__exponent>:
 80078be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078c0:	2900      	cmp	r1, #0
 80078c2:	4604      	mov	r4, r0
 80078c4:	bfba      	itte	lt
 80078c6:	4249      	neglt	r1, r1
 80078c8:	232d      	movlt	r3, #45	; 0x2d
 80078ca:	232b      	movge	r3, #43	; 0x2b
 80078cc:	2909      	cmp	r1, #9
 80078ce:	f804 2b02 	strb.w	r2, [r4], #2
 80078d2:	7043      	strb	r3, [r0, #1]
 80078d4:	dd20      	ble.n	8007918 <__exponent+0x5a>
 80078d6:	f10d 0307 	add.w	r3, sp, #7
 80078da:	461f      	mov	r7, r3
 80078dc:	260a      	movs	r6, #10
 80078de:	fb91 f5f6 	sdiv	r5, r1, r6
 80078e2:	fb06 1115 	mls	r1, r6, r5, r1
 80078e6:	3130      	adds	r1, #48	; 0x30
 80078e8:	2d09      	cmp	r5, #9
 80078ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078ee:	f103 32ff 	add.w	r2, r3, #4294967295
 80078f2:	4629      	mov	r1, r5
 80078f4:	dc09      	bgt.n	800790a <__exponent+0x4c>
 80078f6:	3130      	adds	r1, #48	; 0x30
 80078f8:	3b02      	subs	r3, #2
 80078fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80078fe:	42bb      	cmp	r3, r7
 8007900:	4622      	mov	r2, r4
 8007902:	d304      	bcc.n	800790e <__exponent+0x50>
 8007904:	1a10      	subs	r0, r2, r0
 8007906:	b003      	add	sp, #12
 8007908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800790a:	4613      	mov	r3, r2
 800790c:	e7e7      	b.n	80078de <__exponent+0x20>
 800790e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007912:	f804 2b01 	strb.w	r2, [r4], #1
 8007916:	e7f2      	b.n	80078fe <__exponent+0x40>
 8007918:	2330      	movs	r3, #48	; 0x30
 800791a:	4419      	add	r1, r3
 800791c:	7083      	strb	r3, [r0, #2]
 800791e:	1d02      	adds	r2, r0, #4
 8007920:	70c1      	strb	r1, [r0, #3]
 8007922:	e7ef      	b.n	8007904 <__exponent+0x46>

08007924 <_printf_float>:
 8007924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	b08d      	sub	sp, #52	; 0x34
 800792a:	460c      	mov	r4, r1
 800792c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007930:	4616      	mov	r6, r2
 8007932:	461f      	mov	r7, r3
 8007934:	4605      	mov	r5, r0
 8007936:	f001 f8ef 	bl	8008b18 <_localeconv_r>
 800793a:	6803      	ldr	r3, [r0, #0]
 800793c:	9304      	str	r3, [sp, #16]
 800793e:	4618      	mov	r0, r3
 8007940:	f7f8 fc42 	bl	80001c8 <strlen>
 8007944:	2300      	movs	r3, #0
 8007946:	930a      	str	r3, [sp, #40]	; 0x28
 8007948:	f8d8 3000 	ldr.w	r3, [r8]
 800794c:	9005      	str	r0, [sp, #20]
 800794e:	3307      	adds	r3, #7
 8007950:	f023 0307 	bic.w	r3, r3, #7
 8007954:	f103 0208 	add.w	r2, r3, #8
 8007958:	f894 a018 	ldrb.w	sl, [r4, #24]
 800795c:	f8d4 b000 	ldr.w	fp, [r4]
 8007960:	f8c8 2000 	str.w	r2, [r8]
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800796c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007970:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	f8cd 8018 	str.w	r8, [sp, #24]
 800797a:	f04f 32ff 	mov.w	r2, #4294967295
 800797e:	4ba7      	ldr	r3, [pc, #668]	; (8007c1c <_printf_float+0x2f8>)
 8007980:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007984:	f7f9 f87e 	bl	8000a84 <__aeabi_dcmpun>
 8007988:	bb70      	cbnz	r0, 80079e8 <_printf_float+0xc4>
 800798a:	f04f 32ff 	mov.w	r2, #4294967295
 800798e:	4ba3      	ldr	r3, [pc, #652]	; (8007c1c <_printf_float+0x2f8>)
 8007990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007994:	f7f9 f858 	bl	8000a48 <__aeabi_dcmple>
 8007998:	bb30      	cbnz	r0, 80079e8 <_printf_float+0xc4>
 800799a:	2200      	movs	r2, #0
 800799c:	2300      	movs	r3, #0
 800799e:	4640      	mov	r0, r8
 80079a0:	4649      	mov	r1, r9
 80079a2:	f7f9 f847 	bl	8000a34 <__aeabi_dcmplt>
 80079a6:	b110      	cbz	r0, 80079ae <_printf_float+0x8a>
 80079a8:	232d      	movs	r3, #45	; 0x2d
 80079aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ae:	4a9c      	ldr	r2, [pc, #624]	; (8007c20 <_printf_float+0x2fc>)
 80079b0:	4b9c      	ldr	r3, [pc, #624]	; (8007c24 <_printf_float+0x300>)
 80079b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80079b6:	bf8c      	ite	hi
 80079b8:	4690      	movhi	r8, r2
 80079ba:	4698      	movls	r8, r3
 80079bc:	2303      	movs	r3, #3
 80079be:	f02b 0204 	bic.w	r2, fp, #4
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	6022      	str	r2, [r4, #0]
 80079c6:	f04f 0900 	mov.w	r9, #0
 80079ca:	9700      	str	r7, [sp, #0]
 80079cc:	4633      	mov	r3, r6
 80079ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80079d0:	4621      	mov	r1, r4
 80079d2:	4628      	mov	r0, r5
 80079d4:	f000 f9e6 	bl	8007da4 <_printf_common>
 80079d8:	3001      	adds	r0, #1
 80079da:	f040 808d 	bne.w	8007af8 <_printf_float+0x1d4>
 80079de:	f04f 30ff 	mov.w	r0, #4294967295
 80079e2:	b00d      	add	sp, #52	; 0x34
 80079e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e8:	4642      	mov	r2, r8
 80079ea:	464b      	mov	r3, r9
 80079ec:	4640      	mov	r0, r8
 80079ee:	4649      	mov	r1, r9
 80079f0:	f7f9 f848 	bl	8000a84 <__aeabi_dcmpun>
 80079f4:	b110      	cbz	r0, 80079fc <_printf_float+0xd8>
 80079f6:	4a8c      	ldr	r2, [pc, #560]	; (8007c28 <_printf_float+0x304>)
 80079f8:	4b8c      	ldr	r3, [pc, #560]	; (8007c2c <_printf_float+0x308>)
 80079fa:	e7da      	b.n	80079b2 <_printf_float+0x8e>
 80079fc:	6861      	ldr	r1, [r4, #4]
 80079fe:	1c4b      	adds	r3, r1, #1
 8007a00:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007a04:	a80a      	add	r0, sp, #40	; 0x28
 8007a06:	d13e      	bne.n	8007a86 <_printf_float+0x162>
 8007a08:	2306      	movs	r3, #6
 8007a0a:	6063      	str	r3, [r4, #4]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007a12:	ab09      	add	r3, sp, #36	; 0x24
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	ec49 8b10 	vmov	d0, r8, r9
 8007a1a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a1e:	6022      	str	r2, [r4, #0]
 8007a20:	f8cd a004 	str.w	sl, [sp, #4]
 8007a24:	6861      	ldr	r1, [r4, #4]
 8007a26:	4628      	mov	r0, r5
 8007a28:	f7ff fee8 	bl	80077fc <__cvt>
 8007a2c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007a30:	2b47      	cmp	r3, #71	; 0x47
 8007a32:	4680      	mov	r8, r0
 8007a34:	d109      	bne.n	8007a4a <_printf_float+0x126>
 8007a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a38:	1cd8      	adds	r0, r3, #3
 8007a3a:	db02      	blt.n	8007a42 <_printf_float+0x11e>
 8007a3c:	6862      	ldr	r2, [r4, #4]
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	dd47      	ble.n	8007ad2 <_printf_float+0x1ae>
 8007a42:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a46:	fa5f fa8a 	uxtb.w	sl, sl
 8007a4a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007a4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a50:	d824      	bhi.n	8007a9c <_printf_float+0x178>
 8007a52:	3901      	subs	r1, #1
 8007a54:	4652      	mov	r2, sl
 8007a56:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a5a:	9109      	str	r1, [sp, #36]	; 0x24
 8007a5c:	f7ff ff2f 	bl	80078be <__exponent>
 8007a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a62:	1813      	adds	r3, r2, r0
 8007a64:	2a01      	cmp	r2, #1
 8007a66:	4681      	mov	r9, r0
 8007a68:	6123      	str	r3, [r4, #16]
 8007a6a:	dc02      	bgt.n	8007a72 <_printf_float+0x14e>
 8007a6c:	6822      	ldr	r2, [r4, #0]
 8007a6e:	07d1      	lsls	r1, r2, #31
 8007a70:	d501      	bpl.n	8007a76 <_printf_float+0x152>
 8007a72:	3301      	adds	r3, #1
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0a5      	beq.n	80079ca <_printf_float+0xa6>
 8007a7e:	232d      	movs	r3, #45	; 0x2d
 8007a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a84:	e7a1      	b.n	80079ca <_printf_float+0xa6>
 8007a86:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007a8a:	f000 8177 	beq.w	8007d7c <_printf_float+0x458>
 8007a8e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007a92:	d1bb      	bne.n	8007a0c <_printf_float+0xe8>
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d1b9      	bne.n	8007a0c <_printf_float+0xe8>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e7b6      	b.n	8007a0a <_printf_float+0xe6>
 8007a9c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007aa0:	d119      	bne.n	8007ad6 <_printf_float+0x1b2>
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	6863      	ldr	r3, [r4, #4]
 8007aa6:	dd0c      	ble.n	8007ac2 <_printf_float+0x19e>
 8007aa8:	6121      	str	r1, [r4, #16]
 8007aaa:	b913      	cbnz	r3, 8007ab2 <_printf_float+0x18e>
 8007aac:	6822      	ldr	r2, [r4, #0]
 8007aae:	07d2      	lsls	r2, r2, #31
 8007ab0:	d502      	bpl.n	8007ab8 <_printf_float+0x194>
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	440b      	add	r3, r1
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aba:	65a3      	str	r3, [r4, #88]	; 0x58
 8007abc:	f04f 0900 	mov.w	r9, #0
 8007ac0:	e7d9      	b.n	8007a76 <_printf_float+0x152>
 8007ac2:	b913      	cbnz	r3, 8007aca <_printf_float+0x1a6>
 8007ac4:	6822      	ldr	r2, [r4, #0]
 8007ac6:	07d0      	lsls	r0, r2, #31
 8007ac8:	d501      	bpl.n	8007ace <_printf_float+0x1aa>
 8007aca:	3302      	adds	r3, #2
 8007acc:	e7f3      	b.n	8007ab6 <_printf_float+0x192>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e7f1      	b.n	8007ab6 <_printf_float+0x192>
 8007ad2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007ad6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ada:	4293      	cmp	r3, r2
 8007adc:	db05      	blt.n	8007aea <_printf_float+0x1c6>
 8007ade:	6822      	ldr	r2, [r4, #0]
 8007ae0:	6123      	str	r3, [r4, #16]
 8007ae2:	07d1      	lsls	r1, r2, #31
 8007ae4:	d5e8      	bpl.n	8007ab8 <_printf_float+0x194>
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	e7e5      	b.n	8007ab6 <_printf_float+0x192>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bfd4      	ite	le
 8007aee:	f1c3 0302 	rsble	r3, r3, #2
 8007af2:	2301      	movgt	r3, #1
 8007af4:	4413      	add	r3, r2
 8007af6:	e7de      	b.n	8007ab6 <_printf_float+0x192>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	055a      	lsls	r2, r3, #21
 8007afc:	d407      	bmi.n	8007b0e <_printf_float+0x1ea>
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	4642      	mov	r2, r8
 8007b02:	4631      	mov	r1, r6
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b8      	blx	r7
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d12b      	bne.n	8007b64 <_printf_float+0x240>
 8007b0c:	e767      	b.n	80079de <_printf_float+0xba>
 8007b0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007b12:	f240 80dc 	bls.w	8007cce <_printf_float+0x3aa>
 8007b16:	2200      	movs	r2, #0
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b1e:	f7f8 ff7f 	bl	8000a20 <__aeabi_dcmpeq>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d033      	beq.n	8007b8e <_printf_float+0x26a>
 8007b26:	2301      	movs	r3, #1
 8007b28:	4a41      	ldr	r2, [pc, #260]	; (8007c30 <_printf_float+0x30c>)
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b8      	blx	r7
 8007b30:	3001      	adds	r0, #1
 8007b32:	f43f af54 	beq.w	80079de <_printf_float+0xba>
 8007b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	db02      	blt.n	8007b44 <_printf_float+0x220>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	07d8      	lsls	r0, r3, #31
 8007b42:	d50f      	bpl.n	8007b64 <_printf_float+0x240>
 8007b44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	f43f af45 	beq.w	80079de <_printf_float+0xba>
 8007b54:	f04f 0800 	mov.w	r8, #0
 8007b58:	f104 091a 	add.w	r9, r4, #26
 8007b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	4543      	cmp	r3, r8
 8007b62:	dc09      	bgt.n	8007b78 <_printf_float+0x254>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	079b      	lsls	r3, r3, #30
 8007b68:	f100 8103 	bmi.w	8007d72 <_printf_float+0x44e>
 8007b6c:	68e0      	ldr	r0, [r4, #12]
 8007b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b70:	4298      	cmp	r0, r3
 8007b72:	bfb8      	it	lt
 8007b74:	4618      	movlt	r0, r3
 8007b76:	e734      	b.n	80079e2 <_printf_float+0xbe>
 8007b78:	2301      	movs	r3, #1
 8007b7a:	464a      	mov	r2, r9
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	f43f af2b 	beq.w	80079de <_printf_float+0xba>
 8007b88:	f108 0801 	add.w	r8, r8, #1
 8007b8c:	e7e6      	b.n	8007b5c <_printf_float+0x238>
 8007b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	dc2b      	bgt.n	8007bec <_printf_float+0x2c8>
 8007b94:	2301      	movs	r3, #1
 8007b96:	4a26      	ldr	r2, [pc, #152]	; (8007c30 <_printf_float+0x30c>)
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f43f af1d 	beq.w	80079de <_printf_float+0xba>
 8007ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ba6:	b923      	cbnz	r3, 8007bb2 <_printf_float+0x28e>
 8007ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007baa:	b913      	cbnz	r3, 8007bb2 <_printf_float+0x28e>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	07d9      	lsls	r1, r3, #31
 8007bb0:	d5d8      	bpl.n	8007b64 <_printf_float+0x240>
 8007bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f43f af0e 	beq.w	80079de <_printf_float+0xba>
 8007bc2:	f04f 0900 	mov.w	r9, #0
 8007bc6:	f104 0a1a 	add.w	sl, r4, #26
 8007bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bcc:	425b      	negs	r3, r3
 8007bce:	454b      	cmp	r3, r9
 8007bd0:	dc01      	bgt.n	8007bd6 <_printf_float+0x2b2>
 8007bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd4:	e794      	b.n	8007b00 <_printf_float+0x1dc>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4652      	mov	r2, sl
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	f43f aefc 	beq.w	80079de <_printf_float+0xba>
 8007be6:	f109 0901 	add.w	r9, r9, #1
 8007bea:	e7ee      	b.n	8007bca <_printf_float+0x2a6>
 8007bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	bfa8      	it	ge
 8007bf4:	461a      	movge	r2, r3
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	4691      	mov	r9, r2
 8007bfa:	dd07      	ble.n	8007c0c <_printf_float+0x2e8>
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4642      	mov	r2, r8
 8007c02:	4628      	mov	r0, r5
 8007c04:	47b8      	blx	r7
 8007c06:	3001      	adds	r0, #1
 8007c08:	f43f aee9 	beq.w	80079de <_printf_float+0xba>
 8007c0c:	f104 031a 	add.w	r3, r4, #26
 8007c10:	f04f 0b00 	mov.w	fp, #0
 8007c14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c18:	9306      	str	r3, [sp, #24]
 8007c1a:	e015      	b.n	8007c48 <_printf_float+0x324>
 8007c1c:	7fefffff 	.word	0x7fefffff
 8007c20:	08009288 	.word	0x08009288
 8007c24:	08009284 	.word	0x08009284
 8007c28:	08009290 	.word	0x08009290
 8007c2c:	0800928c 	.word	0x0800928c
 8007c30:	08009294 	.word	0x08009294
 8007c34:	2301      	movs	r3, #1
 8007c36:	9a06      	ldr	r2, [sp, #24]
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	47b8      	blx	r7
 8007c3e:	3001      	adds	r0, #1
 8007c40:	f43f aecd 	beq.w	80079de <_printf_float+0xba>
 8007c44:	f10b 0b01 	add.w	fp, fp, #1
 8007c48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007c4c:	ebaa 0309 	sub.w	r3, sl, r9
 8007c50:	455b      	cmp	r3, fp
 8007c52:	dcef      	bgt.n	8007c34 <_printf_float+0x310>
 8007c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	44d0      	add	r8, sl
 8007c5c:	db15      	blt.n	8007c8a <_printf_float+0x366>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	07da      	lsls	r2, r3, #31
 8007c62:	d412      	bmi.n	8007c8a <_printf_float+0x366>
 8007c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c68:	eba3 020a 	sub.w	r2, r3, sl
 8007c6c:	eba3 0a01 	sub.w	sl, r3, r1
 8007c70:	4592      	cmp	sl, r2
 8007c72:	bfa8      	it	ge
 8007c74:	4692      	movge	sl, r2
 8007c76:	f1ba 0f00 	cmp.w	sl, #0
 8007c7a:	dc0e      	bgt.n	8007c9a <_printf_float+0x376>
 8007c7c:	f04f 0800 	mov.w	r8, #0
 8007c80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c84:	f104 091a 	add.w	r9, r4, #26
 8007c88:	e019      	b.n	8007cbe <_printf_float+0x39a>
 8007c8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	d1e5      	bne.n	8007c64 <_printf_float+0x340>
 8007c98:	e6a1      	b.n	80079de <_printf_float+0xba>
 8007c9a:	4653      	mov	r3, sl
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b8      	blx	r7
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d1e9      	bne.n	8007c7c <_printf_float+0x358>
 8007ca8:	e699      	b.n	80079de <_printf_float+0xba>
 8007caa:	2301      	movs	r3, #1
 8007cac:	464a      	mov	r2, r9
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	f43f ae92 	beq.w	80079de <_printf_float+0xba>
 8007cba:	f108 0801 	add.w	r8, r8, #1
 8007cbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cc2:	1a9b      	subs	r3, r3, r2
 8007cc4:	eba3 030a 	sub.w	r3, r3, sl
 8007cc8:	4543      	cmp	r3, r8
 8007cca:	dcee      	bgt.n	8007caa <_printf_float+0x386>
 8007ccc:	e74a      	b.n	8007b64 <_printf_float+0x240>
 8007cce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cd0:	2a01      	cmp	r2, #1
 8007cd2:	dc01      	bgt.n	8007cd8 <_printf_float+0x3b4>
 8007cd4:	07db      	lsls	r3, r3, #31
 8007cd6:	d53a      	bpl.n	8007d4e <_printf_float+0x42a>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4642      	mov	r2, r8
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b8      	blx	r7
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	f43f ae7b 	beq.w	80079de <_printf_float+0xba>
 8007ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f108 0801 	add.w	r8, r8, #1
 8007cf8:	f43f ae71 	beq.w	80079de <_printf_float+0xba>
 8007cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f103 3aff 	add.w	sl, r3, #4294967295
 8007d04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f7f8 fe89 	bl	8000a20 <__aeabi_dcmpeq>
 8007d0e:	b9c8      	cbnz	r0, 8007d44 <_printf_float+0x420>
 8007d10:	4653      	mov	r3, sl
 8007d12:	4642      	mov	r2, r8
 8007d14:	4631      	mov	r1, r6
 8007d16:	4628      	mov	r0, r5
 8007d18:	47b8      	blx	r7
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	d10e      	bne.n	8007d3c <_printf_float+0x418>
 8007d1e:	e65e      	b.n	80079de <_printf_float+0xba>
 8007d20:	2301      	movs	r3, #1
 8007d22:	4652      	mov	r2, sl
 8007d24:	4631      	mov	r1, r6
 8007d26:	4628      	mov	r0, r5
 8007d28:	47b8      	blx	r7
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	f43f ae57 	beq.w	80079de <_printf_float+0xba>
 8007d30:	f108 0801 	add.w	r8, r8, #1
 8007d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d36:	3b01      	subs	r3, #1
 8007d38:	4543      	cmp	r3, r8
 8007d3a:	dcf1      	bgt.n	8007d20 <_printf_float+0x3fc>
 8007d3c:	464b      	mov	r3, r9
 8007d3e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d42:	e6de      	b.n	8007b02 <_printf_float+0x1de>
 8007d44:	f04f 0800 	mov.w	r8, #0
 8007d48:	f104 0a1a 	add.w	sl, r4, #26
 8007d4c:	e7f2      	b.n	8007d34 <_printf_float+0x410>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e7df      	b.n	8007d12 <_printf_float+0x3ee>
 8007d52:	2301      	movs	r3, #1
 8007d54:	464a      	mov	r2, r9
 8007d56:	4631      	mov	r1, r6
 8007d58:	4628      	mov	r0, r5
 8007d5a:	47b8      	blx	r7
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	f43f ae3e 	beq.w	80079de <_printf_float+0xba>
 8007d62:	f108 0801 	add.w	r8, r8, #1
 8007d66:	68e3      	ldr	r3, [r4, #12]
 8007d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	4543      	cmp	r3, r8
 8007d6e:	dcf0      	bgt.n	8007d52 <_printf_float+0x42e>
 8007d70:	e6fc      	b.n	8007b6c <_printf_float+0x248>
 8007d72:	f04f 0800 	mov.w	r8, #0
 8007d76:	f104 0919 	add.w	r9, r4, #25
 8007d7a:	e7f4      	b.n	8007d66 <_printf_float+0x442>
 8007d7c:	2900      	cmp	r1, #0
 8007d7e:	f43f ae8b 	beq.w	8007a98 <_printf_float+0x174>
 8007d82:	2300      	movs	r3, #0
 8007d84:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007d88:	ab09      	add	r3, sp, #36	; 0x24
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	ec49 8b10 	vmov	d0, r8, r9
 8007d90:	6022      	str	r2, [r4, #0]
 8007d92:	f8cd a004 	str.w	sl, [sp, #4]
 8007d96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f7ff fd2e 	bl	80077fc <__cvt>
 8007da0:	4680      	mov	r8, r0
 8007da2:	e648      	b.n	8007a36 <_printf_float+0x112>

08007da4 <_printf_common>:
 8007da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da8:	4691      	mov	r9, r2
 8007daa:	461f      	mov	r7, r3
 8007dac:	688a      	ldr	r2, [r1, #8]
 8007dae:	690b      	ldr	r3, [r1, #16]
 8007db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007db4:	4293      	cmp	r3, r2
 8007db6:	bfb8      	it	lt
 8007db8:	4613      	movlt	r3, r2
 8007dba:	f8c9 3000 	str.w	r3, [r9]
 8007dbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	b112      	cbz	r2, 8007dce <_printf_common+0x2a>
 8007dc8:	3301      	adds	r3, #1
 8007dca:	f8c9 3000 	str.w	r3, [r9]
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	0699      	lsls	r1, r3, #26
 8007dd2:	bf42      	ittt	mi
 8007dd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007dd8:	3302      	addmi	r3, #2
 8007dda:	f8c9 3000 	strmi.w	r3, [r9]
 8007dde:	6825      	ldr	r5, [r4, #0]
 8007de0:	f015 0506 	ands.w	r5, r5, #6
 8007de4:	d107      	bne.n	8007df6 <_printf_common+0x52>
 8007de6:	f104 0a19 	add.w	sl, r4, #25
 8007dea:	68e3      	ldr	r3, [r4, #12]
 8007dec:	f8d9 2000 	ldr.w	r2, [r9]
 8007df0:	1a9b      	subs	r3, r3, r2
 8007df2:	42ab      	cmp	r3, r5
 8007df4:	dc28      	bgt.n	8007e48 <_printf_common+0xa4>
 8007df6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007dfa:	6822      	ldr	r2, [r4, #0]
 8007dfc:	3300      	adds	r3, #0
 8007dfe:	bf18      	it	ne
 8007e00:	2301      	movne	r3, #1
 8007e02:	0692      	lsls	r2, r2, #26
 8007e04:	d42d      	bmi.n	8007e62 <_printf_common+0xbe>
 8007e06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	47c0      	blx	r8
 8007e10:	3001      	adds	r0, #1
 8007e12:	d020      	beq.n	8007e56 <_printf_common+0xb2>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	68e5      	ldr	r5, [r4, #12]
 8007e18:	f8d9 2000 	ldr.w	r2, [r9]
 8007e1c:	f003 0306 	and.w	r3, r3, #6
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	bf08      	it	eq
 8007e24:	1aad      	subeq	r5, r5, r2
 8007e26:	68a3      	ldr	r3, [r4, #8]
 8007e28:	6922      	ldr	r2, [r4, #16]
 8007e2a:	bf0c      	ite	eq
 8007e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e30:	2500      	movne	r5, #0
 8007e32:	4293      	cmp	r3, r2
 8007e34:	bfc4      	itt	gt
 8007e36:	1a9b      	subgt	r3, r3, r2
 8007e38:	18ed      	addgt	r5, r5, r3
 8007e3a:	f04f 0900 	mov.w	r9, #0
 8007e3e:	341a      	adds	r4, #26
 8007e40:	454d      	cmp	r5, r9
 8007e42:	d11a      	bne.n	8007e7a <_printf_common+0xd6>
 8007e44:	2000      	movs	r0, #0
 8007e46:	e008      	b.n	8007e5a <_printf_common+0xb6>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4652      	mov	r2, sl
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	4630      	mov	r0, r6
 8007e50:	47c0      	blx	r8
 8007e52:	3001      	adds	r0, #1
 8007e54:	d103      	bne.n	8007e5e <_printf_common+0xba>
 8007e56:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5e:	3501      	adds	r5, #1
 8007e60:	e7c3      	b.n	8007dea <_printf_common+0x46>
 8007e62:	18e1      	adds	r1, r4, r3
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	2030      	movs	r0, #48	; 0x30
 8007e68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e6c:	4422      	add	r2, r4
 8007e6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e76:	3302      	adds	r3, #2
 8007e78:	e7c5      	b.n	8007e06 <_printf_common+0x62>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4639      	mov	r1, r7
 8007e80:	4630      	mov	r0, r6
 8007e82:	47c0      	blx	r8
 8007e84:	3001      	adds	r0, #1
 8007e86:	d0e6      	beq.n	8007e56 <_printf_common+0xb2>
 8007e88:	f109 0901 	add.w	r9, r9, #1
 8007e8c:	e7d8      	b.n	8007e40 <_printf_common+0x9c>

08007e8e <quorem>:
 8007e8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e92:	6903      	ldr	r3, [r0, #16]
 8007e94:	690c      	ldr	r4, [r1, #16]
 8007e96:	42a3      	cmp	r3, r4
 8007e98:	4680      	mov	r8, r0
 8007e9a:	f2c0 8082 	blt.w	8007fa2 <quorem+0x114>
 8007e9e:	3c01      	subs	r4, #1
 8007ea0:	f101 0714 	add.w	r7, r1, #20
 8007ea4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007ea8:	f100 0614 	add.w	r6, r0, #20
 8007eac:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007eb0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007eb4:	eb06 030c 	add.w	r3, r6, ip
 8007eb8:	3501      	adds	r5, #1
 8007eba:	eb07 090c 	add.w	r9, r7, ip
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	fbb0 f5f5 	udiv	r5, r0, r5
 8007ec4:	b395      	cbz	r5, 8007f2c <quorem+0x9e>
 8007ec6:	f04f 0a00 	mov.w	sl, #0
 8007eca:	4638      	mov	r0, r7
 8007ecc:	46b6      	mov	lr, r6
 8007ece:	46d3      	mov	fp, sl
 8007ed0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ed4:	b293      	uxth	r3, r2
 8007ed6:	fb05 a303 	mla	r3, r5, r3, sl
 8007eda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	ebab 0303 	sub.w	r3, fp, r3
 8007ee4:	0c12      	lsrs	r2, r2, #16
 8007ee6:	f8de b000 	ldr.w	fp, [lr]
 8007eea:	fb05 a202 	mla	r2, r5, r2, sl
 8007eee:	fa13 f38b 	uxtah	r3, r3, fp
 8007ef2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007ef6:	fa1f fb82 	uxth.w	fp, r2
 8007efa:	f8de 2000 	ldr.w	r2, [lr]
 8007efe:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007f02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f0c:	4581      	cmp	r9, r0
 8007f0e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007f12:	f84e 3b04 	str.w	r3, [lr], #4
 8007f16:	d2db      	bcs.n	8007ed0 <quorem+0x42>
 8007f18:	f856 300c 	ldr.w	r3, [r6, ip]
 8007f1c:	b933      	cbnz	r3, 8007f2c <quorem+0x9e>
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	3b04      	subs	r3, #4
 8007f22:	429e      	cmp	r6, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	d330      	bcc.n	8007f8a <quorem+0xfc>
 8007f28:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	f001 f829 	bl	8008f84 <__mcmp>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	db25      	blt.n	8007f82 <quorem+0xf4>
 8007f36:	3501      	adds	r5, #1
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f04f 0c00 	mov.w	ip, #0
 8007f3e:	f857 2b04 	ldr.w	r2, [r7], #4
 8007f42:	f8d0 e000 	ldr.w	lr, [r0]
 8007f46:	b293      	uxth	r3, r2
 8007f48:	ebac 0303 	sub.w	r3, ip, r3
 8007f4c:	0c12      	lsrs	r2, r2, #16
 8007f4e:	fa13 f38e 	uxtah	r3, r3, lr
 8007f52:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f60:	45b9      	cmp	r9, r7
 8007f62:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f66:	f840 3b04 	str.w	r3, [r0], #4
 8007f6a:	d2e8      	bcs.n	8007f3e <quorem+0xb0>
 8007f6c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f70:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f74:	b92a      	cbnz	r2, 8007f82 <quorem+0xf4>
 8007f76:	3b04      	subs	r3, #4
 8007f78:	429e      	cmp	r6, r3
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	d30b      	bcc.n	8007f96 <quorem+0x108>
 8007f7e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f82:	4628      	mov	r0, r5
 8007f84:	b003      	add	sp, #12
 8007f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8a:	6812      	ldr	r2, [r2, #0]
 8007f8c:	3b04      	subs	r3, #4
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	d1ca      	bne.n	8007f28 <quorem+0x9a>
 8007f92:	3c01      	subs	r4, #1
 8007f94:	e7c5      	b.n	8007f22 <quorem+0x94>
 8007f96:	6812      	ldr	r2, [r2, #0]
 8007f98:	3b04      	subs	r3, #4
 8007f9a:	2a00      	cmp	r2, #0
 8007f9c:	d1ef      	bne.n	8007f7e <quorem+0xf0>
 8007f9e:	3c01      	subs	r4, #1
 8007fa0:	e7ea      	b.n	8007f78 <quorem+0xea>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e7ee      	b.n	8007f84 <quorem+0xf6>
	...

08007fa8 <_dtoa_r>:
 8007fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	ec57 6b10 	vmov	r6, r7, d0
 8007fb0:	b097      	sub	sp, #92	; 0x5c
 8007fb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fb4:	9106      	str	r1, [sp, #24]
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007fba:	9312      	str	r3, [sp, #72]	; 0x48
 8007fbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fc0:	e9cd 6700 	strd	r6, r7, [sp]
 8007fc4:	b93d      	cbnz	r5, 8007fd6 <_dtoa_r+0x2e>
 8007fc6:	2010      	movs	r0, #16
 8007fc8:	f000 fdb4 	bl	8008b34 <malloc>
 8007fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8007fce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fd2:	6005      	str	r5, [r0, #0]
 8007fd4:	60c5      	str	r5, [r0, #12]
 8007fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd8:	6819      	ldr	r1, [r3, #0]
 8007fda:	b151      	cbz	r1, 8007ff2 <_dtoa_r+0x4a>
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	604a      	str	r2, [r1, #4]
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	4093      	lsls	r3, r2
 8007fe4:	608b      	str	r3, [r1, #8]
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 fdeb 	bl	8008bc2 <_Bfree>
 8007fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	1e3b      	subs	r3, r7, #0
 8007ff4:	bfbb      	ittet	lt
 8007ff6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ffa:	9301      	strlt	r3, [sp, #4]
 8007ffc:	2300      	movge	r3, #0
 8007ffe:	2201      	movlt	r2, #1
 8008000:	bfac      	ite	ge
 8008002:	f8c8 3000 	strge.w	r3, [r8]
 8008006:	f8c8 2000 	strlt.w	r2, [r8]
 800800a:	4baf      	ldr	r3, [pc, #700]	; (80082c8 <_dtoa_r+0x320>)
 800800c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008010:	ea33 0308 	bics.w	r3, r3, r8
 8008014:	d114      	bne.n	8008040 <_dtoa_r+0x98>
 8008016:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008018:	f242 730f 	movw	r3, #9999	; 0x270f
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	9b00      	ldr	r3, [sp, #0]
 8008020:	b923      	cbnz	r3, 800802c <_dtoa_r+0x84>
 8008022:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008026:	2800      	cmp	r0, #0
 8008028:	f000 8542 	beq.w	8008ab0 <_dtoa_r+0xb08>
 800802c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800802e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80082dc <_dtoa_r+0x334>
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8544 	beq.w	8008ac0 <_dtoa_r+0xb18>
 8008038:	f10b 0303 	add.w	r3, fp, #3
 800803c:	f000 bd3e 	b.w	8008abc <_dtoa_r+0xb14>
 8008040:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008044:	2200      	movs	r2, #0
 8008046:	2300      	movs	r3, #0
 8008048:	4630      	mov	r0, r6
 800804a:	4639      	mov	r1, r7
 800804c:	f7f8 fce8 	bl	8000a20 <__aeabi_dcmpeq>
 8008050:	4681      	mov	r9, r0
 8008052:	b168      	cbz	r0, 8008070 <_dtoa_r+0xc8>
 8008054:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008056:	2301      	movs	r3, #1
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8524 	beq.w	8008aaa <_dtoa_r+0xb02>
 8008062:	4b9a      	ldr	r3, [pc, #616]	; (80082cc <_dtoa_r+0x324>)
 8008064:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008066:	f103 3bff 	add.w	fp, r3, #4294967295
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	f000 bd28 	b.w	8008ac0 <_dtoa_r+0xb18>
 8008070:	aa14      	add	r2, sp, #80	; 0x50
 8008072:	a915      	add	r1, sp, #84	; 0x54
 8008074:	ec47 6b10 	vmov	d0, r6, r7
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fffa 	bl	8009072 <__d2b>
 800807e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008082:	9004      	str	r0, [sp, #16]
 8008084:	2d00      	cmp	r5, #0
 8008086:	d07c      	beq.n	8008182 <_dtoa_r+0x1da>
 8008088:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800808c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008090:	46b2      	mov	sl, r6
 8008092:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800809a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800809e:	2200      	movs	r2, #0
 80080a0:	4b8b      	ldr	r3, [pc, #556]	; (80082d0 <_dtoa_r+0x328>)
 80080a2:	4650      	mov	r0, sl
 80080a4:	4659      	mov	r1, fp
 80080a6:	f7f8 f89b 	bl	80001e0 <__aeabi_dsub>
 80080aa:	a381      	add	r3, pc, #516	; (adr r3, 80082b0 <_dtoa_r+0x308>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f7f8 fa4e 	bl	8000550 <__aeabi_dmul>
 80080b4:	a380      	add	r3, pc, #512	; (adr r3, 80082b8 <_dtoa_r+0x310>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	f7f8 f893 	bl	80001e4 <__adddf3>
 80080be:	4606      	mov	r6, r0
 80080c0:	4628      	mov	r0, r5
 80080c2:	460f      	mov	r7, r1
 80080c4:	f7f8 f9da 	bl	800047c <__aeabi_i2d>
 80080c8:	a37d      	add	r3, pc, #500	; (adr r3, 80082c0 <_dtoa_r+0x318>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 fa3f 	bl	8000550 <__aeabi_dmul>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4630      	mov	r0, r6
 80080d8:	4639      	mov	r1, r7
 80080da:	f7f8 f883 	bl	80001e4 <__adddf3>
 80080de:	4606      	mov	r6, r0
 80080e0:	460f      	mov	r7, r1
 80080e2:	f7f8 fce5 	bl	8000ab0 <__aeabi_d2iz>
 80080e6:	2200      	movs	r2, #0
 80080e8:	4682      	mov	sl, r0
 80080ea:	2300      	movs	r3, #0
 80080ec:	4630      	mov	r0, r6
 80080ee:	4639      	mov	r1, r7
 80080f0:	f7f8 fca0 	bl	8000a34 <__aeabi_dcmplt>
 80080f4:	b148      	cbz	r0, 800810a <_dtoa_r+0x162>
 80080f6:	4650      	mov	r0, sl
 80080f8:	f7f8 f9c0 	bl	800047c <__aeabi_i2d>
 80080fc:	4632      	mov	r2, r6
 80080fe:	463b      	mov	r3, r7
 8008100:	f7f8 fc8e 	bl	8000a20 <__aeabi_dcmpeq>
 8008104:	b908      	cbnz	r0, 800810a <_dtoa_r+0x162>
 8008106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800810a:	f1ba 0f16 	cmp.w	sl, #22
 800810e:	d859      	bhi.n	80081c4 <_dtoa_r+0x21c>
 8008110:	4970      	ldr	r1, [pc, #448]	; (80082d4 <_dtoa_r+0x32c>)
 8008112:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800811a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800811e:	f7f8 fca7 	bl	8000a70 <__aeabi_dcmpgt>
 8008122:	2800      	cmp	r0, #0
 8008124:	d050      	beq.n	80081c8 <_dtoa_r+0x220>
 8008126:	f10a 3aff 	add.w	sl, sl, #4294967295
 800812a:	2300      	movs	r3, #0
 800812c:	930f      	str	r3, [sp, #60]	; 0x3c
 800812e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008130:	1b5d      	subs	r5, r3, r5
 8008132:	f1b5 0801 	subs.w	r8, r5, #1
 8008136:	bf49      	itett	mi
 8008138:	f1c5 0301 	rsbmi	r3, r5, #1
 800813c:	2300      	movpl	r3, #0
 800813e:	9305      	strmi	r3, [sp, #20]
 8008140:	f04f 0800 	movmi.w	r8, #0
 8008144:	bf58      	it	pl
 8008146:	9305      	strpl	r3, [sp, #20]
 8008148:	f1ba 0f00 	cmp.w	sl, #0
 800814c:	db3e      	blt.n	80081cc <_dtoa_r+0x224>
 800814e:	2300      	movs	r3, #0
 8008150:	44d0      	add	r8, sl
 8008152:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008156:	9307      	str	r3, [sp, #28]
 8008158:	9b06      	ldr	r3, [sp, #24]
 800815a:	2b09      	cmp	r3, #9
 800815c:	f200 8090 	bhi.w	8008280 <_dtoa_r+0x2d8>
 8008160:	2b05      	cmp	r3, #5
 8008162:	bfc4      	itt	gt
 8008164:	3b04      	subgt	r3, #4
 8008166:	9306      	strgt	r3, [sp, #24]
 8008168:	9b06      	ldr	r3, [sp, #24]
 800816a:	f1a3 0302 	sub.w	r3, r3, #2
 800816e:	bfcc      	ite	gt
 8008170:	2500      	movgt	r5, #0
 8008172:	2501      	movle	r5, #1
 8008174:	2b03      	cmp	r3, #3
 8008176:	f200 808f 	bhi.w	8008298 <_dtoa_r+0x2f0>
 800817a:	e8df f003 	tbb	[pc, r3]
 800817e:	7f7d      	.short	0x7f7d
 8008180:	7131      	.short	0x7131
 8008182:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008186:	441d      	add	r5, r3
 8008188:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800818c:	2820      	cmp	r0, #32
 800818e:	dd13      	ble.n	80081b8 <_dtoa_r+0x210>
 8008190:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008194:	9b00      	ldr	r3, [sp, #0]
 8008196:	fa08 f800 	lsl.w	r8, r8, r0
 800819a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800819e:	fa23 f000 	lsr.w	r0, r3, r0
 80081a2:	ea48 0000 	orr.w	r0, r8, r0
 80081a6:	f7f8 f959 	bl	800045c <__aeabi_ui2d>
 80081aa:	2301      	movs	r3, #1
 80081ac:	4682      	mov	sl, r0
 80081ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80081b2:	3d01      	subs	r5, #1
 80081b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80081b6:	e772      	b.n	800809e <_dtoa_r+0xf6>
 80081b8:	9b00      	ldr	r3, [sp, #0]
 80081ba:	f1c0 0020 	rsb	r0, r0, #32
 80081be:	fa03 f000 	lsl.w	r0, r3, r0
 80081c2:	e7f0      	b.n	80081a6 <_dtoa_r+0x1fe>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e7b1      	b.n	800812c <_dtoa_r+0x184>
 80081c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80081ca:	e7b0      	b.n	800812e <_dtoa_r+0x186>
 80081cc:	9b05      	ldr	r3, [sp, #20]
 80081ce:	eba3 030a 	sub.w	r3, r3, sl
 80081d2:	9305      	str	r3, [sp, #20]
 80081d4:	f1ca 0300 	rsb	r3, sl, #0
 80081d8:	9307      	str	r3, [sp, #28]
 80081da:	2300      	movs	r3, #0
 80081dc:	930e      	str	r3, [sp, #56]	; 0x38
 80081de:	e7bb      	b.n	8008158 <_dtoa_r+0x1b0>
 80081e0:	2301      	movs	r3, #1
 80081e2:	930a      	str	r3, [sp, #40]	; 0x28
 80081e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	dd59      	ble.n	800829e <_dtoa_r+0x2f6>
 80081ea:	9302      	str	r3, [sp, #8]
 80081ec:	4699      	mov	r9, r3
 80081ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081f0:	2200      	movs	r2, #0
 80081f2:	6072      	str	r2, [r6, #4]
 80081f4:	2204      	movs	r2, #4
 80081f6:	f102 0014 	add.w	r0, r2, #20
 80081fa:	4298      	cmp	r0, r3
 80081fc:	6871      	ldr	r1, [r6, #4]
 80081fe:	d953      	bls.n	80082a8 <_dtoa_r+0x300>
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fcaa 	bl	8008b5a <_Balloc>
 8008206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008208:	6030      	str	r0, [r6, #0]
 800820a:	f1b9 0f0e 	cmp.w	r9, #14
 800820e:	f8d3 b000 	ldr.w	fp, [r3]
 8008212:	f200 80e6 	bhi.w	80083e2 <_dtoa_r+0x43a>
 8008216:	2d00      	cmp	r5, #0
 8008218:	f000 80e3 	beq.w	80083e2 <_dtoa_r+0x43a>
 800821c:	ed9d 7b00 	vldr	d7, [sp]
 8008220:	f1ba 0f00 	cmp.w	sl, #0
 8008224:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008228:	dd74      	ble.n	8008314 <_dtoa_r+0x36c>
 800822a:	4a2a      	ldr	r2, [pc, #168]	; (80082d4 <_dtoa_r+0x32c>)
 800822c:	f00a 030f 	and.w	r3, sl, #15
 8008230:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008234:	ed93 7b00 	vldr	d7, [r3]
 8008238:	ea4f 162a 	mov.w	r6, sl, asr #4
 800823c:	06f0      	lsls	r0, r6, #27
 800823e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008242:	d565      	bpl.n	8008310 <_dtoa_r+0x368>
 8008244:	4b24      	ldr	r3, [pc, #144]	; (80082d8 <_dtoa_r+0x330>)
 8008246:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800824a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800824e:	f7f8 faa9 	bl	80007a4 <__aeabi_ddiv>
 8008252:	e9cd 0100 	strd	r0, r1, [sp]
 8008256:	f006 060f 	and.w	r6, r6, #15
 800825a:	2503      	movs	r5, #3
 800825c:	4f1e      	ldr	r7, [pc, #120]	; (80082d8 <_dtoa_r+0x330>)
 800825e:	e04c      	b.n	80082fa <_dtoa_r+0x352>
 8008260:	2301      	movs	r3, #1
 8008262:	930a      	str	r3, [sp, #40]	; 0x28
 8008264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008266:	4453      	add	r3, sl
 8008268:	f103 0901 	add.w	r9, r3, #1
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	464b      	mov	r3, r9
 8008270:	2b01      	cmp	r3, #1
 8008272:	bfb8      	it	lt
 8008274:	2301      	movlt	r3, #1
 8008276:	e7ba      	b.n	80081ee <_dtoa_r+0x246>
 8008278:	2300      	movs	r3, #0
 800827a:	e7b2      	b.n	80081e2 <_dtoa_r+0x23a>
 800827c:	2300      	movs	r3, #0
 800827e:	e7f0      	b.n	8008262 <_dtoa_r+0x2ba>
 8008280:	2501      	movs	r5, #1
 8008282:	2300      	movs	r3, #0
 8008284:	9306      	str	r3, [sp, #24]
 8008286:	950a      	str	r5, [sp, #40]	; 0x28
 8008288:	f04f 33ff 	mov.w	r3, #4294967295
 800828c:	9302      	str	r3, [sp, #8]
 800828e:	4699      	mov	r9, r3
 8008290:	2200      	movs	r2, #0
 8008292:	2312      	movs	r3, #18
 8008294:	920b      	str	r2, [sp, #44]	; 0x2c
 8008296:	e7aa      	b.n	80081ee <_dtoa_r+0x246>
 8008298:	2301      	movs	r3, #1
 800829a:	930a      	str	r3, [sp, #40]	; 0x28
 800829c:	e7f4      	b.n	8008288 <_dtoa_r+0x2e0>
 800829e:	2301      	movs	r3, #1
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	4699      	mov	r9, r3
 80082a4:	461a      	mov	r2, r3
 80082a6:	e7f5      	b.n	8008294 <_dtoa_r+0x2ec>
 80082a8:	3101      	adds	r1, #1
 80082aa:	6071      	str	r1, [r6, #4]
 80082ac:	0052      	lsls	r2, r2, #1
 80082ae:	e7a2      	b.n	80081f6 <_dtoa_r+0x24e>
 80082b0:	636f4361 	.word	0x636f4361
 80082b4:	3fd287a7 	.word	0x3fd287a7
 80082b8:	8b60c8b3 	.word	0x8b60c8b3
 80082bc:	3fc68a28 	.word	0x3fc68a28
 80082c0:	509f79fb 	.word	0x509f79fb
 80082c4:	3fd34413 	.word	0x3fd34413
 80082c8:	7ff00000 	.word	0x7ff00000
 80082cc:	08009295 	.word	0x08009295
 80082d0:	3ff80000 	.word	0x3ff80000
 80082d4:	080092d0 	.word	0x080092d0
 80082d8:	080092a8 	.word	0x080092a8
 80082dc:	0800929f 	.word	0x0800929f
 80082e0:	07f1      	lsls	r1, r6, #31
 80082e2:	d508      	bpl.n	80082f6 <_dtoa_r+0x34e>
 80082e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ec:	f7f8 f930 	bl	8000550 <__aeabi_dmul>
 80082f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082f4:	3501      	adds	r5, #1
 80082f6:	1076      	asrs	r6, r6, #1
 80082f8:	3708      	adds	r7, #8
 80082fa:	2e00      	cmp	r6, #0
 80082fc:	d1f0      	bne.n	80082e0 <_dtoa_r+0x338>
 80082fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008302:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008306:	f7f8 fa4d 	bl	80007a4 <__aeabi_ddiv>
 800830a:	e9cd 0100 	strd	r0, r1, [sp]
 800830e:	e01a      	b.n	8008346 <_dtoa_r+0x39e>
 8008310:	2502      	movs	r5, #2
 8008312:	e7a3      	b.n	800825c <_dtoa_r+0x2b4>
 8008314:	f000 80a0 	beq.w	8008458 <_dtoa_r+0x4b0>
 8008318:	f1ca 0600 	rsb	r6, sl, #0
 800831c:	4b9f      	ldr	r3, [pc, #636]	; (800859c <_dtoa_r+0x5f4>)
 800831e:	4fa0      	ldr	r7, [pc, #640]	; (80085a0 <_dtoa_r+0x5f8>)
 8008320:	f006 020f 	and.w	r2, r6, #15
 8008324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008330:	f7f8 f90e 	bl	8000550 <__aeabi_dmul>
 8008334:	e9cd 0100 	strd	r0, r1, [sp]
 8008338:	1136      	asrs	r6, r6, #4
 800833a:	2300      	movs	r3, #0
 800833c:	2502      	movs	r5, #2
 800833e:	2e00      	cmp	r6, #0
 8008340:	d17f      	bne.n	8008442 <_dtoa_r+0x49a>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e1      	bne.n	800830a <_dtoa_r+0x362>
 8008346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 8087 	beq.w	800845c <_dtoa_r+0x4b4>
 800834e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008352:	2200      	movs	r2, #0
 8008354:	4b93      	ldr	r3, [pc, #588]	; (80085a4 <_dtoa_r+0x5fc>)
 8008356:	4630      	mov	r0, r6
 8008358:	4639      	mov	r1, r7
 800835a:	f7f8 fb6b 	bl	8000a34 <__aeabi_dcmplt>
 800835e:	2800      	cmp	r0, #0
 8008360:	d07c      	beq.n	800845c <_dtoa_r+0x4b4>
 8008362:	f1b9 0f00 	cmp.w	r9, #0
 8008366:	d079      	beq.n	800845c <_dtoa_r+0x4b4>
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	dd35      	ble.n	80083da <_dtoa_r+0x432>
 800836e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008372:	9308      	str	r3, [sp, #32]
 8008374:	4639      	mov	r1, r7
 8008376:	2200      	movs	r2, #0
 8008378:	4b8b      	ldr	r3, [pc, #556]	; (80085a8 <_dtoa_r+0x600>)
 800837a:	4630      	mov	r0, r6
 800837c:	f7f8 f8e8 	bl	8000550 <__aeabi_dmul>
 8008380:	e9cd 0100 	strd	r0, r1, [sp]
 8008384:	9f02      	ldr	r7, [sp, #8]
 8008386:	3501      	adds	r5, #1
 8008388:	4628      	mov	r0, r5
 800838a:	f7f8 f877 	bl	800047c <__aeabi_i2d>
 800838e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008392:	f7f8 f8dd 	bl	8000550 <__aeabi_dmul>
 8008396:	2200      	movs	r2, #0
 8008398:	4b84      	ldr	r3, [pc, #528]	; (80085ac <_dtoa_r+0x604>)
 800839a:	f7f7 ff23 	bl	80001e4 <__adddf3>
 800839e:	4605      	mov	r5, r0
 80083a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80083a4:	2f00      	cmp	r7, #0
 80083a6:	d15d      	bne.n	8008464 <_dtoa_r+0x4bc>
 80083a8:	2200      	movs	r2, #0
 80083aa:	4b81      	ldr	r3, [pc, #516]	; (80085b0 <_dtoa_r+0x608>)
 80083ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083b0:	f7f7 ff16 	bl	80001e0 <__aeabi_dsub>
 80083b4:	462a      	mov	r2, r5
 80083b6:	4633      	mov	r3, r6
 80083b8:	e9cd 0100 	strd	r0, r1, [sp]
 80083bc:	f7f8 fb58 	bl	8000a70 <__aeabi_dcmpgt>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	f040 8288 	bne.w	80088d6 <_dtoa_r+0x92e>
 80083c6:	462a      	mov	r2, r5
 80083c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083d0:	f7f8 fb30 	bl	8000a34 <__aeabi_dcmplt>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f040 827c 	bne.w	80088d2 <_dtoa_r+0x92a>
 80083da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083de:	e9cd 2300 	strd	r2, r3, [sp]
 80083e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f2c0 8150 	blt.w	800868a <_dtoa_r+0x6e2>
 80083ea:	f1ba 0f0e 	cmp.w	sl, #14
 80083ee:	f300 814c 	bgt.w	800868a <_dtoa_r+0x6e2>
 80083f2:	4b6a      	ldr	r3, [pc, #424]	; (800859c <_dtoa_r+0x5f4>)
 80083f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083f8:	ed93 7b00 	vldr	d7, [r3]
 80083fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008404:	f280 80d8 	bge.w	80085b8 <_dtoa_r+0x610>
 8008408:	f1b9 0f00 	cmp.w	r9, #0
 800840c:	f300 80d4 	bgt.w	80085b8 <_dtoa_r+0x610>
 8008410:	f040 825e 	bne.w	80088d0 <_dtoa_r+0x928>
 8008414:	2200      	movs	r2, #0
 8008416:	4b66      	ldr	r3, [pc, #408]	; (80085b0 <_dtoa_r+0x608>)
 8008418:	ec51 0b17 	vmov	r0, r1, d7
 800841c:	f7f8 f898 	bl	8000550 <__aeabi_dmul>
 8008420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008424:	f7f8 fb1a 	bl	8000a5c <__aeabi_dcmpge>
 8008428:	464f      	mov	r7, r9
 800842a:	464e      	mov	r6, r9
 800842c:	2800      	cmp	r0, #0
 800842e:	f040 8234 	bne.w	800889a <_dtoa_r+0x8f2>
 8008432:	2331      	movs	r3, #49	; 0x31
 8008434:	f10b 0501 	add.w	r5, fp, #1
 8008438:	f88b 3000 	strb.w	r3, [fp]
 800843c:	f10a 0a01 	add.w	sl, sl, #1
 8008440:	e22f      	b.n	80088a2 <_dtoa_r+0x8fa>
 8008442:	07f2      	lsls	r2, r6, #31
 8008444:	d505      	bpl.n	8008452 <_dtoa_r+0x4aa>
 8008446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844a:	f7f8 f881 	bl	8000550 <__aeabi_dmul>
 800844e:	3501      	adds	r5, #1
 8008450:	2301      	movs	r3, #1
 8008452:	1076      	asrs	r6, r6, #1
 8008454:	3708      	adds	r7, #8
 8008456:	e772      	b.n	800833e <_dtoa_r+0x396>
 8008458:	2502      	movs	r5, #2
 800845a:	e774      	b.n	8008346 <_dtoa_r+0x39e>
 800845c:	f8cd a020 	str.w	sl, [sp, #32]
 8008460:	464f      	mov	r7, r9
 8008462:	e791      	b.n	8008388 <_dtoa_r+0x3e0>
 8008464:	4b4d      	ldr	r3, [pc, #308]	; (800859c <_dtoa_r+0x5f4>)
 8008466:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800846a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800846e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008470:	2b00      	cmp	r3, #0
 8008472:	d047      	beq.n	8008504 <_dtoa_r+0x55c>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	2000      	movs	r0, #0
 800847a:	494e      	ldr	r1, [pc, #312]	; (80085b4 <_dtoa_r+0x60c>)
 800847c:	f7f8 f992 	bl	80007a4 <__aeabi_ddiv>
 8008480:	462a      	mov	r2, r5
 8008482:	4633      	mov	r3, r6
 8008484:	f7f7 feac 	bl	80001e0 <__aeabi_dsub>
 8008488:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800848c:	465d      	mov	r5, fp
 800848e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008492:	f7f8 fb0d 	bl	8000ab0 <__aeabi_d2iz>
 8008496:	4606      	mov	r6, r0
 8008498:	f7f7 fff0 	bl	800047c <__aeabi_i2d>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084a4:	f7f7 fe9c 	bl	80001e0 <__aeabi_dsub>
 80084a8:	3630      	adds	r6, #48	; 0x30
 80084aa:	f805 6b01 	strb.w	r6, [r5], #1
 80084ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084b2:	e9cd 0100 	strd	r0, r1, [sp]
 80084b6:	f7f8 fabd 	bl	8000a34 <__aeabi_dcmplt>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	d163      	bne.n	8008586 <_dtoa_r+0x5de>
 80084be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084c2:	2000      	movs	r0, #0
 80084c4:	4937      	ldr	r1, [pc, #220]	; (80085a4 <_dtoa_r+0x5fc>)
 80084c6:	f7f7 fe8b 	bl	80001e0 <__aeabi_dsub>
 80084ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084ce:	f7f8 fab1 	bl	8000a34 <__aeabi_dcmplt>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	f040 80b7 	bne.w	8008646 <_dtoa_r+0x69e>
 80084d8:	eba5 030b 	sub.w	r3, r5, fp
 80084dc:	429f      	cmp	r7, r3
 80084de:	f77f af7c 	ble.w	80083da <_dtoa_r+0x432>
 80084e2:	2200      	movs	r2, #0
 80084e4:	4b30      	ldr	r3, [pc, #192]	; (80085a8 <_dtoa_r+0x600>)
 80084e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084ea:	f7f8 f831 	bl	8000550 <__aeabi_dmul>
 80084ee:	2200      	movs	r2, #0
 80084f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084f4:	4b2c      	ldr	r3, [pc, #176]	; (80085a8 <_dtoa_r+0x600>)
 80084f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084fa:	f7f8 f829 	bl	8000550 <__aeabi_dmul>
 80084fe:	e9cd 0100 	strd	r0, r1, [sp]
 8008502:	e7c4      	b.n	800848e <_dtoa_r+0x4e6>
 8008504:	462a      	mov	r2, r5
 8008506:	4633      	mov	r3, r6
 8008508:	f7f8 f822 	bl	8000550 <__aeabi_dmul>
 800850c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008510:	eb0b 0507 	add.w	r5, fp, r7
 8008514:	465e      	mov	r6, fp
 8008516:	e9dd 0100 	ldrd	r0, r1, [sp]
 800851a:	f7f8 fac9 	bl	8000ab0 <__aeabi_d2iz>
 800851e:	4607      	mov	r7, r0
 8008520:	f7f7 ffac 	bl	800047c <__aeabi_i2d>
 8008524:	3730      	adds	r7, #48	; 0x30
 8008526:	4602      	mov	r2, r0
 8008528:	460b      	mov	r3, r1
 800852a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800852e:	f7f7 fe57 	bl	80001e0 <__aeabi_dsub>
 8008532:	f806 7b01 	strb.w	r7, [r6], #1
 8008536:	42ae      	cmp	r6, r5
 8008538:	e9cd 0100 	strd	r0, r1, [sp]
 800853c:	f04f 0200 	mov.w	r2, #0
 8008540:	d126      	bne.n	8008590 <_dtoa_r+0x5e8>
 8008542:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <_dtoa_r+0x60c>)
 8008544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008548:	f7f7 fe4c 	bl	80001e4 <__adddf3>
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008554:	f7f8 fa8c 	bl	8000a70 <__aeabi_dcmpgt>
 8008558:	2800      	cmp	r0, #0
 800855a:	d174      	bne.n	8008646 <_dtoa_r+0x69e>
 800855c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008560:	2000      	movs	r0, #0
 8008562:	4914      	ldr	r1, [pc, #80]	; (80085b4 <_dtoa_r+0x60c>)
 8008564:	f7f7 fe3c 	bl	80001e0 <__aeabi_dsub>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008570:	f7f8 fa60 	bl	8000a34 <__aeabi_dcmplt>
 8008574:	2800      	cmp	r0, #0
 8008576:	f43f af30 	beq.w	80083da <_dtoa_r+0x432>
 800857a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800857e:	2b30      	cmp	r3, #48	; 0x30
 8008580:	f105 32ff 	add.w	r2, r5, #4294967295
 8008584:	d002      	beq.n	800858c <_dtoa_r+0x5e4>
 8008586:	f8dd a020 	ldr.w	sl, [sp, #32]
 800858a:	e04a      	b.n	8008622 <_dtoa_r+0x67a>
 800858c:	4615      	mov	r5, r2
 800858e:	e7f4      	b.n	800857a <_dtoa_r+0x5d2>
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <_dtoa_r+0x600>)
 8008592:	f7f7 ffdd 	bl	8000550 <__aeabi_dmul>
 8008596:	e9cd 0100 	strd	r0, r1, [sp]
 800859a:	e7bc      	b.n	8008516 <_dtoa_r+0x56e>
 800859c:	080092d0 	.word	0x080092d0
 80085a0:	080092a8 	.word	0x080092a8
 80085a4:	3ff00000 	.word	0x3ff00000
 80085a8:	40240000 	.word	0x40240000
 80085ac:	401c0000 	.word	0x401c0000
 80085b0:	40140000 	.word	0x40140000
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80085bc:	465d      	mov	r5, fp
 80085be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085c2:	4630      	mov	r0, r6
 80085c4:	4639      	mov	r1, r7
 80085c6:	f7f8 f8ed 	bl	80007a4 <__aeabi_ddiv>
 80085ca:	f7f8 fa71 	bl	8000ab0 <__aeabi_d2iz>
 80085ce:	4680      	mov	r8, r0
 80085d0:	f7f7 ff54 	bl	800047c <__aeabi_i2d>
 80085d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d8:	f7f7 ffba 	bl	8000550 <__aeabi_dmul>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80085e8:	f7f7 fdfa 	bl	80001e0 <__aeabi_dsub>
 80085ec:	f805 6b01 	strb.w	r6, [r5], #1
 80085f0:	eba5 060b 	sub.w	r6, r5, fp
 80085f4:	45b1      	cmp	r9, r6
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	d139      	bne.n	8008670 <_dtoa_r+0x6c8>
 80085fc:	f7f7 fdf2 	bl	80001e4 <__adddf3>
 8008600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008604:	4606      	mov	r6, r0
 8008606:	460f      	mov	r7, r1
 8008608:	f7f8 fa32 	bl	8000a70 <__aeabi_dcmpgt>
 800860c:	b9c8      	cbnz	r0, 8008642 <_dtoa_r+0x69a>
 800860e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008612:	4630      	mov	r0, r6
 8008614:	4639      	mov	r1, r7
 8008616:	f7f8 fa03 	bl	8000a20 <__aeabi_dcmpeq>
 800861a:	b110      	cbz	r0, 8008622 <_dtoa_r+0x67a>
 800861c:	f018 0f01 	tst.w	r8, #1
 8008620:	d10f      	bne.n	8008642 <_dtoa_r+0x69a>
 8008622:	9904      	ldr	r1, [sp, #16]
 8008624:	4620      	mov	r0, r4
 8008626:	f000 facc 	bl	8008bc2 <_Bfree>
 800862a:	2300      	movs	r3, #0
 800862c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800862e:	702b      	strb	r3, [r5, #0]
 8008630:	f10a 0301 	add.w	r3, sl, #1
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 8241 	beq.w	8008ac0 <_dtoa_r+0xb18>
 800863e:	601d      	str	r5, [r3, #0]
 8008640:	e23e      	b.n	8008ac0 <_dtoa_r+0xb18>
 8008642:	f8cd a020 	str.w	sl, [sp, #32]
 8008646:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800864a:	2a39      	cmp	r2, #57	; 0x39
 800864c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008650:	d108      	bne.n	8008664 <_dtoa_r+0x6bc>
 8008652:	459b      	cmp	fp, r3
 8008654:	d10a      	bne.n	800866c <_dtoa_r+0x6c4>
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	3301      	adds	r3, #1
 800865a:	9308      	str	r3, [sp, #32]
 800865c:	2330      	movs	r3, #48	; 0x30
 800865e:	f88b 3000 	strb.w	r3, [fp]
 8008662:	465b      	mov	r3, fp
 8008664:	781a      	ldrb	r2, [r3, #0]
 8008666:	3201      	adds	r2, #1
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	e78c      	b.n	8008586 <_dtoa_r+0x5de>
 800866c:	461d      	mov	r5, r3
 800866e:	e7ea      	b.n	8008646 <_dtoa_r+0x69e>
 8008670:	2200      	movs	r2, #0
 8008672:	4b9b      	ldr	r3, [pc, #620]	; (80088e0 <_dtoa_r+0x938>)
 8008674:	f7f7 ff6c 	bl	8000550 <__aeabi_dmul>
 8008678:	2200      	movs	r2, #0
 800867a:	2300      	movs	r3, #0
 800867c:	4606      	mov	r6, r0
 800867e:	460f      	mov	r7, r1
 8008680:	f7f8 f9ce 	bl	8000a20 <__aeabi_dcmpeq>
 8008684:	2800      	cmp	r0, #0
 8008686:	d09a      	beq.n	80085be <_dtoa_r+0x616>
 8008688:	e7cb      	b.n	8008622 <_dtoa_r+0x67a>
 800868a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800868c:	2a00      	cmp	r2, #0
 800868e:	f000 808b 	beq.w	80087a8 <_dtoa_r+0x800>
 8008692:	9a06      	ldr	r2, [sp, #24]
 8008694:	2a01      	cmp	r2, #1
 8008696:	dc6e      	bgt.n	8008776 <_dtoa_r+0x7ce>
 8008698:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800869a:	2a00      	cmp	r2, #0
 800869c:	d067      	beq.n	800876e <_dtoa_r+0x7c6>
 800869e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086a2:	9f07      	ldr	r7, [sp, #28]
 80086a4:	9d05      	ldr	r5, [sp, #20]
 80086a6:	9a05      	ldr	r2, [sp, #20]
 80086a8:	2101      	movs	r1, #1
 80086aa:	441a      	add	r2, r3
 80086ac:	4620      	mov	r0, r4
 80086ae:	9205      	str	r2, [sp, #20]
 80086b0:	4498      	add	r8, r3
 80086b2:	f000 fb26 	bl	8008d02 <__i2b>
 80086b6:	4606      	mov	r6, r0
 80086b8:	2d00      	cmp	r5, #0
 80086ba:	dd0c      	ble.n	80086d6 <_dtoa_r+0x72e>
 80086bc:	f1b8 0f00 	cmp.w	r8, #0
 80086c0:	dd09      	ble.n	80086d6 <_dtoa_r+0x72e>
 80086c2:	4545      	cmp	r5, r8
 80086c4:	9a05      	ldr	r2, [sp, #20]
 80086c6:	462b      	mov	r3, r5
 80086c8:	bfa8      	it	ge
 80086ca:	4643      	movge	r3, r8
 80086cc:	1ad2      	subs	r2, r2, r3
 80086ce:	9205      	str	r2, [sp, #20]
 80086d0:	1aed      	subs	r5, r5, r3
 80086d2:	eba8 0803 	sub.w	r8, r8, r3
 80086d6:	9b07      	ldr	r3, [sp, #28]
 80086d8:	b1eb      	cbz	r3, 8008716 <_dtoa_r+0x76e>
 80086da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d067      	beq.n	80087b0 <_dtoa_r+0x808>
 80086e0:	b18f      	cbz	r7, 8008706 <_dtoa_r+0x75e>
 80086e2:	4631      	mov	r1, r6
 80086e4:	463a      	mov	r2, r7
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 fbaa 	bl	8008e40 <__pow5mult>
 80086ec:	9a04      	ldr	r2, [sp, #16]
 80086ee:	4601      	mov	r1, r0
 80086f0:	4606      	mov	r6, r0
 80086f2:	4620      	mov	r0, r4
 80086f4:	f000 fb0e 	bl	8008d14 <__multiply>
 80086f8:	9904      	ldr	r1, [sp, #16]
 80086fa:	9008      	str	r0, [sp, #32]
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fa60 	bl	8008bc2 <_Bfree>
 8008702:	9b08      	ldr	r3, [sp, #32]
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	9b07      	ldr	r3, [sp, #28]
 8008708:	1bda      	subs	r2, r3, r7
 800870a:	d004      	beq.n	8008716 <_dtoa_r+0x76e>
 800870c:	9904      	ldr	r1, [sp, #16]
 800870e:	4620      	mov	r0, r4
 8008710:	f000 fb96 	bl	8008e40 <__pow5mult>
 8008714:	9004      	str	r0, [sp, #16]
 8008716:	2101      	movs	r1, #1
 8008718:	4620      	mov	r0, r4
 800871a:	f000 faf2 	bl	8008d02 <__i2b>
 800871e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008720:	4607      	mov	r7, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	f000 81d0 	beq.w	8008ac8 <_dtoa_r+0xb20>
 8008728:	461a      	mov	r2, r3
 800872a:	4601      	mov	r1, r0
 800872c:	4620      	mov	r0, r4
 800872e:	f000 fb87 	bl	8008e40 <__pow5mult>
 8008732:	9b06      	ldr	r3, [sp, #24]
 8008734:	2b01      	cmp	r3, #1
 8008736:	4607      	mov	r7, r0
 8008738:	dc40      	bgt.n	80087bc <_dtoa_r+0x814>
 800873a:	9b00      	ldr	r3, [sp, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d139      	bne.n	80087b4 <_dtoa_r+0x80c>
 8008740:	9b01      	ldr	r3, [sp, #4]
 8008742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008746:	2b00      	cmp	r3, #0
 8008748:	d136      	bne.n	80087b8 <_dtoa_r+0x810>
 800874a:	9b01      	ldr	r3, [sp, #4]
 800874c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008750:	0d1b      	lsrs	r3, r3, #20
 8008752:	051b      	lsls	r3, r3, #20
 8008754:	b12b      	cbz	r3, 8008762 <_dtoa_r+0x7ba>
 8008756:	9b05      	ldr	r3, [sp, #20]
 8008758:	3301      	adds	r3, #1
 800875a:	9305      	str	r3, [sp, #20]
 800875c:	f108 0801 	add.w	r8, r8, #1
 8008760:	2301      	movs	r3, #1
 8008762:	9307      	str	r3, [sp, #28]
 8008764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008766:	2b00      	cmp	r3, #0
 8008768:	d12a      	bne.n	80087c0 <_dtoa_r+0x818>
 800876a:	2001      	movs	r0, #1
 800876c:	e030      	b.n	80087d0 <_dtoa_r+0x828>
 800876e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008770:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008774:	e795      	b.n	80086a2 <_dtoa_r+0x6fa>
 8008776:	9b07      	ldr	r3, [sp, #28]
 8008778:	f109 37ff 	add.w	r7, r9, #4294967295
 800877c:	42bb      	cmp	r3, r7
 800877e:	bfbf      	itttt	lt
 8008780:	9b07      	ldrlt	r3, [sp, #28]
 8008782:	9707      	strlt	r7, [sp, #28]
 8008784:	1afa      	sublt	r2, r7, r3
 8008786:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008788:	bfbb      	ittet	lt
 800878a:	189b      	addlt	r3, r3, r2
 800878c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800878e:	1bdf      	subge	r7, r3, r7
 8008790:	2700      	movlt	r7, #0
 8008792:	f1b9 0f00 	cmp.w	r9, #0
 8008796:	bfb5      	itete	lt
 8008798:	9b05      	ldrlt	r3, [sp, #20]
 800879a:	9d05      	ldrge	r5, [sp, #20]
 800879c:	eba3 0509 	sublt.w	r5, r3, r9
 80087a0:	464b      	movge	r3, r9
 80087a2:	bfb8      	it	lt
 80087a4:	2300      	movlt	r3, #0
 80087a6:	e77e      	b.n	80086a6 <_dtoa_r+0x6fe>
 80087a8:	9f07      	ldr	r7, [sp, #28]
 80087aa:	9d05      	ldr	r5, [sp, #20]
 80087ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80087ae:	e783      	b.n	80086b8 <_dtoa_r+0x710>
 80087b0:	9a07      	ldr	r2, [sp, #28]
 80087b2:	e7ab      	b.n	800870c <_dtoa_r+0x764>
 80087b4:	2300      	movs	r3, #0
 80087b6:	e7d4      	b.n	8008762 <_dtoa_r+0x7ba>
 80087b8:	9b00      	ldr	r3, [sp, #0]
 80087ba:	e7d2      	b.n	8008762 <_dtoa_r+0x7ba>
 80087bc:	2300      	movs	r3, #0
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80087c6:	6918      	ldr	r0, [r3, #16]
 80087c8:	f000 fa4d 	bl	8008c66 <__hi0bits>
 80087cc:	f1c0 0020 	rsb	r0, r0, #32
 80087d0:	4440      	add	r0, r8
 80087d2:	f010 001f 	ands.w	r0, r0, #31
 80087d6:	d047      	beq.n	8008868 <_dtoa_r+0x8c0>
 80087d8:	f1c0 0320 	rsb	r3, r0, #32
 80087dc:	2b04      	cmp	r3, #4
 80087de:	dd3b      	ble.n	8008858 <_dtoa_r+0x8b0>
 80087e0:	9b05      	ldr	r3, [sp, #20]
 80087e2:	f1c0 001c 	rsb	r0, r0, #28
 80087e6:	4403      	add	r3, r0
 80087e8:	9305      	str	r3, [sp, #20]
 80087ea:	4405      	add	r5, r0
 80087ec:	4480      	add	r8, r0
 80087ee:	9b05      	ldr	r3, [sp, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	dd05      	ble.n	8008800 <_dtoa_r+0x858>
 80087f4:	461a      	mov	r2, r3
 80087f6:	9904      	ldr	r1, [sp, #16]
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 fb6f 	bl	8008edc <__lshift>
 80087fe:	9004      	str	r0, [sp, #16]
 8008800:	f1b8 0f00 	cmp.w	r8, #0
 8008804:	dd05      	ble.n	8008812 <_dtoa_r+0x86a>
 8008806:	4639      	mov	r1, r7
 8008808:	4642      	mov	r2, r8
 800880a:	4620      	mov	r0, r4
 800880c:	f000 fb66 	bl	8008edc <__lshift>
 8008810:	4607      	mov	r7, r0
 8008812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008814:	b353      	cbz	r3, 800886c <_dtoa_r+0x8c4>
 8008816:	4639      	mov	r1, r7
 8008818:	9804      	ldr	r0, [sp, #16]
 800881a:	f000 fbb3 	bl	8008f84 <__mcmp>
 800881e:	2800      	cmp	r0, #0
 8008820:	da24      	bge.n	800886c <_dtoa_r+0x8c4>
 8008822:	2300      	movs	r3, #0
 8008824:	220a      	movs	r2, #10
 8008826:	9904      	ldr	r1, [sp, #16]
 8008828:	4620      	mov	r0, r4
 800882a:	f000 f9e1 	bl	8008bf0 <__multadd>
 800882e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008830:	9004      	str	r0, [sp, #16]
 8008832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 814d 	beq.w	8008ad6 <_dtoa_r+0xb2e>
 800883c:	2300      	movs	r3, #0
 800883e:	4631      	mov	r1, r6
 8008840:	220a      	movs	r2, #10
 8008842:	4620      	mov	r0, r4
 8008844:	f000 f9d4 	bl	8008bf0 <__multadd>
 8008848:	9b02      	ldr	r3, [sp, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	4606      	mov	r6, r0
 800884e:	dc4f      	bgt.n	80088f0 <_dtoa_r+0x948>
 8008850:	9b06      	ldr	r3, [sp, #24]
 8008852:	2b02      	cmp	r3, #2
 8008854:	dd4c      	ble.n	80088f0 <_dtoa_r+0x948>
 8008856:	e011      	b.n	800887c <_dtoa_r+0x8d4>
 8008858:	d0c9      	beq.n	80087ee <_dtoa_r+0x846>
 800885a:	9a05      	ldr	r2, [sp, #20]
 800885c:	331c      	adds	r3, #28
 800885e:	441a      	add	r2, r3
 8008860:	9205      	str	r2, [sp, #20]
 8008862:	441d      	add	r5, r3
 8008864:	4498      	add	r8, r3
 8008866:	e7c2      	b.n	80087ee <_dtoa_r+0x846>
 8008868:	4603      	mov	r3, r0
 800886a:	e7f6      	b.n	800885a <_dtoa_r+0x8b2>
 800886c:	f1b9 0f00 	cmp.w	r9, #0
 8008870:	dc38      	bgt.n	80088e4 <_dtoa_r+0x93c>
 8008872:	9b06      	ldr	r3, [sp, #24]
 8008874:	2b02      	cmp	r3, #2
 8008876:	dd35      	ble.n	80088e4 <_dtoa_r+0x93c>
 8008878:	f8cd 9008 	str.w	r9, [sp, #8]
 800887c:	9b02      	ldr	r3, [sp, #8]
 800887e:	b963      	cbnz	r3, 800889a <_dtoa_r+0x8f2>
 8008880:	4639      	mov	r1, r7
 8008882:	2205      	movs	r2, #5
 8008884:	4620      	mov	r0, r4
 8008886:	f000 f9b3 	bl	8008bf0 <__multadd>
 800888a:	4601      	mov	r1, r0
 800888c:	4607      	mov	r7, r0
 800888e:	9804      	ldr	r0, [sp, #16]
 8008890:	f000 fb78 	bl	8008f84 <__mcmp>
 8008894:	2800      	cmp	r0, #0
 8008896:	f73f adcc 	bgt.w	8008432 <_dtoa_r+0x48a>
 800889a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800889c:	465d      	mov	r5, fp
 800889e:	ea6f 0a03 	mvn.w	sl, r3
 80088a2:	f04f 0900 	mov.w	r9, #0
 80088a6:	4639      	mov	r1, r7
 80088a8:	4620      	mov	r0, r4
 80088aa:	f000 f98a 	bl	8008bc2 <_Bfree>
 80088ae:	2e00      	cmp	r6, #0
 80088b0:	f43f aeb7 	beq.w	8008622 <_dtoa_r+0x67a>
 80088b4:	f1b9 0f00 	cmp.w	r9, #0
 80088b8:	d005      	beq.n	80088c6 <_dtoa_r+0x91e>
 80088ba:	45b1      	cmp	r9, r6
 80088bc:	d003      	beq.n	80088c6 <_dtoa_r+0x91e>
 80088be:	4649      	mov	r1, r9
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 f97e 	bl	8008bc2 <_Bfree>
 80088c6:	4631      	mov	r1, r6
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 f97a 	bl	8008bc2 <_Bfree>
 80088ce:	e6a8      	b.n	8008622 <_dtoa_r+0x67a>
 80088d0:	2700      	movs	r7, #0
 80088d2:	463e      	mov	r6, r7
 80088d4:	e7e1      	b.n	800889a <_dtoa_r+0x8f2>
 80088d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80088da:	463e      	mov	r6, r7
 80088dc:	e5a9      	b.n	8008432 <_dtoa_r+0x48a>
 80088de:	bf00      	nop
 80088e0:	40240000 	.word	0x40240000
 80088e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80fa 	beq.w	8008ae4 <_dtoa_r+0xb3c>
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	dd05      	ble.n	8008900 <_dtoa_r+0x958>
 80088f4:	4631      	mov	r1, r6
 80088f6:	462a      	mov	r2, r5
 80088f8:	4620      	mov	r0, r4
 80088fa:	f000 faef 	bl	8008edc <__lshift>
 80088fe:	4606      	mov	r6, r0
 8008900:	9b07      	ldr	r3, [sp, #28]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d04c      	beq.n	80089a0 <_dtoa_r+0x9f8>
 8008906:	6871      	ldr	r1, [r6, #4]
 8008908:	4620      	mov	r0, r4
 800890a:	f000 f926 	bl	8008b5a <_Balloc>
 800890e:	6932      	ldr	r2, [r6, #16]
 8008910:	3202      	adds	r2, #2
 8008912:	4605      	mov	r5, r0
 8008914:	0092      	lsls	r2, r2, #2
 8008916:	f106 010c 	add.w	r1, r6, #12
 800891a:	300c      	adds	r0, #12
 800891c:	f000 f912 	bl	8008b44 <memcpy>
 8008920:	2201      	movs	r2, #1
 8008922:	4629      	mov	r1, r5
 8008924:	4620      	mov	r0, r4
 8008926:	f000 fad9 	bl	8008edc <__lshift>
 800892a:	9b00      	ldr	r3, [sp, #0]
 800892c:	f8cd b014 	str.w	fp, [sp, #20]
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	46b1      	mov	r9, r6
 8008936:	9307      	str	r3, [sp, #28]
 8008938:	4606      	mov	r6, r0
 800893a:	4639      	mov	r1, r7
 800893c:	9804      	ldr	r0, [sp, #16]
 800893e:	f7ff faa6 	bl	8007e8e <quorem>
 8008942:	4649      	mov	r1, r9
 8008944:	4605      	mov	r5, r0
 8008946:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800894a:	9804      	ldr	r0, [sp, #16]
 800894c:	f000 fb1a 	bl	8008f84 <__mcmp>
 8008950:	4632      	mov	r2, r6
 8008952:	9000      	str	r0, [sp, #0]
 8008954:	4639      	mov	r1, r7
 8008956:	4620      	mov	r0, r4
 8008958:	f000 fb2e 	bl	8008fb8 <__mdiff>
 800895c:	68c3      	ldr	r3, [r0, #12]
 800895e:	4602      	mov	r2, r0
 8008960:	bb03      	cbnz	r3, 80089a4 <_dtoa_r+0x9fc>
 8008962:	4601      	mov	r1, r0
 8008964:	9008      	str	r0, [sp, #32]
 8008966:	9804      	ldr	r0, [sp, #16]
 8008968:	f000 fb0c 	bl	8008f84 <__mcmp>
 800896c:	9a08      	ldr	r2, [sp, #32]
 800896e:	4603      	mov	r3, r0
 8008970:	4611      	mov	r1, r2
 8008972:	4620      	mov	r0, r4
 8008974:	9308      	str	r3, [sp, #32]
 8008976:	f000 f924 	bl	8008bc2 <_Bfree>
 800897a:	9b08      	ldr	r3, [sp, #32]
 800897c:	b9a3      	cbnz	r3, 80089a8 <_dtoa_r+0xa00>
 800897e:	9a06      	ldr	r2, [sp, #24]
 8008980:	b992      	cbnz	r2, 80089a8 <_dtoa_r+0xa00>
 8008982:	9a07      	ldr	r2, [sp, #28]
 8008984:	b982      	cbnz	r2, 80089a8 <_dtoa_r+0xa00>
 8008986:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800898a:	d029      	beq.n	80089e0 <_dtoa_r+0xa38>
 800898c:	9b00      	ldr	r3, [sp, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	dd01      	ble.n	8008996 <_dtoa_r+0x9ee>
 8008992:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008996:	9b05      	ldr	r3, [sp, #20]
 8008998:	1c5d      	adds	r5, r3, #1
 800899a:	f883 8000 	strb.w	r8, [r3]
 800899e:	e782      	b.n	80088a6 <_dtoa_r+0x8fe>
 80089a0:	4630      	mov	r0, r6
 80089a2:	e7c2      	b.n	800892a <_dtoa_r+0x982>
 80089a4:	2301      	movs	r3, #1
 80089a6:	e7e3      	b.n	8008970 <_dtoa_r+0x9c8>
 80089a8:	9a00      	ldr	r2, [sp, #0]
 80089aa:	2a00      	cmp	r2, #0
 80089ac:	db04      	blt.n	80089b8 <_dtoa_r+0xa10>
 80089ae:	d125      	bne.n	80089fc <_dtoa_r+0xa54>
 80089b0:	9a06      	ldr	r2, [sp, #24]
 80089b2:	bb1a      	cbnz	r2, 80089fc <_dtoa_r+0xa54>
 80089b4:	9a07      	ldr	r2, [sp, #28]
 80089b6:	bb0a      	cbnz	r2, 80089fc <_dtoa_r+0xa54>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	ddec      	ble.n	8008996 <_dtoa_r+0x9ee>
 80089bc:	2201      	movs	r2, #1
 80089be:	9904      	ldr	r1, [sp, #16]
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 fa8b 	bl	8008edc <__lshift>
 80089c6:	4639      	mov	r1, r7
 80089c8:	9004      	str	r0, [sp, #16]
 80089ca:	f000 fadb 	bl	8008f84 <__mcmp>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	dc03      	bgt.n	80089da <_dtoa_r+0xa32>
 80089d2:	d1e0      	bne.n	8008996 <_dtoa_r+0x9ee>
 80089d4:	f018 0f01 	tst.w	r8, #1
 80089d8:	d0dd      	beq.n	8008996 <_dtoa_r+0x9ee>
 80089da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089de:	d1d8      	bne.n	8008992 <_dtoa_r+0x9ea>
 80089e0:	9b05      	ldr	r3, [sp, #20]
 80089e2:	9a05      	ldr	r2, [sp, #20]
 80089e4:	1c5d      	adds	r5, r3, #1
 80089e6:	2339      	movs	r3, #57	; 0x39
 80089e8:	7013      	strb	r3, [r2, #0]
 80089ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089ee:	2b39      	cmp	r3, #57	; 0x39
 80089f0:	f105 32ff 	add.w	r2, r5, #4294967295
 80089f4:	d04f      	beq.n	8008a96 <_dtoa_r+0xaee>
 80089f6:	3301      	adds	r3, #1
 80089f8:	7013      	strb	r3, [r2, #0]
 80089fa:	e754      	b.n	80088a6 <_dtoa_r+0x8fe>
 80089fc:	9a05      	ldr	r2, [sp, #20]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f102 0501 	add.w	r5, r2, #1
 8008a04:	dd06      	ble.n	8008a14 <_dtoa_r+0xa6c>
 8008a06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a0a:	d0e9      	beq.n	80089e0 <_dtoa_r+0xa38>
 8008a0c:	f108 0801 	add.w	r8, r8, #1
 8008a10:	9b05      	ldr	r3, [sp, #20]
 8008a12:	e7c2      	b.n	800899a <_dtoa_r+0x9f2>
 8008a14:	9a02      	ldr	r2, [sp, #8]
 8008a16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008a1a:	eba5 030b 	sub.w	r3, r5, fp
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d021      	beq.n	8008a66 <_dtoa_r+0xabe>
 8008a22:	2300      	movs	r3, #0
 8008a24:	220a      	movs	r2, #10
 8008a26:	9904      	ldr	r1, [sp, #16]
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 f8e1 	bl	8008bf0 <__multadd>
 8008a2e:	45b1      	cmp	r9, r6
 8008a30:	9004      	str	r0, [sp, #16]
 8008a32:	f04f 0300 	mov.w	r3, #0
 8008a36:	f04f 020a 	mov.w	r2, #10
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	d105      	bne.n	8008a4c <_dtoa_r+0xaa4>
 8008a40:	f000 f8d6 	bl	8008bf0 <__multadd>
 8008a44:	4681      	mov	r9, r0
 8008a46:	4606      	mov	r6, r0
 8008a48:	9505      	str	r5, [sp, #20]
 8008a4a:	e776      	b.n	800893a <_dtoa_r+0x992>
 8008a4c:	f000 f8d0 	bl	8008bf0 <__multadd>
 8008a50:	4631      	mov	r1, r6
 8008a52:	4681      	mov	r9, r0
 8008a54:	2300      	movs	r3, #0
 8008a56:	220a      	movs	r2, #10
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 f8c9 	bl	8008bf0 <__multadd>
 8008a5e:	4606      	mov	r6, r0
 8008a60:	e7f2      	b.n	8008a48 <_dtoa_r+0xaa0>
 8008a62:	f04f 0900 	mov.w	r9, #0
 8008a66:	2201      	movs	r2, #1
 8008a68:	9904      	ldr	r1, [sp, #16]
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fa36 	bl	8008edc <__lshift>
 8008a70:	4639      	mov	r1, r7
 8008a72:	9004      	str	r0, [sp, #16]
 8008a74:	f000 fa86 	bl	8008f84 <__mcmp>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	dcb6      	bgt.n	80089ea <_dtoa_r+0xa42>
 8008a7c:	d102      	bne.n	8008a84 <_dtoa_r+0xadc>
 8008a7e:	f018 0f01 	tst.w	r8, #1
 8008a82:	d1b2      	bne.n	80089ea <_dtoa_r+0xa42>
 8008a84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a88:	2b30      	cmp	r3, #48	; 0x30
 8008a8a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008a8e:	f47f af0a 	bne.w	80088a6 <_dtoa_r+0x8fe>
 8008a92:	4615      	mov	r5, r2
 8008a94:	e7f6      	b.n	8008a84 <_dtoa_r+0xadc>
 8008a96:	4593      	cmp	fp, r2
 8008a98:	d105      	bne.n	8008aa6 <_dtoa_r+0xafe>
 8008a9a:	2331      	movs	r3, #49	; 0x31
 8008a9c:	f10a 0a01 	add.w	sl, sl, #1
 8008aa0:	f88b 3000 	strb.w	r3, [fp]
 8008aa4:	e6ff      	b.n	80088a6 <_dtoa_r+0x8fe>
 8008aa6:	4615      	mov	r5, r2
 8008aa8:	e79f      	b.n	80089ea <_dtoa_r+0xa42>
 8008aaa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008b10 <_dtoa_r+0xb68>
 8008aae:	e007      	b.n	8008ac0 <_dtoa_r+0xb18>
 8008ab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ab2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008b14 <_dtoa_r+0xb6c>
 8008ab6:	b11b      	cbz	r3, 8008ac0 <_dtoa_r+0xb18>
 8008ab8:	f10b 0308 	add.w	r3, fp, #8
 8008abc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	b017      	add	sp, #92	; 0x5c
 8008ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac8:	9b06      	ldr	r3, [sp, #24]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	f77f ae35 	ble.w	800873a <_dtoa_r+0x792>
 8008ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ad2:	9307      	str	r3, [sp, #28]
 8008ad4:	e649      	b.n	800876a <_dtoa_r+0x7c2>
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dc03      	bgt.n	8008ae4 <_dtoa_r+0xb3c>
 8008adc:	9b06      	ldr	r3, [sp, #24]
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	f73f aecc 	bgt.w	800887c <_dtoa_r+0x8d4>
 8008ae4:	465d      	mov	r5, fp
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	9804      	ldr	r0, [sp, #16]
 8008aea:	f7ff f9d0 	bl	8007e8e <quorem>
 8008aee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008af2:	f805 8b01 	strb.w	r8, [r5], #1
 8008af6:	9a02      	ldr	r2, [sp, #8]
 8008af8:	eba5 030b 	sub.w	r3, r5, fp
 8008afc:	429a      	cmp	r2, r3
 8008afe:	ddb0      	ble.n	8008a62 <_dtoa_r+0xaba>
 8008b00:	2300      	movs	r3, #0
 8008b02:	220a      	movs	r2, #10
 8008b04:	9904      	ldr	r1, [sp, #16]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f872 	bl	8008bf0 <__multadd>
 8008b0c:	9004      	str	r0, [sp, #16]
 8008b0e:	e7ea      	b.n	8008ae6 <_dtoa_r+0xb3e>
 8008b10:	08009294 	.word	0x08009294
 8008b14:	08009296 	.word	0x08009296

08008b18 <_localeconv_r>:
 8008b18:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <_localeconv_r+0x14>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	6a18      	ldr	r0, [r3, #32]
 8008b1e:	4b04      	ldr	r3, [pc, #16]	; (8008b30 <_localeconv_r+0x18>)
 8008b20:	2800      	cmp	r0, #0
 8008b22:	bf08      	it	eq
 8008b24:	4618      	moveq	r0, r3
 8008b26:	30f0      	adds	r0, #240	; 0xf0
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	20000034 	.word	0x20000034
 8008b30:	20000098 	.word	0x20000098

08008b34 <malloc>:
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <malloc+0xc>)
 8008b36:	4601      	mov	r1, r0
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f000 baf7 	b.w	800912c <_malloc_r>
 8008b3e:	bf00      	nop
 8008b40:	20000034 	.word	0x20000034

08008b44 <memcpy>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	1e43      	subs	r3, r0, #1
 8008b48:	440a      	add	r2, r1
 8008b4a:	4291      	cmp	r1, r2
 8008b4c:	d100      	bne.n	8008b50 <memcpy+0xc>
 8008b4e:	bd10      	pop	{r4, pc}
 8008b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b58:	e7f7      	b.n	8008b4a <memcpy+0x6>

08008b5a <_Balloc>:
 8008b5a:	b570      	push	{r4, r5, r6, lr}
 8008b5c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b5e:	4604      	mov	r4, r0
 8008b60:	460e      	mov	r6, r1
 8008b62:	b93d      	cbnz	r5, 8008b74 <_Balloc+0x1a>
 8008b64:	2010      	movs	r0, #16
 8008b66:	f7ff ffe5 	bl	8008b34 <malloc>
 8008b6a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b6c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b70:	6005      	str	r5, [r0, #0]
 8008b72:	60c5      	str	r5, [r0, #12]
 8008b74:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b76:	68eb      	ldr	r3, [r5, #12]
 8008b78:	b183      	cbz	r3, 8008b9c <_Balloc+0x42>
 8008b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b82:	b9b8      	cbnz	r0, 8008bb4 <_Balloc+0x5a>
 8008b84:	2101      	movs	r1, #1
 8008b86:	fa01 f506 	lsl.w	r5, r1, r6
 8008b8a:	1d6a      	adds	r2, r5, #5
 8008b8c:	0092      	lsls	r2, r2, #2
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 fabe 	bl	8009110 <_calloc_r>
 8008b94:	b160      	cbz	r0, 8008bb0 <_Balloc+0x56>
 8008b96:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008b9a:	e00e      	b.n	8008bba <_Balloc+0x60>
 8008b9c:	2221      	movs	r2, #33	; 0x21
 8008b9e:	2104      	movs	r1, #4
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fab5 	bl	8009110 <_calloc_r>
 8008ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba8:	60e8      	str	r0, [r5, #12]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e4      	bne.n	8008b7a <_Balloc+0x20>
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	6802      	ldr	r2, [r0, #0]
 8008bb6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bc0:	e7f7      	b.n	8008bb2 <_Balloc+0x58>

08008bc2 <_Bfree>:
 8008bc2:	b570      	push	{r4, r5, r6, lr}
 8008bc4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	460d      	mov	r5, r1
 8008bca:	b93c      	cbnz	r4, 8008bdc <_Bfree+0x1a>
 8008bcc:	2010      	movs	r0, #16
 8008bce:	f7ff ffb1 	bl	8008b34 <malloc>
 8008bd2:	6270      	str	r0, [r6, #36]	; 0x24
 8008bd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bd8:	6004      	str	r4, [r0, #0]
 8008bda:	60c4      	str	r4, [r0, #12]
 8008bdc:	b13d      	cbz	r5, 8008bee <_Bfree+0x2c>
 8008bde:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008be0:	686a      	ldr	r2, [r5, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008be8:	6029      	str	r1, [r5, #0]
 8008bea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008bee:	bd70      	pop	{r4, r5, r6, pc}

08008bf0 <__multadd>:
 8008bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf4:	690d      	ldr	r5, [r1, #16]
 8008bf6:	461f      	mov	r7, r3
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	f101 0c14 	add.w	ip, r1, #20
 8008c00:	2300      	movs	r3, #0
 8008c02:	f8dc 0000 	ldr.w	r0, [ip]
 8008c06:	b281      	uxth	r1, r0
 8008c08:	fb02 7101 	mla	r1, r2, r1, r7
 8008c0c:	0c0f      	lsrs	r7, r1, #16
 8008c0e:	0c00      	lsrs	r0, r0, #16
 8008c10:	fb02 7000 	mla	r0, r2, r0, r7
 8008c14:	b289      	uxth	r1, r1
 8008c16:	3301      	adds	r3, #1
 8008c18:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008c1c:	429d      	cmp	r5, r3
 8008c1e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008c22:	f84c 1b04 	str.w	r1, [ip], #4
 8008c26:	dcec      	bgt.n	8008c02 <__multadd+0x12>
 8008c28:	b1d7      	cbz	r7, 8008c60 <__multadd+0x70>
 8008c2a:	68a3      	ldr	r3, [r4, #8]
 8008c2c:	42ab      	cmp	r3, r5
 8008c2e:	dc12      	bgt.n	8008c56 <__multadd+0x66>
 8008c30:	6861      	ldr	r1, [r4, #4]
 8008c32:	4630      	mov	r0, r6
 8008c34:	3101      	adds	r1, #1
 8008c36:	f7ff ff90 	bl	8008b5a <_Balloc>
 8008c3a:	6922      	ldr	r2, [r4, #16]
 8008c3c:	3202      	adds	r2, #2
 8008c3e:	f104 010c 	add.w	r1, r4, #12
 8008c42:	4680      	mov	r8, r0
 8008c44:	0092      	lsls	r2, r2, #2
 8008c46:	300c      	adds	r0, #12
 8008c48:	f7ff ff7c 	bl	8008b44 <memcpy>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f7ff ffb7 	bl	8008bc2 <_Bfree>
 8008c54:	4644      	mov	r4, r8
 8008c56:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c5a:	3501      	adds	r5, #1
 8008c5c:	615f      	str	r7, [r3, #20]
 8008c5e:	6125      	str	r5, [r4, #16]
 8008c60:	4620      	mov	r0, r4
 8008c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c66 <__hi0bits>:
 8008c66:	0c02      	lsrs	r2, r0, #16
 8008c68:	0412      	lsls	r2, r2, #16
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	b9b2      	cbnz	r2, 8008c9c <__hi0bits+0x36>
 8008c6e:	0403      	lsls	r3, r0, #16
 8008c70:	2010      	movs	r0, #16
 8008c72:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c76:	bf04      	itt	eq
 8008c78:	021b      	lsleq	r3, r3, #8
 8008c7a:	3008      	addeq	r0, #8
 8008c7c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c80:	bf04      	itt	eq
 8008c82:	011b      	lsleq	r3, r3, #4
 8008c84:	3004      	addeq	r0, #4
 8008c86:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c8a:	bf04      	itt	eq
 8008c8c:	009b      	lsleq	r3, r3, #2
 8008c8e:	3002      	addeq	r0, #2
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	db06      	blt.n	8008ca2 <__hi0bits+0x3c>
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	d503      	bpl.n	8008ca0 <__hi0bits+0x3a>
 8008c98:	3001      	adds	r0, #1
 8008c9a:	4770      	bx	lr
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	e7e8      	b.n	8008c72 <__hi0bits+0xc>
 8008ca0:	2020      	movs	r0, #32
 8008ca2:	4770      	bx	lr

08008ca4 <__lo0bits>:
 8008ca4:	6803      	ldr	r3, [r0, #0]
 8008ca6:	f013 0207 	ands.w	r2, r3, #7
 8008caa:	4601      	mov	r1, r0
 8008cac:	d00b      	beq.n	8008cc6 <__lo0bits+0x22>
 8008cae:	07da      	lsls	r2, r3, #31
 8008cb0:	d423      	bmi.n	8008cfa <__lo0bits+0x56>
 8008cb2:	0798      	lsls	r0, r3, #30
 8008cb4:	bf49      	itett	mi
 8008cb6:	085b      	lsrmi	r3, r3, #1
 8008cb8:	089b      	lsrpl	r3, r3, #2
 8008cba:	2001      	movmi	r0, #1
 8008cbc:	600b      	strmi	r3, [r1, #0]
 8008cbe:	bf5c      	itt	pl
 8008cc0:	600b      	strpl	r3, [r1, #0]
 8008cc2:	2002      	movpl	r0, #2
 8008cc4:	4770      	bx	lr
 8008cc6:	b298      	uxth	r0, r3
 8008cc8:	b9a8      	cbnz	r0, 8008cf6 <__lo0bits+0x52>
 8008cca:	0c1b      	lsrs	r3, r3, #16
 8008ccc:	2010      	movs	r0, #16
 8008cce:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008cd2:	bf04      	itt	eq
 8008cd4:	0a1b      	lsreq	r3, r3, #8
 8008cd6:	3008      	addeq	r0, #8
 8008cd8:	071a      	lsls	r2, r3, #28
 8008cda:	bf04      	itt	eq
 8008cdc:	091b      	lsreq	r3, r3, #4
 8008cde:	3004      	addeq	r0, #4
 8008ce0:	079a      	lsls	r2, r3, #30
 8008ce2:	bf04      	itt	eq
 8008ce4:	089b      	lsreq	r3, r3, #2
 8008ce6:	3002      	addeq	r0, #2
 8008ce8:	07da      	lsls	r2, r3, #31
 8008cea:	d402      	bmi.n	8008cf2 <__lo0bits+0x4e>
 8008cec:	085b      	lsrs	r3, r3, #1
 8008cee:	d006      	beq.n	8008cfe <__lo0bits+0x5a>
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	600b      	str	r3, [r1, #0]
 8008cf4:	4770      	bx	lr
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	e7e9      	b.n	8008cce <__lo0bits+0x2a>
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	4770      	bx	lr
 8008cfe:	2020      	movs	r0, #32
 8008d00:	4770      	bx	lr

08008d02 <__i2b>:
 8008d02:	b510      	push	{r4, lr}
 8008d04:	460c      	mov	r4, r1
 8008d06:	2101      	movs	r1, #1
 8008d08:	f7ff ff27 	bl	8008b5a <_Balloc>
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	6144      	str	r4, [r0, #20]
 8008d10:	6102      	str	r2, [r0, #16]
 8008d12:	bd10      	pop	{r4, pc}

08008d14 <__multiply>:
 8008d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	4614      	mov	r4, r2
 8008d1a:	690a      	ldr	r2, [r1, #16]
 8008d1c:	6923      	ldr	r3, [r4, #16]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	bfb8      	it	lt
 8008d22:	460b      	movlt	r3, r1
 8008d24:	4688      	mov	r8, r1
 8008d26:	bfbc      	itt	lt
 8008d28:	46a0      	movlt	r8, r4
 8008d2a:	461c      	movlt	r4, r3
 8008d2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d30:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d3c:	eb07 0609 	add.w	r6, r7, r9
 8008d40:	42b3      	cmp	r3, r6
 8008d42:	bfb8      	it	lt
 8008d44:	3101      	addlt	r1, #1
 8008d46:	f7ff ff08 	bl	8008b5a <_Balloc>
 8008d4a:	f100 0514 	add.w	r5, r0, #20
 8008d4e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008d52:	462b      	mov	r3, r5
 8008d54:	2200      	movs	r2, #0
 8008d56:	4573      	cmp	r3, lr
 8008d58:	d316      	bcc.n	8008d88 <__multiply+0x74>
 8008d5a:	f104 0214 	add.w	r2, r4, #20
 8008d5e:	f108 0114 	add.w	r1, r8, #20
 8008d62:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008d66:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	9b00      	ldr	r3, [sp, #0]
 8008d6e:	9201      	str	r2, [sp, #4]
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d80c      	bhi.n	8008d8e <__multiply+0x7a>
 8008d74:	2e00      	cmp	r6, #0
 8008d76:	dd03      	ble.n	8008d80 <__multiply+0x6c>
 8008d78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d05d      	beq.n	8008e3c <__multiply+0x128>
 8008d80:	6106      	str	r6, [r0, #16]
 8008d82:	b003      	add	sp, #12
 8008d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d88:	f843 2b04 	str.w	r2, [r3], #4
 8008d8c:	e7e3      	b.n	8008d56 <__multiply+0x42>
 8008d8e:	f8b2 b000 	ldrh.w	fp, [r2]
 8008d92:	f1bb 0f00 	cmp.w	fp, #0
 8008d96:	d023      	beq.n	8008de0 <__multiply+0xcc>
 8008d98:	4689      	mov	r9, r1
 8008d9a:	46ac      	mov	ip, r5
 8008d9c:	f04f 0800 	mov.w	r8, #0
 8008da0:	f859 4b04 	ldr.w	r4, [r9], #4
 8008da4:	f8dc a000 	ldr.w	sl, [ip]
 8008da8:	b2a3      	uxth	r3, r4
 8008daa:	fa1f fa8a 	uxth.w	sl, sl
 8008dae:	fb0b a303 	mla	r3, fp, r3, sl
 8008db2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008db6:	f8dc 4000 	ldr.w	r4, [ip]
 8008dba:	4443      	add	r3, r8
 8008dbc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dc0:	fb0b 840a 	mla	r4, fp, sl, r8
 8008dc4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008dc8:	46e2      	mov	sl, ip
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008dd0:	454f      	cmp	r7, r9
 8008dd2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dd6:	f84a 3b04 	str.w	r3, [sl], #4
 8008dda:	d82b      	bhi.n	8008e34 <__multiply+0x120>
 8008ddc:	f8cc 8004 	str.w	r8, [ip, #4]
 8008de0:	9b01      	ldr	r3, [sp, #4]
 8008de2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008de6:	3204      	adds	r2, #4
 8008de8:	f1ba 0f00 	cmp.w	sl, #0
 8008dec:	d020      	beq.n	8008e30 <__multiply+0x11c>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	4689      	mov	r9, r1
 8008df2:	46a8      	mov	r8, r5
 8008df4:	f04f 0b00 	mov.w	fp, #0
 8008df8:	f8b9 c000 	ldrh.w	ip, [r9]
 8008dfc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008e00:	fb0a 440c 	mla	r4, sl, ip, r4
 8008e04:	445c      	add	r4, fp
 8008e06:	46c4      	mov	ip, r8
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e0e:	f84c 3b04 	str.w	r3, [ip], #4
 8008e12:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e16:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008e1a:	0c1b      	lsrs	r3, r3, #16
 8008e1c:	fb0a b303 	mla	r3, sl, r3, fp
 8008e20:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008e24:	454f      	cmp	r7, r9
 8008e26:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008e2a:	d805      	bhi.n	8008e38 <__multiply+0x124>
 8008e2c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008e30:	3504      	adds	r5, #4
 8008e32:	e79b      	b.n	8008d6c <__multiply+0x58>
 8008e34:	46d4      	mov	ip, sl
 8008e36:	e7b3      	b.n	8008da0 <__multiply+0x8c>
 8008e38:	46e0      	mov	r8, ip
 8008e3a:	e7dd      	b.n	8008df8 <__multiply+0xe4>
 8008e3c:	3e01      	subs	r6, #1
 8008e3e:	e799      	b.n	8008d74 <__multiply+0x60>

08008e40 <__pow5mult>:
 8008e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e44:	4615      	mov	r5, r2
 8008e46:	f012 0203 	ands.w	r2, r2, #3
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	d007      	beq.n	8008e60 <__pow5mult+0x20>
 8008e50:	3a01      	subs	r2, #1
 8008e52:	4c21      	ldr	r4, [pc, #132]	; (8008ed8 <__pow5mult+0x98>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e5a:	f7ff fec9 	bl	8008bf0 <__multadd>
 8008e5e:	4607      	mov	r7, r0
 8008e60:	10ad      	asrs	r5, r5, #2
 8008e62:	d035      	beq.n	8008ed0 <__pow5mult+0x90>
 8008e64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e66:	b93c      	cbnz	r4, 8008e78 <__pow5mult+0x38>
 8008e68:	2010      	movs	r0, #16
 8008e6a:	f7ff fe63 	bl	8008b34 <malloc>
 8008e6e:	6270      	str	r0, [r6, #36]	; 0x24
 8008e70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e74:	6004      	str	r4, [r0, #0]
 8008e76:	60c4      	str	r4, [r0, #12]
 8008e78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e80:	b94c      	cbnz	r4, 8008e96 <__pow5mult+0x56>
 8008e82:	f240 2171 	movw	r1, #625	; 0x271
 8008e86:	4630      	mov	r0, r6
 8008e88:	f7ff ff3b 	bl	8008d02 <__i2b>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e92:	4604      	mov	r4, r0
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	f04f 0800 	mov.w	r8, #0
 8008e9a:	07eb      	lsls	r3, r5, #31
 8008e9c:	d50a      	bpl.n	8008eb4 <__pow5mult+0x74>
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	4622      	mov	r2, r4
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	f7ff ff36 	bl	8008d14 <__multiply>
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	4681      	mov	r9, r0
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7ff fe88 	bl	8008bc2 <_Bfree>
 8008eb2:	464f      	mov	r7, r9
 8008eb4:	106d      	asrs	r5, r5, #1
 8008eb6:	d00b      	beq.n	8008ed0 <__pow5mult+0x90>
 8008eb8:	6820      	ldr	r0, [r4, #0]
 8008eba:	b938      	cbnz	r0, 8008ecc <__pow5mult+0x8c>
 8008ebc:	4622      	mov	r2, r4
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f7ff ff27 	bl	8008d14 <__multiply>
 8008ec6:	6020      	str	r0, [r4, #0]
 8008ec8:	f8c0 8000 	str.w	r8, [r0]
 8008ecc:	4604      	mov	r4, r0
 8008ece:	e7e4      	b.n	8008e9a <__pow5mult+0x5a>
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed6:	bf00      	nop
 8008ed8:	08009398 	.word	0x08009398

08008edc <__lshift>:
 8008edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ee6:	6923      	ldr	r3, [r4, #16]
 8008ee8:	6849      	ldr	r1, [r1, #4]
 8008eea:	eb0a 0903 	add.w	r9, sl, r3
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	4607      	mov	r7, r0
 8008ef2:	4616      	mov	r6, r2
 8008ef4:	f109 0501 	add.w	r5, r9, #1
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	db32      	blt.n	8008f62 <__lshift+0x86>
 8008efc:	4638      	mov	r0, r7
 8008efe:	f7ff fe2c 	bl	8008b5a <_Balloc>
 8008f02:	2300      	movs	r3, #0
 8008f04:	4680      	mov	r8, r0
 8008f06:	f100 0114 	add.w	r1, r0, #20
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4553      	cmp	r3, sl
 8008f0e:	db2b      	blt.n	8008f68 <__lshift+0x8c>
 8008f10:	6920      	ldr	r0, [r4, #16]
 8008f12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f16:	f104 0314 	add.w	r3, r4, #20
 8008f1a:	f016 021f 	ands.w	r2, r6, #31
 8008f1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f26:	d025      	beq.n	8008f74 <__lshift+0x98>
 8008f28:	f1c2 0e20 	rsb	lr, r2, #32
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	681e      	ldr	r6, [r3, #0]
 8008f30:	468a      	mov	sl, r1
 8008f32:	4096      	lsls	r6, r2
 8008f34:	4330      	orrs	r0, r6
 8008f36:	f84a 0b04 	str.w	r0, [sl], #4
 8008f3a:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f3e:	459c      	cmp	ip, r3
 8008f40:	fa20 f00e 	lsr.w	r0, r0, lr
 8008f44:	d814      	bhi.n	8008f70 <__lshift+0x94>
 8008f46:	6048      	str	r0, [r1, #4]
 8008f48:	b108      	cbz	r0, 8008f4e <__lshift+0x72>
 8008f4a:	f109 0502 	add.w	r5, r9, #2
 8008f4e:	3d01      	subs	r5, #1
 8008f50:	4638      	mov	r0, r7
 8008f52:	f8c8 5010 	str.w	r5, [r8, #16]
 8008f56:	4621      	mov	r1, r4
 8008f58:	f7ff fe33 	bl	8008bc2 <_Bfree>
 8008f5c:	4640      	mov	r0, r8
 8008f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f62:	3101      	adds	r1, #1
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	e7c7      	b.n	8008ef8 <__lshift+0x1c>
 8008f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	e7cd      	b.n	8008f0c <__lshift+0x30>
 8008f70:	4651      	mov	r1, sl
 8008f72:	e7dc      	b.n	8008f2e <__lshift+0x52>
 8008f74:	3904      	subs	r1, #4
 8008f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f7e:	459c      	cmp	ip, r3
 8008f80:	d8f9      	bhi.n	8008f76 <__lshift+0x9a>
 8008f82:	e7e4      	b.n	8008f4e <__lshift+0x72>

08008f84 <__mcmp>:
 8008f84:	6903      	ldr	r3, [r0, #16]
 8008f86:	690a      	ldr	r2, [r1, #16]
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	b530      	push	{r4, r5, lr}
 8008f8c:	d10c      	bne.n	8008fa8 <__mcmp+0x24>
 8008f8e:	0092      	lsls	r2, r2, #2
 8008f90:	3014      	adds	r0, #20
 8008f92:	3114      	adds	r1, #20
 8008f94:	1884      	adds	r4, r0, r2
 8008f96:	4411      	add	r1, r2
 8008f98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fa0:	4295      	cmp	r5, r2
 8008fa2:	d003      	beq.n	8008fac <__mcmp+0x28>
 8008fa4:	d305      	bcc.n	8008fb2 <__mcmp+0x2e>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4618      	mov	r0, r3
 8008faa:	bd30      	pop	{r4, r5, pc}
 8008fac:	42a0      	cmp	r0, r4
 8008fae:	d3f3      	bcc.n	8008f98 <__mcmp+0x14>
 8008fb0:	e7fa      	b.n	8008fa8 <__mcmp+0x24>
 8008fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb6:	e7f7      	b.n	8008fa8 <__mcmp+0x24>

08008fb8 <__mdiff>:
 8008fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fbc:	460d      	mov	r5, r1
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	4614      	mov	r4, r2
 8008fc6:	f7ff ffdd 	bl	8008f84 <__mcmp>
 8008fca:	1e06      	subs	r6, r0, #0
 8008fcc:	d108      	bne.n	8008fe0 <__mdiff+0x28>
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4638      	mov	r0, r7
 8008fd2:	f7ff fdc2 	bl	8008b5a <_Balloc>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe0:	bfa4      	itt	ge
 8008fe2:	4623      	movge	r3, r4
 8008fe4:	462c      	movge	r4, r5
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	6861      	ldr	r1, [r4, #4]
 8008fea:	bfa6      	itte	ge
 8008fec:	461d      	movge	r5, r3
 8008fee:	2600      	movge	r6, #0
 8008ff0:	2601      	movlt	r6, #1
 8008ff2:	f7ff fdb2 	bl	8008b5a <_Balloc>
 8008ff6:	692b      	ldr	r3, [r5, #16]
 8008ff8:	60c6      	str	r6, [r0, #12]
 8008ffa:	6926      	ldr	r6, [r4, #16]
 8008ffc:	f105 0914 	add.w	r9, r5, #20
 8009000:	f104 0214 	add.w	r2, r4, #20
 8009004:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009008:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800900c:	f100 0514 	add.w	r5, r0, #20
 8009010:	f04f 0e00 	mov.w	lr, #0
 8009014:	f852 ab04 	ldr.w	sl, [r2], #4
 8009018:	f859 4b04 	ldr.w	r4, [r9], #4
 800901c:	fa1e f18a 	uxtah	r1, lr, sl
 8009020:	b2a3      	uxth	r3, r4
 8009022:	1ac9      	subs	r1, r1, r3
 8009024:	0c23      	lsrs	r3, r4, #16
 8009026:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800902a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800902e:	b289      	uxth	r1, r1
 8009030:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009034:	45c8      	cmp	r8, r9
 8009036:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800903a:	4694      	mov	ip, r2
 800903c:	f845 3b04 	str.w	r3, [r5], #4
 8009040:	d8e8      	bhi.n	8009014 <__mdiff+0x5c>
 8009042:	45bc      	cmp	ip, r7
 8009044:	d304      	bcc.n	8009050 <__mdiff+0x98>
 8009046:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800904a:	b183      	cbz	r3, 800906e <__mdiff+0xb6>
 800904c:	6106      	str	r6, [r0, #16]
 800904e:	e7c5      	b.n	8008fdc <__mdiff+0x24>
 8009050:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009054:	fa1e f381 	uxtah	r3, lr, r1
 8009058:	141a      	asrs	r2, r3, #16
 800905a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800905e:	b29b      	uxth	r3, r3
 8009060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009064:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009068:	f845 3b04 	str.w	r3, [r5], #4
 800906c:	e7e9      	b.n	8009042 <__mdiff+0x8a>
 800906e:	3e01      	subs	r6, #1
 8009070:	e7e9      	b.n	8009046 <__mdiff+0x8e>

08009072 <__d2b>:
 8009072:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009076:	460e      	mov	r6, r1
 8009078:	2101      	movs	r1, #1
 800907a:	ec59 8b10 	vmov	r8, r9, d0
 800907e:	4615      	mov	r5, r2
 8009080:	f7ff fd6b 	bl	8008b5a <_Balloc>
 8009084:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009088:	4607      	mov	r7, r0
 800908a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800908e:	bb34      	cbnz	r4, 80090de <__d2b+0x6c>
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	f1b8 0300 	subs.w	r3, r8, #0
 8009096:	d027      	beq.n	80090e8 <__d2b+0x76>
 8009098:	a802      	add	r0, sp, #8
 800909a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800909e:	f7ff fe01 	bl	8008ca4 <__lo0bits>
 80090a2:	9900      	ldr	r1, [sp, #0]
 80090a4:	b1f0      	cbz	r0, 80090e4 <__d2b+0x72>
 80090a6:	9a01      	ldr	r2, [sp, #4]
 80090a8:	f1c0 0320 	rsb	r3, r0, #32
 80090ac:	fa02 f303 	lsl.w	r3, r2, r3
 80090b0:	430b      	orrs	r3, r1
 80090b2:	40c2      	lsrs	r2, r0
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	9201      	str	r2, [sp, #4]
 80090b8:	9b01      	ldr	r3, [sp, #4]
 80090ba:	61bb      	str	r3, [r7, #24]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	bf14      	ite	ne
 80090c0:	2102      	movne	r1, #2
 80090c2:	2101      	moveq	r1, #1
 80090c4:	6139      	str	r1, [r7, #16]
 80090c6:	b1c4      	cbz	r4, 80090fa <__d2b+0x88>
 80090c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80090cc:	4404      	add	r4, r0
 80090ce:	6034      	str	r4, [r6, #0]
 80090d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090d4:	6028      	str	r0, [r5, #0]
 80090d6:	4638      	mov	r0, r7
 80090d8:	b003      	add	sp, #12
 80090da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090e2:	e7d5      	b.n	8009090 <__d2b+0x1e>
 80090e4:	6179      	str	r1, [r7, #20]
 80090e6:	e7e7      	b.n	80090b8 <__d2b+0x46>
 80090e8:	a801      	add	r0, sp, #4
 80090ea:	f7ff fddb 	bl	8008ca4 <__lo0bits>
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	2101      	movs	r1, #1
 80090f4:	6139      	str	r1, [r7, #16]
 80090f6:	3020      	adds	r0, #32
 80090f8:	e7e5      	b.n	80090c6 <__d2b+0x54>
 80090fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80090fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009102:	6030      	str	r0, [r6, #0]
 8009104:	6918      	ldr	r0, [r3, #16]
 8009106:	f7ff fdae 	bl	8008c66 <__hi0bits>
 800910a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800910e:	e7e1      	b.n	80090d4 <__d2b+0x62>

08009110 <_calloc_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	fb02 f401 	mul.w	r4, r2, r1
 8009116:	4621      	mov	r1, r4
 8009118:	f000 f808 	bl	800912c <_malloc_r>
 800911c:	4605      	mov	r5, r0
 800911e:	b118      	cbz	r0, 8009128 <_calloc_r+0x18>
 8009120:	4622      	mov	r2, r4
 8009122:	2100      	movs	r1, #0
 8009124:	f7fe fb62 	bl	80077ec <memset>
 8009128:	4628      	mov	r0, r5
 800912a:	bd38      	pop	{r3, r4, r5, pc}

0800912c <_malloc_r>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	1ccd      	adds	r5, r1, #3
 8009130:	f025 0503 	bic.w	r5, r5, #3
 8009134:	3508      	adds	r5, #8
 8009136:	2d0c      	cmp	r5, #12
 8009138:	bf38      	it	cc
 800913a:	250c      	movcc	r5, #12
 800913c:	2d00      	cmp	r5, #0
 800913e:	4606      	mov	r6, r0
 8009140:	db01      	blt.n	8009146 <_malloc_r+0x1a>
 8009142:	42a9      	cmp	r1, r5
 8009144:	d903      	bls.n	800914e <_malloc_r+0x22>
 8009146:	230c      	movs	r3, #12
 8009148:	6033      	str	r3, [r6, #0]
 800914a:	2000      	movs	r0, #0
 800914c:	bd70      	pop	{r4, r5, r6, pc}
 800914e:	f000 f869 	bl	8009224 <__malloc_lock>
 8009152:	4a21      	ldr	r2, [pc, #132]	; (80091d8 <_malloc_r+0xac>)
 8009154:	6814      	ldr	r4, [r2, #0]
 8009156:	4621      	mov	r1, r4
 8009158:	b991      	cbnz	r1, 8009180 <_malloc_r+0x54>
 800915a:	4c20      	ldr	r4, [pc, #128]	; (80091dc <_malloc_r+0xb0>)
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	b91b      	cbnz	r3, 8009168 <_malloc_r+0x3c>
 8009160:	4630      	mov	r0, r6
 8009162:	f000 f83d 	bl	80091e0 <_sbrk_r>
 8009166:	6020      	str	r0, [r4, #0]
 8009168:	4629      	mov	r1, r5
 800916a:	4630      	mov	r0, r6
 800916c:	f000 f838 	bl	80091e0 <_sbrk_r>
 8009170:	1c43      	adds	r3, r0, #1
 8009172:	d124      	bne.n	80091be <_malloc_r+0x92>
 8009174:	230c      	movs	r3, #12
 8009176:	6033      	str	r3, [r6, #0]
 8009178:	4630      	mov	r0, r6
 800917a:	f000 f854 	bl	8009226 <__malloc_unlock>
 800917e:	e7e4      	b.n	800914a <_malloc_r+0x1e>
 8009180:	680b      	ldr	r3, [r1, #0]
 8009182:	1b5b      	subs	r3, r3, r5
 8009184:	d418      	bmi.n	80091b8 <_malloc_r+0x8c>
 8009186:	2b0b      	cmp	r3, #11
 8009188:	d90f      	bls.n	80091aa <_malloc_r+0x7e>
 800918a:	600b      	str	r3, [r1, #0]
 800918c:	50cd      	str	r5, [r1, r3]
 800918e:	18cc      	adds	r4, r1, r3
 8009190:	4630      	mov	r0, r6
 8009192:	f000 f848 	bl	8009226 <__malloc_unlock>
 8009196:	f104 000b 	add.w	r0, r4, #11
 800919a:	1d23      	adds	r3, r4, #4
 800919c:	f020 0007 	bic.w	r0, r0, #7
 80091a0:	1ac3      	subs	r3, r0, r3
 80091a2:	d0d3      	beq.n	800914c <_malloc_r+0x20>
 80091a4:	425a      	negs	r2, r3
 80091a6:	50e2      	str	r2, [r4, r3]
 80091a8:	e7d0      	b.n	800914c <_malloc_r+0x20>
 80091aa:	428c      	cmp	r4, r1
 80091ac:	684b      	ldr	r3, [r1, #4]
 80091ae:	bf16      	itet	ne
 80091b0:	6063      	strne	r3, [r4, #4]
 80091b2:	6013      	streq	r3, [r2, #0]
 80091b4:	460c      	movne	r4, r1
 80091b6:	e7eb      	b.n	8009190 <_malloc_r+0x64>
 80091b8:	460c      	mov	r4, r1
 80091ba:	6849      	ldr	r1, [r1, #4]
 80091bc:	e7cc      	b.n	8009158 <_malloc_r+0x2c>
 80091be:	1cc4      	adds	r4, r0, #3
 80091c0:	f024 0403 	bic.w	r4, r4, #3
 80091c4:	42a0      	cmp	r0, r4
 80091c6:	d005      	beq.n	80091d4 <_malloc_r+0xa8>
 80091c8:	1a21      	subs	r1, r4, r0
 80091ca:	4630      	mov	r0, r6
 80091cc:	f000 f808 	bl	80091e0 <_sbrk_r>
 80091d0:	3001      	adds	r0, #1
 80091d2:	d0cf      	beq.n	8009174 <_malloc_r+0x48>
 80091d4:	6025      	str	r5, [r4, #0]
 80091d6:	e7db      	b.n	8009190 <_malloc_r+0x64>
 80091d8:	2000031c 	.word	0x2000031c
 80091dc:	20000320 	.word	0x20000320

080091e0 <_sbrk_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4c06      	ldr	r4, [pc, #24]	; (80091fc <_sbrk_r+0x1c>)
 80091e4:	2300      	movs	r3, #0
 80091e6:	4605      	mov	r5, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	f7fa f86c 	bl	80032c8 <_sbrk>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_sbrk_r+0x1a>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_sbrk_r+0x1a>
 80091f8:	602b      	str	r3, [r5, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	20000858 	.word	0x20000858

08009200 <__ascii_mbtowc>:
 8009200:	b082      	sub	sp, #8
 8009202:	b901      	cbnz	r1, 8009206 <__ascii_mbtowc+0x6>
 8009204:	a901      	add	r1, sp, #4
 8009206:	b142      	cbz	r2, 800921a <__ascii_mbtowc+0x1a>
 8009208:	b14b      	cbz	r3, 800921e <__ascii_mbtowc+0x1e>
 800920a:	7813      	ldrb	r3, [r2, #0]
 800920c:	600b      	str	r3, [r1, #0]
 800920e:	7812      	ldrb	r2, [r2, #0]
 8009210:	1c10      	adds	r0, r2, #0
 8009212:	bf18      	it	ne
 8009214:	2001      	movne	r0, #1
 8009216:	b002      	add	sp, #8
 8009218:	4770      	bx	lr
 800921a:	4610      	mov	r0, r2
 800921c:	e7fb      	b.n	8009216 <__ascii_mbtowc+0x16>
 800921e:	f06f 0001 	mvn.w	r0, #1
 8009222:	e7f8      	b.n	8009216 <__ascii_mbtowc+0x16>

08009224 <__malloc_lock>:
 8009224:	4770      	bx	lr

08009226 <__malloc_unlock>:
 8009226:	4770      	bx	lr

08009228 <__ascii_wctomb>:
 8009228:	b149      	cbz	r1, 800923e <__ascii_wctomb+0x16>
 800922a:	2aff      	cmp	r2, #255	; 0xff
 800922c:	bf85      	ittet	hi
 800922e:	238a      	movhi	r3, #138	; 0x8a
 8009230:	6003      	strhi	r3, [r0, #0]
 8009232:	700a      	strbls	r2, [r1, #0]
 8009234:	f04f 30ff 	movhi.w	r0, #4294967295
 8009238:	bf98      	it	ls
 800923a:	2001      	movls	r0, #1
 800923c:	4770      	bx	lr
 800923e:	4608      	mov	r0, r1
 8009240:	4770      	bx	lr
	...

08009244 <_init>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr

08009250 <_fini>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr
